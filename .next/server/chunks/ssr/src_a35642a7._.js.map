{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 12, "column": 0}, "map": {"version":3,"sources":["file://E%3A/Teste%20AWS/aws-monitoring-platform/src/app/dashboard/iam/user-management-modals.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { \r\n  Dialog, \r\n  DialogContent, \r\n  DialogFooter, \r\n  DialogHeader, \r\n  DialogTitle,\r\n  DialogDescription\r\n} from \"@/components/ui/dialog\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport { Checkbox } from \"@/components/ui/checkbox\";\r\nimport { toast } from 'sonner';\r\nimport { AlertCircle, Check, Loader2 } from 'lucide-react';\r\n\r\ninterface IAMPolicy {\r\n  PolicyName: string;\r\n  PolicyArn: string;\r\n}\r\n\r\ninterface AddUserModalProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  onAddUser: (userData: {\r\n    username: string;\r\n    withConsoleAccess: boolean;\r\n    password?: string;\r\n    policies: string[];\r\n  }) => Promise<void>;\r\n  availablePolicies: IAMPolicy[];\r\n  isLoading: boolean;\r\n}\r\n\r\nexport function AddUserModal({ \r\n  isOpen, \r\n  onClose, \r\n  onAddUser, \r\n  availablePolicies,\r\n  isLoading \r\n}: AddUserModalProps) {\r\n  const [username, setUsername] = useState('');\r\n  const [withConsoleAccess, setWithConsoleAccess] = useState(false);\r\n  const [password, setPassword] = useState('');\r\n  const [selectedPolicies, setSelectedPolicies] = useState<string[]>([]);\r\n  \r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    \r\n    if (!username) {\r\n      toast.error('Username is required');\r\n      return;\r\n    }\r\n    \r\n    if (withConsoleAccess && !password) {\r\n      toast.error('Password is required for console access');\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      await onAddUser({\r\n        username,\r\n        withConsoleAccess,\r\n        password: withConsoleAccess ? password : undefined,\r\n        policies: selectedPolicies\r\n      });\r\n      \r\n      // Reset form\r\n      setUsername('');\r\n      setWithConsoleAccess(false);\r\n      setPassword('');\r\n      setSelectedPolicies([]);\r\n      \r\n    } catch (error) {\r\n      console.error('Error adding user:', error);\r\n    }\r\n  };\r\n  \r\n  const togglePolicy = (policyArn: string) => {\r\n    setSelectedPolicies(prev => \r\n      prev.includes(policyArn)\r\n        ? prev.filter(arn => arn !== policyArn)\r\n        : [...prev, policyArn]\r\n    );\r\n  };\r\n  \r\n  return (\r\n    <Dialog open={isOpen} onOpenChange={onClose}>\r\n      <DialogContent className=\"sm:max-w-[500px]\">\r\n        <DialogHeader>\r\n          <DialogTitle>Add New IAM User</DialogTitle>\r\n          <DialogDescription>\r\n            Create a new IAM user with the selected permissions.\r\n          </DialogDescription>\r\n        </DialogHeader>\r\n        \r\n        <form onSubmit={handleSubmit} className=\"space-y-4 py-4\">\r\n          <div className=\"grid w-full items-center gap-2\">\r\n            <Label htmlFor=\"username\">Username</Label>\r\n            <Input\r\n              id=\"username\"\r\n              value={username}\r\n              onChange={(e) => setUsername(e.target.value)}\r\n              placeholder=\"Enter username\"\r\n              required\r\n            />\r\n          </div>\r\n          \r\n          <div className=\"flex items-center space-x-2\">\r\n            <Checkbox\r\n              id=\"withConsoleAccess\"\r\n              checked={withConsoleAccess}\r\n              onCheckedChange={(checked) => \r\n                setWithConsoleAccess(checked === true)\r\n              }\r\n            />\r\n            <Label htmlFor=\"withConsoleAccess\">Enable AWS Console Access</Label>\r\n          </div>\r\n          \r\n          {withConsoleAccess && (\r\n            <div className=\"grid w-full items-center gap-2\">\r\n              <Label htmlFor=\"password\">Password</Label>\r\n              <Input\r\n                id=\"password\"\r\n                type=\"password\"\r\n                value={password}\r\n                onChange={(e) => setPassword(e.target.value)}\r\n                placeholder=\"Enter password\"\r\n                required={withConsoleAccess}\r\n              />\r\n            </div>\r\n          )}\r\n          \r\n          {availablePolicies.length > 0 && (\r\n            <div className=\"space-y-2\">\r\n              <Label>Attach Policies</Label>\r\n              <div className=\"max-h-[200px] overflow-y-auto border rounded-md p-2\">\r\n                {availablePolicies.map((policy) => (\r\n                  <div key={policy.PolicyArn} className=\"flex items-center space-x-2 py-1\">\r\n                    <Checkbox\r\n                      id={policy.PolicyArn}\r\n                      checked={selectedPolicies.includes(policy.PolicyArn)}\r\n                      onCheckedChange={() => togglePolicy(policy.PolicyArn)}\r\n                    />\r\n                    <Label htmlFor={policy.PolicyArn} className=\"cursor-pointer\">\r\n                      {policy.PolicyName}\r\n                    </Label>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          )}\r\n          \r\n          <DialogFooter>\r\n            <Button type=\"button\" variant=\"outline\" onClick={onClose}>\r\n              Cancel\r\n            </Button>\r\n            <Button type=\"submit\" disabled={isLoading}>\r\n              {isLoading ? (\r\n                <>\r\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\r\n                  Creating...\r\n                </>\r\n              ) : (\r\n                <>\r\n                  <Check className=\"mr-2 h-4 w-4\" />\r\n                  Create User\r\n                </>\r\n              )}\r\n            </Button>\r\n          </DialogFooter>\r\n        </form>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n}\r\n\r\ninterface EditUserModalProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  user: {\r\n    name: string;\r\n    hasMfa: boolean;\r\n    accessKeysCount: number;\r\n    policiesCount: number;\r\n  } | null;\r\n  userPolicies: IAMPolicy[];\r\n  availablePolicies: IAMPolicy[];\r\n  onUpdateUser: (data: {\r\n    username: string;\r\n    addPolicies: string[];\r\n    removePolicies: string[];\r\n    updatePassword: boolean;\r\n    newPassword?: string;\r\n  }) => Promise<void>;\r\n  isLoading: boolean;\r\n}\r\n\r\nexport function EditUserModal({\r\n  isOpen,\r\n  onClose,\r\n  user,\r\n  userPolicies,\r\n  availablePolicies,\r\n  onUpdateUser,\r\n  isLoading\r\n}: EditUserModalProps) {\r\n  const [updatePassword, setUpdatePassword] = useState(false);\r\n  const [newPassword, setNewPassword] = useState('');\r\n  const [selectedPolicies, setSelectedPolicies] = useState<string[]>([]);\r\n  \r\n  // Reset state when modal opens with a new user\r\n  React.useEffect(() => {\r\n    if (isOpen && user) {\r\n      setUpdatePassword(false);\r\n      setNewPassword('');\r\n      setSelectedPolicies(userPolicies.map(p => p.PolicyArn));\r\n    }\r\n  }, [isOpen, user, userPolicies]);\r\n  \r\n  if (!user) return null;\r\n  \r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    \r\n    if (updatePassword && !newPassword) {\r\n      toast.error('New password is required');\r\n      return;\r\n    }\r\n    \r\n    // Determine which policies to add and which to remove\r\n    const originalPolicies = userPolicies.map(p => p.PolicyArn);\r\n    const addPolicies = selectedPolicies.filter(p => !originalPolicies.includes(p));\r\n    const removePolicies = originalPolicies.filter(p => !selectedPolicies.includes(p));\r\n    \r\n    try {\r\n      await onUpdateUser({\r\n        username: user.name,\r\n        addPolicies,\r\n        removePolicies,\r\n        updatePassword,\r\n        newPassword: updatePassword ? newPassword : undefined\r\n      });\r\n      \r\n      // Reset form\r\n      setUpdatePassword(false);\r\n      setNewPassword('');\r\n      \r\n    } catch (error) {\r\n      console.error('Error updating user:', error);\r\n    }\r\n  };\r\n  \r\n  const togglePolicy = (policyArn: string) => {\r\n    setSelectedPolicies(prev => \r\n      prev.includes(policyArn)\r\n        ? prev.filter(arn => arn !== policyArn)\r\n        : [...prev, policyArn]\r\n    );\r\n  };\r\n  \r\n  return (\r\n    <Dialog open={isOpen} onOpenChange={onClose}>\r\n      <DialogContent className=\"sm:max-w-[500px]\">\r\n        <DialogHeader>\r\n          <DialogTitle>Edit User: {user.name}</DialogTitle>\r\n          <DialogDescription>\r\n            Update user settings and permissions.\r\n          </DialogDescription>\r\n        </DialogHeader>\r\n        \r\n        <form onSubmit={handleSubmit} className=\"space-y-4 py-4\">\r\n          <div className=\"flex items-center space-x-2\">\r\n            <Checkbox\r\n              id=\"updatePassword\"\r\n              checked={updatePassword}\r\n              onCheckedChange={(checked) => \r\n                setUpdatePassword(checked === true)\r\n              }\r\n            />\r\n            <Label htmlFor=\"updatePassword\">Update Password</Label>\r\n          </div>\r\n          \r\n          {updatePassword && (\r\n            <div className=\"grid w-full items-center gap-2\">\r\n              <Label htmlFor=\"newPassword\">New Password</Label>\r\n              <Input\r\n                id=\"newPassword\"\r\n                type=\"password\"\r\n                value={newPassword}\r\n                onChange={(e) => setNewPassword(e.target.value)}\r\n                placeholder=\"Enter new password\"\r\n                required={updatePassword}\r\n              />\r\n            </div>\r\n          )}\r\n          \r\n          <div className=\"space-y-2\">\r\n            <Label>Manage Policies</Label>\r\n            <div className=\"max-h-[200px] overflow-y-auto border rounded-md p-2\">\r\n              {availablePolicies.map((policy) => (\r\n                <div key={policy.PolicyArn} className=\"flex items-center space-x-2 py-1\">\r\n                  <Checkbox\r\n                    id={policy.PolicyArn}\r\n                    checked={selectedPolicies.includes(policy.PolicyArn)}\r\n                    onCheckedChange={() => togglePolicy(policy.PolicyArn)}\r\n                  />\r\n                  <Label htmlFor={policy.PolicyArn} className=\"cursor-pointer\">\r\n                    {policy.PolicyName}\r\n                  </Label>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n          \r\n          <DialogFooter>\r\n            <Button type=\"button\" variant=\"outline\" onClick={onClose}>\r\n              Cancel\r\n            </Button>\r\n            <Button type=\"submit\" disabled={isLoading}>\r\n              {isLoading ? (\r\n                <>\r\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\r\n                  Updating...\r\n                </>\r\n              ) : (\r\n                <>\r\n                  <Check className=\"mr-2 h-4 w-4\" />\r\n                  Update User\r\n                </>\r\n              )}\r\n            </Button>\r\n          </DialogFooter>\r\n        </form>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n}\r\n\r\ninterface DeleteUserModalProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  user: { name: string } | null;\r\n  onDeleteUser: (username: string) => Promise<void>;\r\n  isLoading: boolean;\r\n}\r\n\r\nexport function DeleteUserModal({\r\n  isOpen,\r\n  onClose,\r\n  user,\r\n  onDeleteUser,\r\n  isLoading\r\n}: DeleteUserModalProps) {\r\n  const [confirmUsername, setConfirmUsername] = useState('');\r\n  \r\n  // Reset state when modal opens\r\n  React.useEffect(() => {\r\n    if (isOpen) {\r\n      setConfirmUsername('');\r\n    }\r\n  }, [isOpen]);\r\n  \r\n  if (!user) return null;\r\n  \r\n  const handleDelete = async () => {\r\n    if (confirmUsername !== user.name) {\r\n      toast.error('Username does not match');\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      await onDeleteUser(user.name);\r\n      setConfirmUsername('');\r\n    } catch (error) {\r\n      console.error('Error deleting user:', error);\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <Dialog open={isOpen} onOpenChange={onClose}>\r\n      <DialogContent className=\"sm:max-w-[500px]\">\r\n        <DialogHeader>\r\n          <DialogTitle className=\"text-red-500 flex items-center\">\r\n            <AlertCircle className=\"mr-2 h-5 w-5\" />\r\n            Delete User: {user.name}\r\n          </DialogTitle>\r\n          <DialogDescription>\r\n            This action cannot be undone. This will permanently delete the user \r\n            and remove all associated permissions and access keys.\r\n          </DialogDescription>\r\n        </DialogHeader>\r\n        \r\n        <div className=\"space-y-4 py-4\">\r\n          <div className=\"grid w-full items-center gap-2\">\r\n            <Label htmlFor=\"confirmUsername\">\r\n              Type <span className=\"font-semibold\">{user.name}</span> to confirm\r\n            </Label>\r\n            <Input\r\n              id=\"confirmUsername\"\r\n              value={confirmUsername}\r\n              onChange={(e) => setConfirmUsername(e.target.value)}\r\n              placeholder={`Type ${user.name} to confirm`}\r\n            />\r\n          </div>\r\n          \r\n          <DialogFooter>\r\n            <Button type=\"button\" variant=\"outline\" onClick={onClose}>\r\n              Cancel\r\n            </Button>\r\n            <Button \r\n              type=\"button\" \r\n              variant=\"destructive\"\r\n              onClick={handleDelete}\r\n              disabled={confirmUsername !== user.name || isLoading}\r\n            >\r\n              {isLoading ? (\r\n                <>\r\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\r\n                  Deleting...\r\n                </>\r\n              ) : (\r\n                <>\r\n                  <AlertCircle className=\"mr-2 h-4 w-4\" />\r\n                  Delete User\r\n                </>\r\n              )}\r\n            </Button>\r\n          </DialogFooter>\r\n        </div>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 755, "column": 0}, "map": {"version":3,"sources":["file://E%3A/Teste%20AWS/aws-monitoring-platform/src/app/dashboard/iam/page.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { motion } from 'framer-motion';\r\nimport { MoreHorizontal, Plus, RefreshCw, Shield, UserCheck, UserX } from 'lucide-react';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Avatar, AvatarFallback } from '@/components/ui/avatar';\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuContent,\r\n  DropdownMenuItem,\r\n  DropdownMenuTrigger,\r\n} from '@/components/ui/dropdown-menu';\r\nimport { toast } from 'sonner';\r\nimport { AddUserModal, EditUserModal, DeleteUserModal } from './user-management-modals';\r\n\r\ninterface IAMUser {\r\n  userName: string;\r\n  createDate: string;\r\n  lastAccessed: string;\r\n  hasMfa: boolean;\r\n  accessKeysCount: number;\r\n  policiesCount: number;\r\n  riskLevel: 'high' | 'medium' | 'low';\r\n}\r\n\r\ninterface IAMPolicy {\r\n  PolicyName: string;\r\n  PolicyArn: string;\r\n}\r\n\r\nexport default function IAMPage() {\r\n  const [users, setUsers] = useState<IAMUser[]>([]);\r\n  const [availablePolicies, setAvailablePolicies] = useState<IAMPolicy[]>([]);\r\n  const [userPolicies, setUserPolicies] = useState<IAMPolicy[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [refreshing, setRefreshing] = useState(false);\r\n  const [actionLoading, setActionLoading] = useState(false);\r\n  \r\n  // Modal states\r\n  const [addUserModalOpen, setAddUserModalOpen] = useState(false);\r\n  const [editUserModalOpen, setEditUserModalOpen] = useState(false);\r\n  const [deleteUserModalOpen, setDeleteUserModalOpen] = useState(false);\r\n  const [selectedUser, setSelectedUser] = useState<IAMUser | null>(null);\r\n\r\n  const fetchIAMUsers = async () => {\r\n    try {\r\n      setRefreshing(true);\r\n      const params = new URLSearchParams();\r\n      params.append('credentialId', '1'); // Use the first credential for now\r\n\r\n      const response = await fetch(`/api/aws/iam?${params.toString()}`);\r\n      if (!response.ok) {\r\n        throw new Error(`Failed to fetch IAM users: ${response.status} ${response.statusText}`);\r\n      }\r\n      \r\n      const data = await response.json();\r\n      setUsers(data.users || []);\r\n      setError(null);\r\n    } catch (err) {\r\n      console.error('Error fetching IAM users:', err);\r\n      setError('Failed to load IAM users. Please check your credentials and try again.');\r\n      toast.error('Failed to load IAM users');\r\n    } finally {\r\n      setLoading(false);\r\n      setRefreshing(false);\r\n    }\r\n  };\r\n\r\n  const fetchAvailablePolicies = async () => {\r\n    try {\r\n      const params = new URLSearchParams();\r\n      params.append('credentialId', '1'); // Use the first credential for now\r\n\r\n      const response = await fetch(`/api/aws/iam/policies?${params.toString()}`);\r\n      if (!response.ok) {\r\n        throw new Error(`Failed to fetch IAM policies: ${response.status} ${response.statusText}`);\r\n      }\r\n      \r\n      const data = await response.json();\r\n      setAvailablePolicies(data.policies || []);\r\n    } catch (err) {\r\n      console.error('Error fetching IAM policies:', err);\r\n      toast.error('Failed to load IAM policies');\r\n    }\r\n  };\r\n\r\n  const fetchUserPolicies = async (username: string) => {\r\n    try {\r\n      const params = new URLSearchParams();\r\n      params.append('credentialId', '1'); // Use the first credential for now\r\n      params.append('username', username);\r\n\r\n      const response = await fetch(`/api/aws/iam/user-policies?${params.toString()}`);\r\n      if (!response.ok) {\r\n        throw new Error(`Failed to fetch user policies: ${response.status} ${response.statusText}`);\r\n      }\r\n      \r\n      const data = await response.json();\r\n      setUserPolicies(data.policies || []);\r\n    } catch (err) {\r\n      console.error('Error fetching user policies:', err);\r\n      toast.error('Failed to load user policies');\r\n    }\r\n  };\r\n\r\n  const handleAddUser = async (userData: {\r\n    username: string;\r\n    withConsoleAccess: boolean;\r\n    password?: string;\r\n    policies: string[];\r\n  }) => {\r\n    try {\r\n      setActionLoading(true);\r\n      \r\n      const response = await fetch('/api/aws/iam', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          credentialId: '1', // Use the first credential for now\r\n          username: userData.username,\r\n          withConsoleAccess: userData.withConsoleAccess,\r\n          password: userData.password,\r\n          policies: userData.policies,\r\n        }),\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.error || 'Failed to create user');\r\n      }\r\n      \r\n      toast.success(`User ${userData.username} created successfully`);\r\n      setAddUserModalOpen(false);\r\n      fetchIAMUsers(); // Refresh the user list\r\n    } catch (err: any) {\r\n      console.error('Error creating user:', err);\r\n      toast.error(err.message || 'Failed to create user');\r\n    } finally {\r\n      setActionLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleUpdateUser = async (data: {\r\n    username: string;\r\n    addPolicies: string[];\r\n    removePolicies: string[];\r\n    updatePassword: boolean;\r\n    newPassword?: string;\r\n  }) => {\r\n    try {\r\n      setActionLoading(true);\r\n      \r\n      const response = await fetch('/api/aws/iam', {\r\n        method: 'PATCH',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          credentialId: '1', // Use the first credential for now\r\n          username: data.username,\r\n          addPolicies: data.addPolicies,\r\n          removePolicies: data.removePolicies,\r\n          updatePassword: data.updatePassword,\r\n          newPassword: data.newPassword,\r\n        }),\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.error || 'Failed to update user');\r\n      }\r\n      \r\n      toast.success(`User ${data.username} updated successfully`);\r\n      setEditUserModalOpen(false);\r\n      fetchIAMUsers(); // Refresh the user list\r\n    } catch (err: any) {\r\n      console.error('Error updating user:', err);\r\n      toast.error(err.message || 'Failed to update user');\r\n    } finally {\r\n      setActionLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleDeleteUser = async (username: string) => {\r\n    try {\r\n      setActionLoading(true);\r\n      \r\n      const response = await fetch('/api/aws/iam', {\r\n        method: 'DELETE',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          credentialId: '1', // Use the first credential for now\r\n          username,\r\n        }),\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.error || 'Failed to delete user');\r\n      }\r\n      \r\n      toast.success(`User ${username} deleted successfully`);\r\n      setDeleteUserModalOpen(false);\r\n      fetchIAMUsers(); // Refresh the user list\r\n    } catch (err: any) {\r\n      console.error('Error deleting user:', err);\r\n      toast.error(err.message || 'Failed to delete user');\r\n    } finally {\r\n      setActionLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleOpenEditModal = (user: IAMUser) => {\r\n    setSelectedUser(user);\r\n    fetchUserPolicies(user.userName);\r\n    setEditUserModalOpen(true);\r\n  };\r\n\r\n  const handleOpenDeleteModal = (user: IAMUser) => {\r\n    setSelectedUser(user);\r\n    setDeleteUserModalOpen(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchIAMUsers();\r\n    fetchAvailablePolicies();\r\n  }, []);\r\n\r\n  const getRiskBadgeColor = (riskLevel: string) => {\r\n    switch (riskLevel) {\r\n      case 'high':\r\n        return 'bg-red-100 text-red-800';\r\n      case 'medium':\r\n        return 'bg-yellow-100 text-yellow-800';\r\n      case 'low':\r\n        return 'bg-blue-100 text-blue-800';\r\n      default:\r\n        return 'bg-gray-100 text-gray-800';\r\n    }\r\n  };\r\n\r\n  const formatDate = (dateString: string) => {\r\n    if (!dateString) return 'Never';\r\n    const date = new Date(dateString);\r\n    return date.toLocaleDateString('pt-BR', {\r\n      day: '2-digit',\r\n      month: '2-digit',\r\n      year: 'numeric',\r\n    });\r\n  };\r\n\r\n  return (\r\n    <motion.div\r\n      initial={{ opacity: 0, y: 20 }}\r\n      animate={{ opacity: 1, y: 0 }}\r\n      transition={{ duration: 0.5 }}\r\n      className=\"p-6 space-y-6\"\r\n    >\r\n      <div className=\"flex justify-between items-center\">\r\n        <div>\r\n          <h1 className=\"text-2xl font-bold tracking-tight\">IAM Users</h1>\r\n          <p className=\"text-muted-foreground\">\r\n            Manage AWS Identity and Access Management (IAM) users and permissions\r\n          </p>\r\n        </div>\r\n        <div className=\"flex space-x-2\">\r\n          <Button\r\n            variant=\"outline\"\r\n            size=\"sm\"\r\n            onClick={() => fetchIAMUsers()}\r\n            disabled={refreshing}\r\n          >\r\n            {refreshing ? (\r\n              <RefreshCw className=\"h-4 w-4 mr-2 animate-spin\" />\r\n            ) : (\r\n              <RefreshCw className=\"h-4 w-4 mr-2\" />\r\n            )}\r\n            Refresh\r\n          </Button>\r\n          <Button\r\n            size=\"sm\"\r\n            onClick={() => setAddUserModalOpen(true)}\r\n          >\r\n            <Plus className=\"h-4 w-4 mr-2\" />\r\n            Add User\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      {error && (\r\n        <div className=\"bg-red-50 border border-red-200 text-red-800 rounded-md p-4 mb-4\">\r\n          {error}\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow\">\r\n        {loading ? (\r\n          <div className=\"flex justify-center items-center h-64\">\r\n            <RefreshCw className=\"h-8 w-8 animate-spin text-primary\" />\r\n          </div>\r\n        ) : users.length === 0 ? (\r\n          <div className=\"flex flex-col justify-center items-center h-64 text-center p-4\">\r\n            <UserX className=\"h-16 w-16 text-muted-foreground mb-4\" />\r\n            <h3 className=\"text-lg font-medium\">No IAM users found</h3>\r\n            <p className=\"text-muted-foreground mt-1 max-w-md\">\r\n              There are no IAM users in your account, or we couldn't access them.\r\n              Verify your permissions or create a new user to get started.\r\n            </p>\r\n            <Button \r\n              className=\"mt-4\"\r\n              onClick={() => setAddUserModalOpen(true)}\r\n            >\r\n              <Plus className=\"h-4 w-4 mr-2\" />\r\n              Add User\r\n            </Button>\r\n          </div>\r\n        ) : (\r\n          <div className=\"overflow-x-auto\">\r\n            <table className=\"w-full divide-y divide-gray-200 dark:divide-gray-700\">\r\n              <thead className=\"bg-gray-50 dark:bg-gray-700\">\r\n                <tr>\r\n                  <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\r\n                    User\r\n                  </th>\r\n                  <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\r\n                    Last Access\r\n                  </th>\r\n                  <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\r\n                    MFA\r\n                  </th>\r\n                  <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\r\n                    Access Keys\r\n                  </th>\r\n                  <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\r\n                    Policies\r\n                  </th>\r\n                  <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\r\n                    Risk Level\r\n                  </th>\r\n                  <th scope=\"col\" className=\"px-6 py-3 text-right text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\r\n                    Actions\r\n                  </th>\r\n                </tr>\r\n              </thead>\r\n              <tbody className=\"bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700\">\r\n                {users.map((user) => (\r\n                  <tr key={user.userName} className=\"hover:bg-gray-50 dark:hover:bg-gray-700\">\r\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\r\n                      <div className=\"flex items-center\">\r\n                        <Avatar className=\"h-8 w-8 rounded-full bg-primary/10\">\r\n                          <AvatarFallback>\r\n                            {user.userName.substring(0, 2).toUpperCase()}\r\n                          </AvatarFallback>\r\n                        </Avatar>\r\n                        <div className=\"ml-4\">\r\n                          <div className=\"text-sm font-medium text-gray-900 dark:text-white\">\r\n                            {user.userName}\r\n                          </div>\r\n                          <div className=\"text-sm text-gray-500 dark:text-gray-400\">\r\n                            Created: {formatDate(user.createDate)}\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </td>\r\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400\">\r\n                      {formatDate(user.lastAccessed)}\r\n                    </td>\r\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\r\n                      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${\r\n                        user.hasMfa\r\n                          ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200'\r\n                          : 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200'\r\n                      }`}>\r\n                        {user.hasMfa ? 'Enabled' : 'Disabled'}\r\n                      </span>\r\n                    </td>\r\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400\">\r\n                      {user.accessKeysCount}\r\n                    </td>\r\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400\">\r\n                      {user.policiesCount}\r\n                    </td>\r\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\r\n                      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getRiskBadgeColor(user.riskLevel)}`}>\r\n                        {user.riskLevel.charAt(0).toUpperCase() + user.riskLevel.slice(1)}\r\n                      </span>\r\n                    </td>\r\n                    <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\">\r\n                      <DropdownMenu>\r\n                        <DropdownMenuTrigger asChild>\r\n                          <Button variant=\"ghost\" size=\"sm\">\r\n                            <MoreHorizontal className=\"h-4 w-4\" />\r\n                          </Button>\r\n                        </DropdownMenuTrigger>\r\n                        <DropdownMenuContent align=\"end\">\r\n                          <DropdownMenuItem onClick={() => handleOpenEditModal(user)}>\r\n                            <UserCheck className=\"h-4 w-4 mr-2\" />\r\n                            Edit User\r\n                          </DropdownMenuItem>\r\n                          <DropdownMenuItem \r\n                            className=\"text-red-600 focus:text-red-600\"\r\n                            onClick={() => handleOpenDeleteModal(user)}\r\n                          >\r\n                            <UserX className=\"h-4 w-4 mr-2\" />\r\n                            Delete User\r\n                          </DropdownMenuItem>\r\n                        </DropdownMenuContent>\r\n                      </DropdownMenu>\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"bg-blue-50 border border-blue-200 text-blue-800 rounded-md p-4\">\r\n        <h4 className=\"flex items-center text-sm font-semibold\">\r\n          <Shield className=\"h-4 w-4 mr-2\" />\r\n          Security Best Practices\r\n        </h4>\r\n        <ul className=\"mt-2 ml-6 text-sm list-disc space-y-1\">\r\n          <li>Enable MFA for all IAM users with console access</li>\r\n          <li>Follow the principle of least privilege when assigning permissions</li>\r\n          <li>Regularly rotate access keys</li>\r\n          <li>Remove unused users and access keys</li>\r\n        </ul>\r\n      </div>\r\n      \r\n      {/* User Management Modals */}\r\n      <AddUserModal\r\n        isOpen={addUserModalOpen}\r\n        onClose={() => setAddUserModalOpen(false)}\r\n        onAddUser={handleAddUser}\r\n        availablePolicies={availablePolicies}\r\n        isLoading={actionLoading}\r\n      />\r\n      \r\n      <EditUserModal\r\n        isOpen={editUserModalOpen}\r\n        onClose={() => setEditUserModalOpen(false)}\r\n        user={selectedUser ? {\r\n          name: selectedUser.userName,\r\n          hasMfa: selectedUser.hasMfa,\r\n          accessKeysCount: selectedUser.accessKeysCount,\r\n          policiesCount: selectedUser.policiesCount\r\n        } : null}\r\n        userPolicies={userPolicies}\r\n        availablePolicies={availablePolicies}\r\n        onUpdateUser={handleUpdateUser}\r\n        isLoading={actionLoading}\r\n      />\r\n      \r\n      <DeleteUserModal\r\n        isOpen={deleteUserModalOpen}\r\n        onClose={() => setDeleteUserModalOpen(false)}\r\n        user={selectedUser ? { name: selectedUser.userName } : null}\r\n        onDeleteUser={handleDeleteUser}\r\n        isLoading={actionLoading}\r\n      />\r\n    </motion.div>\r\n  );\r\n} "],"names":[],"mappings":"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","debugId":null}}]
}