{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://E%3A/Teste%20AWS/aws-monitoring-platform/src/hooks/useAwsCredentials.ts"],"sourcesContent":["\"use client\";\n\nimport { useState, useEffect } from 'react';\n\nexport interface AwsCredential {\n  id: string;\n  name: string;\n  accountId?: string;\n  accessKeyId: string;\n  secretAccessKey: string;\n  region: string;\n}\n\nexport interface UseAwsCredentialsResult {\n  credentials: AwsCredential[];\n  selectedCredential: AwsCredential | null;\n  selectCredential: (id: string) => void;\n  addCredential: (credential: Omit<AwsCredential, 'id'>) => Promise<void>;\n  updateCredential: (id: string, data: Partial<Omit<AwsCredential, 'id'>>) => Promise<void>;\n  deleteCredential: (id: string) => Promise<void>;\n  loading: boolean;\n  isLoading: boolean; // Alias for loading - needed for compatibility\n  error: string | null;\n  refresh: () => Promise<void>;\n}\n\nexport function useAwsCredentials(): UseAwsCredentialsResult {\n  const [credentials, setCredentials] = useState<AwsCredential[]>([]);\n  const [selectedCredentialId, setSelectedCredentialId] = useState<string | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // Function to fetch credentials from the API\n  const fetchCredentials = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await fetch('/api/aws/credentials');\n      \n      if (!response.ok) {\n        throw new Error(`Failed to fetch credentials: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      setCredentials(data);\n      \n      // If we have credentials but none selected, select the first one\n      if (data.length > 0 && !selectedCredentialId) {\n        setSelectedCredentialId(data[0].id);\n        // Save to localStorage\n        localStorage.setItem('selectedAwsCredentialId', data[0].id);\n      }\n      \n      return data;\n    } catch (err) {\n      setError(`Error fetching credentials: ${err instanceof Error ? err.message : String(err)}`);\n      return [];\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Function to select a credential\n  const selectCredential = (id: string) => {\n    setSelectedCredentialId(id);\n    localStorage.setItem('selectedAwsCredentialId', id);\n  };\n\n  // Function to add a new credential\n  const addCredential = async (credential: Omit<AwsCredential, 'id'>) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const response = await fetch('/api/aws/credentials', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(credential),\n      });\n      \n      if (!response.ok) {\n        throw new Error(`Failed to add credential: ${response.status}`);\n      }\n      \n      await fetchCredentials();\n    } catch (err) {\n      setError(`Error adding credential: ${err instanceof Error ? err.message : String(err)}`);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Function to update an existing credential\n  const updateCredential = async (id: string, data: Partial<Omit<AwsCredential, 'id'>>) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const response = await fetch(`/api/aws/credentials/${id}`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n      });\n      \n      if (!response.ok) {\n        throw new Error(`Failed to update credential: ${response.status}`);\n      }\n      \n      await fetchCredentials();\n    } catch (err) {\n      setError(`Error updating credential: ${err instanceof Error ? err.message : String(err)}`);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Function to delete a credential\n  const deleteCredential = async (id: string) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const response = await fetch(`/api/aws/credentials/${id}`, {\n        method: 'DELETE',\n      });\n      \n      if (!response.ok) {\n        throw new Error(`Failed to delete credential: ${response.status}`);\n      }\n      \n      // If we delete the selected credential, select another one\n      if (id === selectedCredentialId) {\n        const remainingCredentials = credentials.filter(c => c.id !== id);\n        if (remainingCredentials.length > 0) {\n          selectCredential(remainingCredentials[0].id);\n        } else {\n          setSelectedCredentialId(null);\n          localStorage.removeItem('selectedAwsCredentialId');\n        }\n      }\n      \n      await fetchCredentials();\n    } catch (err) {\n      setError(`Error deleting credential: ${err instanceof Error ? err.message : String(err)}`);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Load credentials on mount\n  useEffect(() => {\n    // Try to restore selected credential from localStorage\n    const savedCredentialId = localStorage.getItem('selectedAwsCredentialId');\n    if (savedCredentialId) {\n      setSelectedCredentialId(savedCredentialId);\n    }\n    \n    fetchCredentials();\n  }, []);\n\n  // Find the selected credential object\n  const selectedCredential = credentials.find(c => c.id === selectedCredentialId) || null;\n\n  return {\n    credentials,\n    selectedCredential,\n    selectCredential,\n    addCredential,\n    updateCredential,\n    deleteCredential,\n    loading,\n    isLoading: loading, // Alias for loading\n    error,\n    refresh: fetchCredentials,\n  };\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 153, "column": 0}, "map": {"version":3,"sources":["file://E%3A/Teste%20AWS/aws-monitoring-platform/src/components/ui/button.tsx"],"sourcesContent":["import React, { ButtonHTMLAttributes } from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90 dark-cyber:bg-dark-cyber-primary dark-cyber:text-dark-cyber-bg dark-cyber:hover:bg-dark-cyber-accent\",\n        destructive: \"bg-destructive text-destructive-foreground hover:bg-destructive/90 dark-cyber:bg-dark-cyber-destructive dark-cyber:hover:bg-dark-cyber-destructive/90\",\n        outline: \"border border-input hover:bg-accent hover:text-accent-foreground dark-cyber:border-dark-cyber-border dark-cyber:hover:bg-dark-cyber-muted\",\n        secondary: \"bg-secondary text-secondary-foreground hover:bg-secondary/80 dark-cyber:bg-dark-cyber-secondary dark-cyber:text-dark-cyber-text dark-cyber:hover:bg-dark-cyber-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground dark-cyber:hover:bg-dark-cyber-muted/50 dark-cyber:hover:text-dark-cyber-text\",\n        link: \"underline-offset-4 hover:underline text-primary dark-cyber:text-dark-cyber-primary\",\n        cyber: \"relative overflow-hidden border border-dark-cyber-accent bg-dark-cyber-card text-dark-cyber-accent hover:text-dark-cyber-bg hover:bg-dark-cyber-accent transition-colors duration-300 shadow-cyber-glow\",\n      },\n      size: {\n        default: \"h-10 py-2 px-4\",\n        sm: \"h-9 px-3 rounded-md\",\n        lg: \"h-11 px-8 rounded-md\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n);\n\nexport interface ButtonProps\n  extends ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  isLoading?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, isLoading = false, children, ...props }, ref) => {\n    return (\n      <button\n        className={buttonVariants({ variant, size, className })}\n        ref={ref}\n        disabled={isLoading || props.disabled}\n        {...props}\n      >\n        {isLoading && (\n          <svg\n            className=\"animate-spin -ml-1 mr-2 h-4 w-4 text-current\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            fill=\"none\"\n            viewBox=\"0 0 24 24\"\n          >\n            <circle\n              className=\"opacity-25\"\n              cx=\"12\"\n              cy=\"12\"\n              r=\"10\"\n              stroke=\"currentColor\"\n              strokeWidth=\"4\"\n            ></circle>\n            <path\n              className=\"opacity-75\"\n              fill=\"currentColor\"\n              d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n            ></path>\n          </svg>\n        )}\n        {children}\n      </button>\n    );\n  }\n);\n\nButton.displayName = \"Button\";\n\nexport { Button, buttonVariants };"],"names":[],"mappings":";;;;;AAAA;;;;;;;;;AAGA,MAAM,iBAAiB,IACrB,iPACA;IACE,UAAU;QACR,SAAS;YACP,SAAS;YACT,aAAa;YACb,SAAS;YACT,WAAW;YACX,OAAO;YACP,MAAM;YACN,OAAO;QACT;QACA,MAAM;YACJ,SAAS;YACT,IAAI;YACJ,IAAI;YACJ,MAAM;QACR;IACF;IACA,iBAAiB;QACf,SAAS;QACT,MAAM;IACR;AACF;AASF,MAAM,uBAAS,qMAAA,CAAA,UAAK,CAAC,UAAU,CAC7B,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,YAAY,KAAK,EAAE,QAAQ,EAAE,GAAG,OAAO,EAAE;IACpE,qBACE,8OAAC;QACC,WAAW,eAAe;YAAE;YAAS;YAAM;QAAU;QACrD,KAAK;QACL,UAAU,aAAa,MAAM,QAAQ;QACpC,GAAG,KAAK;;YAER,2BACC,8OAAC;gBACC,WAAU;gBACV,OAAM;gBACN,MAAK;gBACL,SAAQ;;kCAER,8OAAC;wBACC,WAAU;wBACV,IAAG;wBACH,IAAG;wBACH,GAAE;wBACF,QAAO;wBACP,aAAY;;;;;;kCAEd,8OAAC;wBACC,WAAU;wBACV,MAAK;wBACL,GAAE;;;;;;;;;;;;YAIP;;;;;;;AAGP;AAGF,OAAO,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 250, "column": 0}, "map": {"version":3,"sources":["file://E%3A/Teste%20AWS/aws-monitoring-platform/src/app/dashboard/iam/page.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { useEffect, useState } from \"react\";\r\nimport { useAwsCredentials } from \"@/hooks/useAwsCredentials\";\r\nimport { AlertCircle, Check, CircleAlert, Shield, User, Users } from \"lucide-react\";\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\r\nimport { CredentialSelector } from \"@/components/credential-selector\";\r\nimport { Skeleton } from \"@/components/ui/skeleton\";\r\nimport { formatDistanceToNow } from \"date-fns\";\r\nimport { ptBR } from \"date-fns/locale\";\r\nimport { toast } from \"sonner\";\r\n\r\n// Define interfaces for IAM users\r\ninterface IAMUser {\r\n  id: string;\r\n  userName: string;\r\n  arn: string;\r\n  createDate: string;\r\n  passwordLastUsed?: string;\r\n  lastActivity?: string;\r\n  hasConsoleAccess: boolean;\r\n  hasAccessKeys: boolean;\r\n  hasMFA: boolean;\r\n}\r\n\r\n// Define interfaces for security issues\r\ninterface SecurityIssue {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  severity: \"low\" | \"medium\" | \"high\";\r\n  remediation: string;\r\n}\r\n\r\ninterface RootAccessIssue extends SecurityIssue {}\r\n\r\ninterface UserIssue extends SecurityIssue {\r\n  user: string;\r\n}\r\n\r\ninterface PolicyIssue extends SecurityIssue {\r\n  policyName: string;\r\n  policyArn: string;\r\n}\r\n\r\ninterface AccessKeyIssue extends SecurityIssue {\r\n  user: string;\r\n  accessKeyId: string;\r\n}\r\n\r\ninterface PasswordPolicyIssue extends SecurityIssue {}\r\n\r\ninterface IAMSecurityData {\r\n  summary: {\r\n    total: number;\r\n    highSeverity: number;\r\n    mediumSeverity: number;\r\n    lowSeverity: number;\r\n  };\r\n  issues: {\r\n    rootAccess: RootAccessIssue[];\r\n    users: UserIssue[];\r\n    policies: PolicyIssue[];\r\n    roles: SecurityIssue[];\r\n    accessKeys: AccessKeyIssue[];\r\n    passwordPolicy: PasswordPolicyIssue[];\r\n  };\r\n}\r\n\r\n// Main IAM page component\r\nexport default function IAMPage() {\r\n  const { credentials, selectedCredential, setSelectedCredential } = useAwsCredentials();\r\n  const [users, setUsers] = useState<IAMUser[]>([]);\r\n  const [securityData, setSecurityData] = useState<IAMSecurityData | null>(null);\r\n  const [activeTab, setActiveTab] = useState(\"users\");\r\n  const [loading, setLoading] = useState(false);\r\n  const [securityLoading, setSecurityLoading] = useState(false);\r\n  const [error, setError] = useState(\"\");\r\n  const [securityError, setSecurityError] = useState(\"\");\r\n\r\n  // Function to fetch IAM users\r\n  const fetchIAMUsers = async (credentialId: string) => {\r\n    setLoading(true);\r\n    setError(\"\");\r\n    \r\n    try {\r\n      const response = await fetch(`/api/aws/iam/users?credentialId=${credentialId}`);\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.message || \"Failed to fetch IAM users\");\r\n      }\r\n      \r\n      const data = await response.json();\r\n      setUsers(data.users);\r\n    } catch (err) {\r\n      console.error(\"Error fetching IAM users:\", err);\r\n      setError(err instanceof Error ? err.message : \"An unknown error occurred\");\r\n      toast.error(\"Failed to fetch IAM users\", {\r\n        description: err instanceof Error ? err.message : \"An unknown error occurred\"\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Function to fetch security data\r\n  const fetchSecurityData = async (credentialId: string) => {\r\n    setSecurityLoading(true);\r\n    setSecurityError(\"\");\r\n    \r\n    try {\r\n      const response = await fetch(`/api/aws/iam/security?credentialId=${credentialId}`);\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.message || \"Failed to fetch security data\");\r\n      }\r\n      \r\n      const data = await response.json();\r\n      setSecurityData(data);\r\n    } catch (err) {\r\n      console.error(\"Error fetching security data:\", err);\r\n      setSecurityError(err instanceof Error ? err.message : \"An unknown error occurred\");\r\n      toast.error(\"Failed to fetch security data\", {\r\n        description: err instanceof Error ? err.message : \"An unknown error occurred\"\r\n      });\r\n    } finally {\r\n      setSecurityLoading(false);\r\n    }\r\n  };\r\n\r\n  // Fetch data when selected credential changes\r\n  useEffect(() => {\r\n    if (selectedCredential) {\r\n      fetchIAMUsers(selectedCredential);\r\n      \r\n      if (activeTab === \"security\") {\r\n        fetchSecurityData(selectedCredential);\r\n      }\r\n    } else {\r\n      setUsers([]);\r\n      setSecurityData(null);\r\n    }\r\n  }, [selectedCredential, activeTab]);\r\n\r\n  // Handle tab change\r\n  const handleTabChange = (value: string) => {\r\n    setActiveTab(value);\r\n    \r\n    if (value === \"security\" && selectedCredential && !securityData) {\r\n      fetchSecurityData(selectedCredential);\r\n    }\r\n  };\r\n\r\n  // Handle refresh\r\n  const handleRefresh = () => {\r\n    if (!selectedCredential) return;\r\n    \r\n    if (activeTab === \"users\") {\r\n      fetchIAMUsers(selectedCredential);\r\n    } else if (activeTab === \"security\") {\r\n      fetchSecurityData(selectedCredential);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container mx-auto py-6 space-y-6\">\r\n      {/* Header */}\r\n      <div className=\"flex flex-col space-y-2 md:flex-row md:justify-between md:items-center\">\r\n        <div>\r\n          <h1 className=\"text-3xl font-bold tracking-tight\">IAM Security</h1>\r\n          <p className=\"text-muted-foreground\">\r\n            Monitor users, access keys, and security issues for IAM\r\n          </p>\r\n        </div>\r\n        \r\n        <div className=\"flex items-center space-x-4\">\r\n          <CredentialSelector\r\n            credentials={credentials}\r\n            selectedCredential={selectedCredential}\r\n            onSelect={setSelectedCredential}\r\n          />\r\n          <Button variant=\"outline\" size=\"icon\" onClick={handleRefresh}>\r\n            <svg\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n              width=\"24\"\r\n              height=\"24\"\r\n              viewBox=\"0 0 24 24\"\r\n              fill=\"none\"\r\n              stroke=\"currentColor\"\r\n              strokeWidth=\"2\"\r\n              strokeLinecap=\"round\"\r\n              strokeLinejoin=\"round\"\r\n              className=\"h-4 w-4\"\r\n            >\r\n              <path d=\"M21 12a9 9 0 0 0-9-9 9.75 9.75 0 0 0-6.74 2.74L3 8\" />\r\n              <path d=\"M3 3v5h5\" />\r\n              <path d=\"M3 12a9 9 0 0 0 9 9 9.75 9.75 0 0 0 6.74-2.74L21 16\" />\r\n              <path d=\"M16 16h5v5\" />\r\n            </svg>\r\n            <span className=\"sr-only\">Refresh</span>\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Main Content */}\r\n      <div className=\"space-y-4\">\r\n        {!selectedCredential ? (\r\n          <Alert>\r\n            <AlertCircle className=\"h-4 w-4\" />\r\n            <AlertTitle>No credential selected</AlertTitle>\r\n            <AlertDescription>\r\n              Please select an AWS credential to view IAM information\r\n            </AlertDescription>\r\n          </Alert>\r\n        ) : (\r\n          <Tabs\r\n            value={activeTab}\r\n            onValueChange={handleTabChange}\r\n            className=\"space-y-4\"\r\n          >\r\n            <TabsList>\r\n              <TabsTrigger value=\"users\" className=\"flex items-center gap-2\">\r\n                <Users className=\"h-4 w-4\" />\r\n                <span>Users</span>\r\n              </TabsTrigger>\r\n              <TabsTrigger value=\"security\" className=\"flex items-center gap-2\">\r\n                <Shield className=\"h-4 w-4\" />\r\n                <span>Security</span>\r\n              </TabsTrigger>\r\n            </TabsList>\r\n\r\n            <TabsContent value=\"users\" className=\"space-y-4\">\r\n              <UsersTab\r\n                users={users}\r\n                loading={loading}\r\n                error={error}\r\n                selectedCredential={selectedCredential}\r\n              />\r\n            </TabsContent>\r\n\r\n            <TabsContent value=\"security\" className=\"space-y-4\">\r\n              <SecurityTab\r\n                securityData={securityData}\r\n                loading={securityLoading}\r\n                error={securityError}\r\n                selectedCredential={selectedCredential}\r\n              />\r\n            </TabsContent>\r\n          </Tabs>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// Users Tab Component\r\nfunction UsersTab({ \r\n  users, \r\n  loading, \r\n  error, \r\n  selectedCredential \r\n}: { \r\n  users: IAMUser[]; \r\n  loading: boolean; \r\n  error: string; \r\n  selectedCredential: string; \r\n}) {\r\n  if (loading) {\r\n    return (\r\n      <div className=\"space-y-4\">\r\n        {Array.from({ length: 5 }).map((_, index) => (\r\n          <Card key={index}>\r\n            <CardHeader>\r\n              <Skeleton className=\"h-5 w-1/3\" />\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"space-y-2\">\r\n                <Skeleton className=\"h-4 w-full\" />\r\n                <Skeleton className=\"h-4 w-4/5\" />\r\n                <Skeleton className=\"h-4 w-2/3\" />\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <Alert variant=\"destructive\">\r\n        <AlertCircle className=\"h-4 w-4\" />\r\n        <AlertTitle>Error</AlertTitle>\r\n        <AlertDescription>{error}</AlertDescription>\r\n      </Alert>\r\n    );\r\n  }\r\n\r\n  if (!users.length) {\r\n    return (\r\n      <Alert>\r\n        <AlertCircle className=\"h-4 w-4\" />\r\n        <AlertTitle>No users found</AlertTitle>\r\n        <AlertDescription>\r\n          No IAM users were found for the selected AWS credential.\r\n        </AlertDescription>\r\n      </Alert>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\r\n        <Card>\r\n          <CardHeader className=\"pb-2\">\r\n            <CardTitle className=\"text-lg\">Total Users</CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-3xl font-bold\">{users.length}</div>\r\n          </CardContent>\r\n        </Card>\r\n        <Card>\r\n          <CardHeader className=\"pb-2\">\r\n            <CardTitle className=\"text-lg\">Without MFA</CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-3xl font-bold text-orange-500\">\r\n              {users.filter(user => user.hasConsoleAccess && !user.hasMFA).length}\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n        <Card>\r\n          <CardHeader className=\"pb-2\">\r\n            <CardTitle className=\"text-lg\">With Access Keys</CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-3xl font-bold\">\r\n              {users.filter(user => user.hasAccessKeys).length}\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n\r\n      <div className=\"rounded-md border\">\r\n        <div className=\"overflow-x-auto\">\r\n          <table className=\"w-full text-sm\">\r\n            <thead>\r\n              <tr className=\"bg-muted/50\">\r\n                <th className=\"whitespace-nowrap px-4 py-3 text-left font-medium\">Username</th>\r\n                <th className=\"whitespace-nowrap px-4 py-3 text-left font-medium\">Created</th>\r\n                <th className=\"whitespace-nowrap px-4 py-3 text-left font-medium\">Last Activity</th>\r\n                <th className=\"whitespace-nowrap px-4 py-3 text-left font-medium\">Console Access</th>\r\n                <th className=\"whitespace-nowrap px-4 py-3 text-left font-medium\">MFA</th>\r\n                <th className=\"whitespace-nowrap px-4 py-3 text-left font-medium\">Access Keys</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {users.map((user) => (\r\n                <tr key={user.id} className=\"border-t\">\r\n                  <td className=\"whitespace-nowrap px-4 py-3 font-medium\">{user.userName}</td>\r\n                  <td className=\"whitespace-nowrap px-4 py-3\">\r\n                    {user.createDate \r\n                      ? formatDistanceToNow(new Date(user.createDate), { \r\n                          addSuffix: true, \r\n                          locale: ptBR \r\n                        }) \r\n                      : 'N/A'}\r\n                  </td>\r\n                  <td className=\"whitespace-nowrap px-4 py-3\">\r\n                    {user.passwordLastUsed \r\n                      ? formatDistanceToNow(new Date(user.passwordLastUsed), { \r\n                          addSuffix: true, \r\n                          locale: ptBR \r\n                        }) \r\n                      : 'N/A'}\r\n                  </td>\r\n                  <td className=\"whitespace-nowrap px-4 py-3\">\r\n                    {user.hasConsoleAccess ? (\r\n                      <Check className=\"h-5 w-5 text-green-500\" />\r\n                    ) : (\r\n                      <span className=\"text-muted-foreground\">—</span>\r\n                    )}\r\n                  </td>\r\n                  <td className=\"whitespace-nowrap px-4 py-3\">\r\n                    {user.hasConsoleAccess ? (\r\n                      user.hasMFA ? (\r\n                        <Check className=\"h-5 w-5 text-green-500\" />\r\n                      ) : (\r\n                        <AlertCircle className=\"h-5 w-5 text-orange-500\" />\r\n                      )\r\n                    ) : (\r\n                      <span className=\"text-muted-foreground\">—</span>\r\n                    )}\r\n                  </td>\r\n                  <td className=\"whitespace-nowrap px-4 py-3\">\r\n                    {user.hasAccessKeys ? (\r\n                      <Check className=\"h-5 w-5 text-green-500\" />\r\n                    ) : (\r\n                      <span className=\"text-muted-foreground\">—</span>\r\n                    )}\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// Security Tab Component\r\nfunction SecurityTab({ \r\n  securityData, \r\n  loading, \r\n  error, \r\n  selectedCredential \r\n}: { \r\n  securityData: IAMSecurityData | null; \r\n  loading: boolean; \r\n  error: string; \r\n  selectedCredential: string; \r\n}) {\r\n  const [expandedSections, setExpandedSections] = useState<Record<string, boolean>>({\r\n    rootAccess: true,\r\n    users: true,\r\n    policies: true,\r\n    roles: true,\r\n    accessKeys: true,\r\n    passwordPolicy: true\r\n  });\r\n\r\n  const toggleSection = (section: string) => {\r\n    setExpandedSections(prev => ({\r\n      ...prev,\r\n      [section]: !prev[section]\r\n    }));\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"space-y-4\">\r\n        {Array.from({ length: 4 }).map((_, index) => (\r\n          <Card key={index}>\r\n            <CardHeader>\r\n              <Skeleton className=\"h-5 w-1/3\" />\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"space-y-2\">\r\n                <Skeleton className=\"h-4 w-full\" />\r\n                <Skeleton className=\"h-4 w-4/5\" />\r\n                <Skeleton className=\"h-4 w-2/3\" />\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <Alert variant=\"destructive\">\r\n        <AlertCircle className=\"h-4 w-4\" />\r\n        <AlertTitle>Error</AlertTitle>\r\n        <AlertDescription>{error}</AlertDescription>\r\n      </Alert>\r\n    );\r\n  }\r\n\r\n  if (!selectedCredential) {\r\n    return (\r\n      <Alert>\r\n        <AlertCircle className=\"h-4 w-4\" />\r\n        <AlertTitle>No credential selected</AlertTitle>\r\n        <AlertDescription>\r\n          Please select an AWS credential to view security information\r\n        </AlertDescription>\r\n      </Alert>\r\n    );\r\n  }\r\n\r\n  if (!securityData) {\r\n    return (\r\n      <Alert>\r\n        <AlertCircle className=\"h-4 w-4\" />\r\n        <AlertTitle>No data available</AlertTitle>\r\n        <AlertDescription>\r\n          No security data is available for the selected credential.\r\n        </AlertDescription>\r\n      </Alert>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Security Summary */}\r\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\r\n        <Card>\r\n          <CardHeader className=\"pb-2\">\r\n            <CardTitle className=\"text-lg flex justify-between items-start\">\r\n              <span>Total Issues</span>\r\n              <Badge variant=\"destructive\">{securityData.summary.total}</Badge>\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <CardDescription>\r\n              Total security issues found\r\n            </CardDescription>\r\n          </CardContent>\r\n        </Card>\r\n        \r\n        <Card>\r\n          <CardHeader className=\"pb-2\">\r\n            <CardTitle className=\"text-lg flex justify-between items-start\">\r\n              <span>High Severity</span>\r\n              <Badge variant=\"destructive\">{securityData.summary.highSeverity}</Badge>\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <CardDescription>\r\n              High severity security issues\r\n            </CardDescription>\r\n          </CardContent>\r\n        </Card>\r\n        \r\n        <Card>\r\n          <CardHeader className=\"pb-2\">\r\n            <CardTitle className=\"text-lg flex justify-between items-start\">\r\n              <span>Medium Severity</span>\r\n              <Badge variant=\"destructive\">{securityData.summary.mediumSeverity}</Badge>\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <CardDescription>\r\n              Medium severity security issues\r\n            </CardDescription>\r\n          </CardContent>\r\n        </Card>\r\n        \r\n        <Card>\r\n          <CardHeader className=\"pb-2\">\r\n            <CardTitle className=\"text-lg flex justify-between items-start\">\r\n              <span>Low Severity</span>\r\n              <Badge variant=\"destructive\">{securityData.summary.lowSeverity}</Badge>\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <CardDescription>\r\n              Low severity security issues\r\n            </CardDescription>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n      \r\n      {/* Security Issues Details */}\r\n      {Object.keys(securityData.issues).map((section) => {\r\n        const sectionData = securityData.issues[section as keyof typeof securityData.issues];\r\n        if (!sectionData || sectionData.length === 0) return null;\r\n        \r\n        return (\r\n          <Card key={section} className=\"border-l-4\" style={{\r\n            borderLeftColor: sectionData.some(i => i.severity === 'high') ? 'rgb(249, 115, 22)' : 'rgb(74, 222, 128)'\r\n          }}>\r\n            <CardHeader>\r\n              <CardTitle className=\"text-xl capitalize\">\r\n                {section === 'rootAccess' ? 'Root Access' : \r\n                section === 'users' ? 'IAM Users' : \r\n                section === 'accessKeys' ? 'Access Keys' : \r\n                section === 'passwordPolicy' ? 'Password Policy' : \r\n                section}\r\n              </CardTitle>\r\n              <CardDescription>\r\n                {sectionData.length} security {sectionData.length === 1 ? 'issue' : 'issues'} found\r\n              </CardDescription>\r\n            </CardHeader>\r\n            <CardContent className=\"space-y-4\">\r\n              {sectionData.map((issue) => (\r\n                <div key={issue.id} className=\"p-4 border rounded-lg bg-muted/10\">\r\n                  <div className=\"flex items-start justify-between mb-2\">\r\n                    <div className=\"font-medium flex items-center gap-2\">\r\n                      <Badge\r\n                        variant={\r\n                          issue.severity === 'high' ? 'destructive' : 'outline'\r\n                        }\r\n                        className={\r\n                          issue.severity === 'high' ? 'bg-orange-600 hover:bg-orange-600' : ''\r\n                        }\r\n                      >\r\n                        {issue.severity.toUpperCase()}\r\n                      </Badge>\r\n                      {issue.title}\r\n                    </div>\r\n                  </div>\r\n                  <p className=\"text-sm mb-2\">{issue.description}</p>\r\n                  <div className=\"text-sm text-muted-foreground\">\r\n                    <strong>Recommendation:</strong> {issue.remediation}\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </CardContent>\r\n          </Card>\r\n        );\r\n      })}\r\n      \r\n      {/* No Issues Found */}\r\n      {securityData.summary.total === 0 && (\r\n        <div className=\"flex flex-col items-center justify-center p-8 border rounded-lg bg-muted/10\">\r\n          <Shield className=\"h-12 w-12 text-green-500 mb-2\" />\r\n          <h2 className=\"text-xl font-semibold mb-1\">No Security Issues Found</h2>\r\n          <p className=\"text-muted-foreground text-center max-w-md\">\r\n            Great job! Your IAM configuration follows best practices and no security issues were detected.\r\n          </p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}}]
}