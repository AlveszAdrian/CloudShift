{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 140, "column": 0}, "map": {"version":3,"sources":["file://E%3A/Teste%20AWS/aws-monitoring-platform/src/app/api/aws/iam/users/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\r\nimport { getServerSession } from 'next-auth';\r\nimport { authOptions } from '@/lib/auth';\r\nimport { getIAMService } from '@/lib/aws-services';\r\n\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    // Verificar autenticação\r\n    const session = await getServerSession(authOptions);\r\n    if (!session) {\r\n      return NextResponse.json(\r\n        { error: 'Não autorizado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    // Obter parâmetros da requisição\r\n    const searchParams = request.nextUrl.searchParams;\r\n    const credentialId = searchParams.get('credentialId');\r\n\r\n    // Validar parâmetros\r\n    if (!credentialId) {\r\n      return NextResponse.json(\r\n        { error: 'ID da credencial é obrigatório' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Obter serviço IAM\r\n    const awsService = await getIAMService(credentialId);\r\n    if (!awsService) {\r\n      return NextResponse.json(\r\n        { error: 'Não foi possível criar cliente IAM' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Obter usuários IAM\r\n    const users = await awsService.getIamUsers();\r\n\r\n    return NextResponse.json({ users });\r\n  } catch (error: any) {\r\n    console.error('Erro ao buscar usuários IAM:', error);\r\n    return NextResponse.json(\r\n      { error: error.message || 'Falha ao buscar usuários IAM' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    // Verificar autenticação\r\n    const session = await getServerSession(authOptions);\r\n    if (!session) {\r\n      return NextResponse.json(\r\n        { error: 'Não autorizado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    // Obter parâmetros da requisição\r\n    const { credentialId, userName, createConsoleAccess, consolePassword, policyArns } = await request.json();\r\n\r\n    // Validar parâmetros\r\n    if (!credentialId) {\r\n      return NextResponse.json(\r\n        { error: 'ID da credencial é obrigatório' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    if (!userName) {\r\n      return NextResponse.json(\r\n        { error: 'Nome do usuário é obrigatório' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Obter serviço IAM\r\n    const awsService = await getIAMService(credentialId);\r\n    if (!awsService) {\r\n      return NextResponse.json(\r\n        { error: 'Não foi possível criar cliente IAM' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Criar usuário\r\n    const user = await awsService.createUser(userName);\r\n\r\n    // Configurar acesso ao console (opcional)\r\n    if (createConsoleAccess && consolePassword) {\r\n      await awsService.createLoginProfile(userName, consolePassword);\r\n    }\r\n\r\n    // Anexar políticas (opcional)\r\n    if (policyArns && Array.isArray(policyArns) && policyArns.length > 0) {\r\n      for (const policyArn of policyArns) {\r\n        await awsService.attachUserPolicy(userName, policyArn);\r\n      }\r\n    }\r\n\r\n    return NextResponse.json({ user });\r\n  } catch (error: any) {\r\n    console.error('Erro ao criar usuário IAM:', error);\r\n    return NextResponse.json(\r\n      { error: error.message || 'Falha ao criar usuário IAM' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\nexport async function PATCH(request: NextRequest) {\r\n  try {\r\n    // Verificar autenticação\r\n    const session = await getServerSession(authOptions);\r\n    if (!session) {\r\n      return NextResponse.json(\r\n        { error: 'Não autorizado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    // Obter parâmetros da requisição\r\n    const { credentialId, userName, action, policyArn } = await request.json();\r\n\r\n    // Validar parâmetros\r\n    if (!credentialId) {\r\n      return NextResponse.json(\r\n        { error: 'ID da credencial é obrigatório' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    if (!userName) {\r\n      return NextResponse.json(\r\n        { error: 'Nome do usuário é obrigatório' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    if (!action) {\r\n      return NextResponse.json(\r\n        { error: 'Ação é obrigatória' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Obter serviço IAM\r\n    const awsService = await getIAMService(credentialId);\r\n    if (!awsService) {\r\n      return NextResponse.json(\r\n        { error: 'Não foi possível criar cliente IAM' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Realizar ação conforme solicitado\r\n    if (action === 'attachPolicy') {\r\n      if (!policyArn) {\r\n        return NextResponse.json(\r\n          { error: 'ARN da política é obrigatório para anexar política' },\r\n          { status: 400 }\r\n        );\r\n      }\r\n      await awsService.attachUserPolicy(userName, policyArn);\r\n      return NextResponse.json({ message: 'Política anexada com sucesso' });\r\n    } else if (action === 'detachPolicy') {\r\n      if (!policyArn) {\r\n        return NextResponse.json(\r\n          { error: 'ARN da política é obrigatório para desanexar política' },\r\n          { status: 400 }\r\n        );\r\n      }\r\n      await awsService.detachUserPolicy(userName, policyArn);\r\n      return NextResponse.json({ message: 'Política desanexada com sucesso' });\r\n    } else {\r\n      return NextResponse.json(\r\n        { error: 'Ação não reconhecida' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n  } catch (error: any) {\r\n    console.error('Erro ao atualizar usuário IAM:', error);\r\n    return NextResponse.json(\r\n      { error: error.message || 'Falha ao atualizar usuário IAM' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\nexport async function DELETE(request: NextRequest) {\r\n  try {\r\n    // Verificar autenticação\r\n    const session = await getServerSession(authOptions);\r\n    if (!session) {\r\n      return NextResponse.json(\r\n        { error: 'Não autorizado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    // Obter parâmetros da requisição\r\n    const { credentialId, userName } = await request.json();\r\n\r\n    // Validar parâmetros\r\n    if (!credentialId) {\r\n      return NextResponse.json(\r\n        { error: 'ID da credencial é obrigatório' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    if (!userName) {\r\n      return NextResponse.json(\r\n        { error: 'Nome do usuário é obrigatório' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Obter serviço IAM\r\n    const awsService = await getIAMService(credentialId);\r\n    if (!awsService) {\r\n      return NextResponse.json(\r\n        { error: 'Não foi possível criar cliente IAM' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Remover políticas anexadas ao usuário\r\n    const attachedPolicies = await awsService.listAttachedUserPolicies(userName);\r\n    for (const policy of attachedPolicies) {\r\n      if (policy.PolicyArn) {\r\n        await awsService.detachUserPolicy(userName, policy.PolicyArn);\r\n      }\r\n    }\r\n\r\n    // Remover chaves de acesso\r\n    const accessKeys = await awsService.listAccessKeys(userName);\r\n    for (const key of accessKeys) {\r\n      if (key.accessKeyId) {\r\n        await awsService.deleteAccessKey(userName, key.accessKeyId);\r\n      }\r\n    }\r\n\r\n    // Remover perfil de login se existir\r\n    try {\r\n      await awsService.deleteLoginProfile(userName);\r\n    } catch (error) {\r\n      // Ignorar erro se o perfil de login não existir\r\n      console.log('Perfil de login não encontrado ou já removido');\r\n    }\r\n\r\n    // Deletar usuário\r\n    await awsService.deleteUser(userName);\r\n\r\n    return NextResponse.json({ message: 'Usuário removido com sucesso' });\r\n  } catch (error: any) {\r\n    console.error('Erro ao remover usuário IAM:', error);\r\n    return NextResponse.json(\r\n      { error: error.message || 'Falha ao remover usuário IAM' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n} "],"names":[],"mappings":"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","debugId":null}}]
}