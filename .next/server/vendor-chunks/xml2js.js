/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/xml2js";
exports.ids = ["vendor-chunks/xml2js"];
exports.modules = {

/***/ "(rsc)/./node_modules/xml2js/lib/bom.js":
/*!****************************************!*\
  !*** ./node_modules/xml2js/lib/bom.js ***!
  \****************************************/
/***/ (function(__unused_webpack_module, exports) {

eval("// Generated by CoffeeScript 1.12.7\n(function() {\n    \"use strict\";\n    exports.stripBOM = function(str) {\n        if (str[0] === \"\\uFEFF\") {\n            return str.substring(1);\n        } else {\n            return str;\n        }\n    };\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMveG1sMmpzL2xpYi9ib20uanMiLCJtYXBwaW5ncyI6IkFBQUEsbUNBQW1DO0FBQ2xDO0lBQ0M7SUFDQUEsZ0JBQWdCLEdBQUcsU0FBU0UsR0FBRztRQUM3QixJQUFJQSxHQUFHLENBQUMsRUFBRSxLQUFLLFVBQVU7WUFDdkIsT0FBT0EsSUFBSUMsU0FBUyxDQUFDO1FBQ3ZCLE9BQU87WUFDTCxPQUFPRDtRQUNUO0lBQ0Y7QUFFRixHQUFHRSxJQUFJLENBQUMsSUFBSSIsInNvdXJjZXMiOlsid2VicGFjazovL2Nsb3Vkc2hpZnQvLi9ub2RlX21vZHVsZXMveG1sMmpzL2xpYi9ib20uanM/ZDM4ZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuMTIuN1xuKGZ1bmN0aW9uKCkge1xuICBcInVzZSBzdHJpY3RcIjtcbiAgZXhwb3J0cy5zdHJpcEJPTSA9IGZ1bmN0aW9uKHN0cikge1xuICAgIGlmIChzdHJbMF0gPT09ICdcXHVGRUZGJykge1xuICAgICAgcmV0dXJuIHN0ci5zdWJzdHJpbmcoMSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuICB9O1xuXG59KS5jYWxsKHRoaXMpO1xuIl0sIm5hbWVzIjpbImV4cG9ydHMiLCJzdHJpcEJPTSIsInN0ciIsInN1YnN0cmluZyIsImNhbGwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/xml2js/lib/bom.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/xml2js/lib/builder.js":
/*!********************************************!*\
  !*** ./node_modules/xml2js/lib/builder.js ***!
  \********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("// Generated by CoffeeScript 1.12.7\n(function() {\n    \"use strict\";\n    var builder, defaults, escapeCDATA, requiresCDATA, wrapCDATA, hasProp = {}.hasOwnProperty;\n    builder = __webpack_require__(/*! xmlbuilder */ \"(rsc)/./node_modules/xmlbuilder/lib/index.js\");\n    defaults = (__webpack_require__(/*! ./defaults */ \"(rsc)/./node_modules/xml2js/lib/defaults.js\").defaults);\n    requiresCDATA = function(entry) {\n        return typeof entry === \"string\" && (entry.indexOf(\"&\") >= 0 || entry.indexOf(\">\") >= 0 || entry.indexOf(\"<\") >= 0);\n    };\n    wrapCDATA = function(entry) {\n        return \"<![CDATA[\" + escapeCDATA(entry) + \"]]>\";\n    };\n    escapeCDATA = function(entry) {\n        return entry.replace(\"]]>\", \"]]]]><![CDATA[>\");\n    };\n    exports.Builder = function() {\n        function Builder(opts) {\n            var key, ref, value;\n            this.options = {};\n            ref = defaults[\"0.2\"];\n            for(key in ref){\n                if (!hasProp.call(ref, key)) continue;\n                value = ref[key];\n                this.options[key] = value;\n            }\n            for(key in opts){\n                if (!hasProp.call(opts, key)) continue;\n                value = opts[key];\n                this.options[key] = value;\n            }\n        }\n        Builder.prototype.buildObject = function(rootObj) {\n            var attrkey, charkey, render, rootElement, rootName;\n            attrkey = this.options.attrkey;\n            charkey = this.options.charkey;\n            if (Object.keys(rootObj).length === 1 && this.options.rootName === defaults[\"0.2\"].rootName) {\n                rootName = Object.keys(rootObj)[0];\n                rootObj = rootObj[rootName];\n            } else {\n                rootName = this.options.rootName;\n            }\n            render = function(_this) {\n                return function(element, obj) {\n                    var attr, child, entry, index, key, value;\n                    if (typeof obj !== \"object\") {\n                        if (_this.options.cdata && requiresCDATA(obj)) {\n                            element.raw(wrapCDATA(obj));\n                        } else {\n                            element.txt(obj);\n                        }\n                    } else if (Array.isArray(obj)) {\n                        for(index in obj){\n                            if (!hasProp.call(obj, index)) continue;\n                            child = obj[index];\n                            for(key in child){\n                                entry = child[key];\n                                element = render(element.ele(key), entry).up();\n                            }\n                        }\n                    } else {\n                        for(key in obj){\n                            if (!hasProp.call(obj, key)) continue;\n                            child = obj[key];\n                            if (key === attrkey) {\n                                if (typeof child === \"object\") {\n                                    for(attr in child){\n                                        value = child[attr];\n                                        element = element.att(attr, value);\n                                    }\n                                }\n                            } else if (key === charkey) {\n                                if (_this.options.cdata && requiresCDATA(child)) {\n                                    element = element.raw(wrapCDATA(child));\n                                } else {\n                                    element = element.txt(child);\n                                }\n                            } else if (Array.isArray(child)) {\n                                for(index in child){\n                                    if (!hasProp.call(child, index)) continue;\n                                    entry = child[index];\n                                    if (typeof entry === \"string\") {\n                                        if (_this.options.cdata && requiresCDATA(entry)) {\n                                            element = element.ele(key).raw(wrapCDATA(entry)).up();\n                                        } else {\n                                            element = element.ele(key, entry).up();\n                                        }\n                                    } else {\n                                        element = render(element.ele(key), entry).up();\n                                    }\n                                }\n                            } else if (typeof child === \"object\") {\n                                element = render(element.ele(key), child).up();\n                            } else {\n                                if (typeof child === \"string\" && _this.options.cdata && requiresCDATA(child)) {\n                                    element = element.ele(key).raw(wrapCDATA(child)).up();\n                                } else {\n                                    if (child == null) {\n                                        child = \"\";\n                                    }\n                                    element = element.ele(key, child.toString()).up();\n                                }\n                            }\n                        }\n                    }\n                    return element;\n                };\n            }(this);\n            rootElement = builder.create(rootName, this.options.xmldec, this.options.doctype, {\n                headless: this.options.headless,\n                allowSurrogateChars: this.options.allowSurrogateChars\n            });\n            return render(rootElement, rootObj).end(this.options.renderOpts);\n        };\n        return Builder;\n    }();\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/xml2js/lib/builder.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/xml2js/lib/defaults.js":
/*!*********************************************!*\
  !*** ./node_modules/xml2js/lib/defaults.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, exports) {

eval("// Generated by CoffeeScript 1.12.7\n(function() {\n    exports.defaults = {\n        \"0.1\": {\n            explicitCharkey: false,\n            trim: true,\n            normalize: true,\n            normalizeTags: false,\n            attrkey: \"@\",\n            charkey: \"#\",\n            explicitArray: false,\n            ignoreAttrs: false,\n            mergeAttrs: false,\n            explicitRoot: false,\n            validator: null,\n            xmlns: false,\n            explicitChildren: false,\n            childkey: \"@@\",\n            charsAsChildren: false,\n            includeWhiteChars: false,\n            async: false,\n            strict: true,\n            attrNameProcessors: null,\n            attrValueProcessors: null,\n            tagNameProcessors: null,\n            valueProcessors: null,\n            emptyTag: \"\"\n        },\n        \"0.2\": {\n            explicitCharkey: false,\n            trim: false,\n            normalize: false,\n            normalizeTags: false,\n            attrkey: \"$\",\n            charkey: \"_\",\n            explicitArray: true,\n            ignoreAttrs: false,\n            mergeAttrs: false,\n            explicitRoot: true,\n            validator: null,\n            xmlns: false,\n            explicitChildren: false,\n            preserveChildrenOrder: false,\n            childkey: \"$$\",\n            charsAsChildren: false,\n            includeWhiteChars: false,\n            async: false,\n            strict: true,\n            attrNameProcessors: null,\n            attrValueProcessors: null,\n            tagNameProcessors: null,\n            valueProcessors: null,\n            rootName: \"root\",\n            xmldec: {\n                \"version\": \"1.0\",\n                \"encoding\": \"UTF-8\",\n                \"standalone\": true\n            },\n            doctype: null,\n            renderOpts: {\n                \"pretty\": true,\n                \"indent\": \"  \",\n                \"newline\": \"\\n\"\n            },\n            headless: false,\n            chunkSize: 10000,\n            emptyTag: \"\",\n            cdata: false\n        }\n    };\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMveG1sMmpzL2xpYi9kZWZhdWx0cy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxtQ0FBbUM7QUFDbEM7SUFDQ0EsZ0JBQWdCLEdBQUc7UUFDakIsT0FBTztZQUNMRSxpQkFBaUI7WUFDakJDLE1BQU07WUFDTkMsV0FBVztZQUNYQyxlQUFlO1lBQ2ZDLFNBQVM7WUFDVEMsU0FBUztZQUNUQyxlQUFlO1lBQ2ZDLGFBQWE7WUFDYkMsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFdBQVc7WUFDWEMsT0FBTztZQUNQQyxrQkFBa0I7WUFDbEJDLFVBQVU7WUFDVkMsaUJBQWlCO1lBQ2pCQyxtQkFBbUI7WUFDbkJDLE9BQU87WUFDUEMsUUFBUTtZQUNSQyxvQkFBb0I7WUFDcEJDLHFCQUFxQjtZQUNyQkMsbUJBQW1CO1lBQ25CQyxpQkFBaUI7WUFDakJDLFVBQVU7UUFDWjtRQUNBLE9BQU87WUFDTHRCLGlCQUFpQjtZQUNqQkMsTUFBTTtZQUNOQyxXQUFXO1lBQ1hDLGVBQWU7WUFDZkMsU0FBUztZQUNUQyxTQUFTO1lBQ1RDLGVBQWU7WUFDZkMsYUFBYTtZQUNiQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsV0FBVztZQUNYQyxPQUFPO1lBQ1BDLGtCQUFrQjtZQUNsQlcsdUJBQXVCO1lBQ3ZCVixVQUFVO1lBQ1ZDLGlCQUFpQjtZQUNqQkMsbUJBQW1CO1lBQ25CQyxPQUFPO1lBQ1BDLFFBQVE7WUFDUkMsb0JBQW9CO1lBQ3BCQyxxQkFBcUI7WUFDckJDLG1CQUFtQjtZQUNuQkMsaUJBQWlCO1lBQ2pCRyxVQUFVO1lBQ1ZDLFFBQVE7Z0JBQ04sV0FBVztnQkFDWCxZQUFZO2dCQUNaLGNBQWM7WUFDaEI7WUFDQUMsU0FBUztZQUNUQyxZQUFZO2dCQUNWLFVBQVU7Z0JBQ1YsVUFBVTtnQkFDVixXQUFXO1lBQ2I7WUFDQUMsVUFBVTtZQUNWQyxXQUFXO1lBQ1hQLFVBQVU7WUFDVlEsT0FBTztRQUNUO0lBQ0Y7QUFFRixHQUFHQyxJQUFJLENBQUMsSUFBSSIsInNvdXJjZXMiOlsid2VicGFjazovL2Nsb3Vkc2hpZnQvLi9ub2RlX21vZHVsZXMveG1sMmpzL2xpYi9kZWZhdWx0cy5qcz9lNDhhIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi43XG4oZnVuY3Rpb24oKSB7XG4gIGV4cG9ydHMuZGVmYXVsdHMgPSB7XG4gICAgXCIwLjFcIjoge1xuICAgICAgZXhwbGljaXRDaGFya2V5OiBmYWxzZSxcbiAgICAgIHRyaW06IHRydWUsXG4gICAgICBub3JtYWxpemU6IHRydWUsXG4gICAgICBub3JtYWxpemVUYWdzOiBmYWxzZSxcbiAgICAgIGF0dHJrZXk6IFwiQFwiLFxuICAgICAgY2hhcmtleTogXCIjXCIsXG4gICAgICBleHBsaWNpdEFycmF5OiBmYWxzZSxcbiAgICAgIGlnbm9yZUF0dHJzOiBmYWxzZSxcbiAgICAgIG1lcmdlQXR0cnM6IGZhbHNlLFxuICAgICAgZXhwbGljaXRSb290OiBmYWxzZSxcbiAgICAgIHZhbGlkYXRvcjogbnVsbCxcbiAgICAgIHhtbG5zOiBmYWxzZSxcbiAgICAgIGV4cGxpY2l0Q2hpbGRyZW46IGZhbHNlLFxuICAgICAgY2hpbGRrZXk6ICdAQCcsXG4gICAgICBjaGFyc0FzQ2hpbGRyZW46IGZhbHNlLFxuICAgICAgaW5jbHVkZVdoaXRlQ2hhcnM6IGZhbHNlLFxuICAgICAgYXN5bmM6IGZhbHNlLFxuICAgICAgc3RyaWN0OiB0cnVlLFxuICAgICAgYXR0ck5hbWVQcm9jZXNzb3JzOiBudWxsLFxuICAgICAgYXR0clZhbHVlUHJvY2Vzc29yczogbnVsbCxcbiAgICAgIHRhZ05hbWVQcm9jZXNzb3JzOiBudWxsLFxuICAgICAgdmFsdWVQcm9jZXNzb3JzOiBudWxsLFxuICAgICAgZW1wdHlUYWc6ICcnXG4gICAgfSxcbiAgICBcIjAuMlwiOiB7XG4gICAgICBleHBsaWNpdENoYXJrZXk6IGZhbHNlLFxuICAgICAgdHJpbTogZmFsc2UsXG4gICAgICBub3JtYWxpemU6IGZhbHNlLFxuICAgICAgbm9ybWFsaXplVGFnczogZmFsc2UsXG4gICAgICBhdHRya2V5OiBcIiRcIixcbiAgICAgIGNoYXJrZXk6IFwiX1wiLFxuICAgICAgZXhwbGljaXRBcnJheTogdHJ1ZSxcbiAgICAgIGlnbm9yZUF0dHJzOiBmYWxzZSxcbiAgICAgIG1lcmdlQXR0cnM6IGZhbHNlLFxuICAgICAgZXhwbGljaXRSb290OiB0cnVlLFxuICAgICAgdmFsaWRhdG9yOiBudWxsLFxuICAgICAgeG1sbnM6IGZhbHNlLFxuICAgICAgZXhwbGljaXRDaGlsZHJlbjogZmFsc2UsXG4gICAgICBwcmVzZXJ2ZUNoaWxkcmVuT3JkZXI6IGZhbHNlLFxuICAgICAgY2hpbGRrZXk6ICckJCcsXG4gICAgICBjaGFyc0FzQ2hpbGRyZW46IGZhbHNlLFxuICAgICAgaW5jbHVkZVdoaXRlQ2hhcnM6IGZhbHNlLFxuICAgICAgYXN5bmM6IGZhbHNlLFxuICAgICAgc3RyaWN0OiB0cnVlLFxuICAgICAgYXR0ck5hbWVQcm9jZXNzb3JzOiBudWxsLFxuICAgICAgYXR0clZhbHVlUHJvY2Vzc29yczogbnVsbCxcbiAgICAgIHRhZ05hbWVQcm9jZXNzb3JzOiBudWxsLFxuICAgICAgdmFsdWVQcm9jZXNzb3JzOiBudWxsLFxuICAgICAgcm9vdE5hbWU6ICdyb290JyxcbiAgICAgIHhtbGRlYzoge1xuICAgICAgICAndmVyc2lvbic6ICcxLjAnLFxuICAgICAgICAnZW5jb2RpbmcnOiAnVVRGLTgnLFxuICAgICAgICAnc3RhbmRhbG9uZSc6IHRydWVcbiAgICAgIH0sXG4gICAgICBkb2N0eXBlOiBudWxsLFxuICAgICAgcmVuZGVyT3B0czoge1xuICAgICAgICAncHJldHR5JzogdHJ1ZSxcbiAgICAgICAgJ2luZGVudCc6ICcgICcsXG4gICAgICAgICduZXdsaW5lJzogJ1xcbidcbiAgICAgIH0sXG4gICAgICBoZWFkbGVzczogZmFsc2UsXG4gICAgICBjaHVua1NpemU6IDEwMDAwLFxuICAgICAgZW1wdHlUYWc6ICcnLFxuICAgICAgY2RhdGE6IGZhbHNlXG4gICAgfVxuICB9O1xuXG59KS5jYWxsKHRoaXMpO1xuIl0sIm5hbWVzIjpbImV4cG9ydHMiLCJkZWZhdWx0cyIsImV4cGxpY2l0Q2hhcmtleSIsInRyaW0iLCJub3JtYWxpemUiLCJub3JtYWxpemVUYWdzIiwiYXR0cmtleSIsImNoYXJrZXkiLCJleHBsaWNpdEFycmF5IiwiaWdub3JlQXR0cnMiLCJtZXJnZUF0dHJzIiwiZXhwbGljaXRSb290IiwidmFsaWRhdG9yIiwieG1sbnMiLCJleHBsaWNpdENoaWxkcmVuIiwiY2hpbGRrZXkiLCJjaGFyc0FzQ2hpbGRyZW4iLCJpbmNsdWRlV2hpdGVDaGFycyIsImFzeW5jIiwic3RyaWN0IiwiYXR0ck5hbWVQcm9jZXNzb3JzIiwiYXR0clZhbHVlUHJvY2Vzc29ycyIsInRhZ05hbWVQcm9jZXNzb3JzIiwidmFsdWVQcm9jZXNzb3JzIiwiZW1wdHlUYWciLCJwcmVzZXJ2ZUNoaWxkcmVuT3JkZXIiLCJyb290TmFtZSIsInhtbGRlYyIsImRvY3R5cGUiLCJyZW5kZXJPcHRzIiwiaGVhZGxlc3MiLCJjaHVua1NpemUiLCJjZGF0YSIsImNhbGwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/xml2js/lib/defaults.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/xml2js/lib/parser.js":
/*!*******************************************!*\
  !*** ./node_modules/xml2js/lib/parser.js ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("// Generated by CoffeeScript 1.12.7\n(function() {\n    \"use strict\";\n    var bom, defaults, defineProperty, events, isEmpty, processItem, processors, sax, setImmediate, bind = function(fn, me) {\n        return function() {\n            return fn.apply(me, arguments);\n        };\n    }, extend = function(child, parent) {\n        for(var key in parent){\n            if (hasProp.call(parent, key)) child[key] = parent[key];\n        }\n        function ctor() {\n            this.constructor = child;\n        }\n        ctor.prototype = parent.prototype;\n        child.prototype = new ctor();\n        child.__super__ = parent.prototype;\n        return child;\n    }, hasProp = {}.hasOwnProperty;\n    sax = __webpack_require__(/*! sax */ \"(rsc)/./node_modules/xml2js/node_modules/sax/lib/sax.js\");\n    events = __webpack_require__(/*! events */ \"events\");\n    bom = __webpack_require__(/*! ./bom */ \"(rsc)/./node_modules/xml2js/lib/bom.js\");\n    processors = __webpack_require__(/*! ./processors */ \"(rsc)/./node_modules/xml2js/lib/processors.js\");\n    setImmediate = (__webpack_require__(/*! timers */ \"timers\").setImmediate);\n    defaults = (__webpack_require__(/*! ./defaults */ \"(rsc)/./node_modules/xml2js/lib/defaults.js\").defaults);\n    isEmpty = function(thing) {\n        return typeof thing === \"object\" && thing != null && Object.keys(thing).length === 0;\n    };\n    processItem = function(processors, item, key) {\n        var i, len, process;\n        for(i = 0, len = processors.length; i < len; i++){\n            process = processors[i];\n            item = process(item, key);\n        }\n        return item;\n    };\n    defineProperty = function(obj, key, value) {\n        var descriptor;\n        descriptor = Object.create(null);\n        descriptor.value = value;\n        descriptor.writable = true;\n        descriptor.enumerable = true;\n        descriptor.configurable = true;\n        return Object.defineProperty(obj, key, descriptor);\n    };\n    exports.Parser = function(superClass) {\n        extend(Parser, superClass);\n        function Parser(opts) {\n            this.parseStringPromise = bind(this.parseStringPromise, this);\n            this.parseString = bind(this.parseString, this);\n            this.reset = bind(this.reset, this);\n            this.assignOrPush = bind(this.assignOrPush, this);\n            this.processAsync = bind(this.processAsync, this);\n            var key, ref, value;\n            if (!(this instanceof exports.Parser)) {\n                return new exports.Parser(opts);\n            }\n            this.options = {};\n            ref = defaults[\"0.2\"];\n            for(key in ref){\n                if (!hasProp.call(ref, key)) continue;\n                value = ref[key];\n                this.options[key] = value;\n            }\n            for(key in opts){\n                if (!hasProp.call(opts, key)) continue;\n                value = opts[key];\n                this.options[key] = value;\n            }\n            if (this.options.xmlns) {\n                this.options.xmlnskey = this.options.attrkey + \"ns\";\n            }\n            if (this.options.normalizeTags) {\n                if (!this.options.tagNameProcessors) {\n                    this.options.tagNameProcessors = [];\n                }\n                this.options.tagNameProcessors.unshift(processors.normalize);\n            }\n            this.reset();\n        }\n        Parser.prototype.processAsync = function() {\n            var chunk, err;\n            try {\n                if (this.remaining.length <= this.options.chunkSize) {\n                    chunk = this.remaining;\n                    this.remaining = \"\";\n                    this.saxParser = this.saxParser.write(chunk);\n                    return this.saxParser.close();\n                } else {\n                    chunk = this.remaining.substr(0, this.options.chunkSize);\n                    this.remaining = this.remaining.substr(this.options.chunkSize, this.remaining.length);\n                    this.saxParser = this.saxParser.write(chunk);\n                    return setImmediate(this.processAsync);\n                }\n            } catch (error1) {\n                err = error1;\n                if (!this.saxParser.errThrown) {\n                    this.saxParser.errThrown = true;\n                    return this.emit(err);\n                }\n            }\n        };\n        Parser.prototype.assignOrPush = function(obj, key, newValue) {\n            if (!(key in obj)) {\n                if (!this.options.explicitArray) {\n                    return defineProperty(obj, key, newValue);\n                } else {\n                    return defineProperty(obj, key, [\n                        newValue\n                    ]);\n                }\n            } else {\n                if (!(obj[key] instanceof Array)) {\n                    defineProperty(obj, key, [\n                        obj[key]\n                    ]);\n                }\n                return obj[key].push(newValue);\n            }\n        };\n        Parser.prototype.reset = function() {\n            var attrkey, charkey, ontext, stack;\n            this.removeAllListeners();\n            this.saxParser = sax.parser(this.options.strict, {\n                trim: false,\n                normalize: false,\n                xmlns: this.options.xmlns\n            });\n            this.saxParser.errThrown = false;\n            this.saxParser.onerror = function(_this) {\n                return function(error) {\n                    _this.saxParser.resume();\n                    if (!_this.saxParser.errThrown) {\n                        _this.saxParser.errThrown = true;\n                        return _this.emit(\"error\", error);\n                    }\n                };\n            }(this);\n            this.saxParser.onend = function(_this) {\n                return function() {\n                    if (!_this.saxParser.ended) {\n                        _this.saxParser.ended = true;\n                        return _this.emit(\"end\", _this.resultObject);\n                    }\n                };\n            }(this);\n            this.saxParser.ended = false;\n            this.EXPLICIT_CHARKEY = this.options.explicitCharkey;\n            this.resultObject = null;\n            stack = [];\n            attrkey = this.options.attrkey;\n            charkey = this.options.charkey;\n            this.saxParser.onopentag = function(_this) {\n                return function(node) {\n                    var key, newValue, obj, processedKey, ref;\n                    obj = {};\n                    obj[charkey] = \"\";\n                    if (!_this.options.ignoreAttrs) {\n                        ref = node.attributes;\n                        for(key in ref){\n                            if (!hasProp.call(ref, key)) continue;\n                            if (!(attrkey in obj) && !_this.options.mergeAttrs) {\n                                obj[attrkey] = {};\n                            }\n                            newValue = _this.options.attrValueProcessors ? processItem(_this.options.attrValueProcessors, node.attributes[key], key) : node.attributes[key];\n                            processedKey = _this.options.attrNameProcessors ? processItem(_this.options.attrNameProcessors, key) : key;\n                            if (_this.options.mergeAttrs) {\n                                _this.assignOrPush(obj, processedKey, newValue);\n                            } else {\n                                defineProperty(obj[attrkey], processedKey, newValue);\n                            }\n                        }\n                    }\n                    obj[\"#name\"] = _this.options.tagNameProcessors ? processItem(_this.options.tagNameProcessors, node.name) : node.name;\n                    if (_this.options.xmlns) {\n                        obj[_this.options.xmlnskey] = {\n                            uri: node.uri,\n                            local: node.local\n                        };\n                    }\n                    return stack.push(obj);\n                };\n            }(this);\n            this.saxParser.onclosetag = function(_this) {\n                return function() {\n                    var cdata, emptyStr, key, node, nodeName, obj, objClone, old, s, xpath;\n                    obj = stack.pop();\n                    nodeName = obj[\"#name\"];\n                    if (!_this.options.explicitChildren || !_this.options.preserveChildrenOrder) {\n                        delete obj[\"#name\"];\n                    }\n                    if (obj.cdata === true) {\n                        cdata = obj.cdata;\n                        delete obj.cdata;\n                    }\n                    s = stack[stack.length - 1];\n                    if (obj[charkey].match(/^\\s*$/) && !cdata) {\n                        emptyStr = obj[charkey];\n                        delete obj[charkey];\n                    } else {\n                        if (_this.options.trim) {\n                            obj[charkey] = obj[charkey].trim();\n                        }\n                        if (_this.options.normalize) {\n                            obj[charkey] = obj[charkey].replace(/\\s{2,}/g, \" \").trim();\n                        }\n                        obj[charkey] = _this.options.valueProcessors ? processItem(_this.options.valueProcessors, obj[charkey], nodeName) : obj[charkey];\n                        if (Object.keys(obj).length === 1 && charkey in obj && !_this.EXPLICIT_CHARKEY) {\n                            obj = obj[charkey];\n                        }\n                    }\n                    if (isEmpty(obj)) {\n                        if (typeof _this.options.emptyTag === \"function\") {\n                            obj = _this.options.emptyTag();\n                        } else {\n                            obj = _this.options.emptyTag !== \"\" ? _this.options.emptyTag : emptyStr;\n                        }\n                    }\n                    if (_this.options.validator != null) {\n                        xpath = \"/\" + (function() {\n                            var i, len, results;\n                            results = [];\n                            for(i = 0, len = stack.length; i < len; i++){\n                                node = stack[i];\n                                results.push(node[\"#name\"]);\n                            }\n                            return results;\n                        })().concat(nodeName).join(\"/\");\n                        (function() {\n                            var err;\n                            try {\n                                return obj = _this.options.validator(xpath, s && s[nodeName], obj);\n                            } catch (error1) {\n                                err = error1;\n                                return _this.emit(\"error\", err);\n                            }\n                        })();\n                    }\n                    if (_this.options.explicitChildren && !_this.options.mergeAttrs && typeof obj === \"object\") {\n                        if (!_this.options.preserveChildrenOrder) {\n                            node = {};\n                            if (_this.options.attrkey in obj) {\n                                node[_this.options.attrkey] = obj[_this.options.attrkey];\n                                delete obj[_this.options.attrkey];\n                            }\n                            if (!_this.options.charsAsChildren && _this.options.charkey in obj) {\n                                node[_this.options.charkey] = obj[_this.options.charkey];\n                                delete obj[_this.options.charkey];\n                            }\n                            if (Object.getOwnPropertyNames(obj).length > 0) {\n                                node[_this.options.childkey] = obj;\n                            }\n                            obj = node;\n                        } else if (s) {\n                            s[_this.options.childkey] = s[_this.options.childkey] || [];\n                            objClone = {};\n                            for(key in obj){\n                                if (!hasProp.call(obj, key)) continue;\n                                defineProperty(objClone, key, obj[key]);\n                            }\n                            s[_this.options.childkey].push(objClone);\n                            delete obj[\"#name\"];\n                            if (Object.keys(obj).length === 1 && charkey in obj && !_this.EXPLICIT_CHARKEY) {\n                                obj = obj[charkey];\n                            }\n                        }\n                    }\n                    if (stack.length > 0) {\n                        return _this.assignOrPush(s, nodeName, obj);\n                    } else {\n                        if (_this.options.explicitRoot) {\n                            old = obj;\n                            obj = {};\n                            defineProperty(obj, nodeName, old);\n                        }\n                        _this.resultObject = obj;\n                        _this.saxParser.ended = true;\n                        return _this.emit(\"end\", _this.resultObject);\n                    }\n                };\n            }(this);\n            ontext = function(_this) {\n                return function(text) {\n                    var charChild, s;\n                    s = stack[stack.length - 1];\n                    if (s) {\n                        s[charkey] += text;\n                        if (_this.options.explicitChildren && _this.options.preserveChildrenOrder && _this.options.charsAsChildren && (_this.options.includeWhiteChars || text.replace(/\\\\n/g, \"\").trim() !== \"\")) {\n                            s[_this.options.childkey] = s[_this.options.childkey] || [];\n                            charChild = {\n                                \"#name\": \"__text__\"\n                            };\n                            charChild[charkey] = text;\n                            if (_this.options.normalize) {\n                                charChild[charkey] = charChild[charkey].replace(/\\s{2,}/g, \" \").trim();\n                            }\n                            s[_this.options.childkey].push(charChild);\n                        }\n                        return s;\n                    }\n                };\n            }(this);\n            this.saxParser.ontext = ontext;\n            return this.saxParser.oncdata = function(_this) {\n                return function(text) {\n                    var s;\n                    s = ontext(text);\n                    if (s) {\n                        return s.cdata = true;\n                    }\n                };\n            }(this);\n        };\n        Parser.prototype.parseString = function(str, cb) {\n            var err;\n            if (cb != null && typeof cb === \"function\") {\n                this.on(\"end\", function(result) {\n                    this.reset();\n                    return cb(null, result);\n                });\n                this.on(\"error\", function(err) {\n                    this.reset();\n                    return cb(err);\n                });\n            }\n            try {\n                str = str.toString();\n                if (str.trim() === \"\") {\n                    this.emit(\"end\", null);\n                    return true;\n                }\n                str = bom.stripBOM(str);\n                if (this.options.async) {\n                    this.remaining = str;\n                    setImmediate(this.processAsync);\n                    return this.saxParser;\n                }\n                return this.saxParser.write(str).close();\n            } catch (error1) {\n                err = error1;\n                if (!(this.saxParser.errThrown || this.saxParser.ended)) {\n                    this.emit(\"error\", err);\n                    return this.saxParser.errThrown = true;\n                } else if (this.saxParser.ended) {\n                    throw err;\n                }\n            }\n        };\n        Parser.prototype.parseStringPromise = function(str) {\n            return new Promise(function(_this) {\n                return function(resolve, reject) {\n                    return _this.parseString(str, function(err, value) {\n                        if (err) {\n                            return reject(err);\n                        } else {\n                            return resolve(value);\n                        }\n                    });\n                };\n            }(this));\n        };\n        return Parser;\n    }(events);\n    exports.parseString = function(str, a, b) {\n        var cb, options, parser;\n        if (b != null) {\n            if (typeof b === \"function\") {\n                cb = b;\n            }\n            if (typeof a === \"object\") {\n                options = a;\n            }\n        } else {\n            if (typeof a === \"function\") {\n                cb = a;\n            }\n            options = {};\n        }\n        parser = new exports.Parser(options);\n        return parser.parseString(str, cb);\n    };\n    exports.parseStringPromise = function(str, a) {\n        var options, parser;\n        if (typeof a === \"object\") {\n            options = a;\n        }\n        parser = new exports.Parser(options);\n        return parser.parseStringPromise(str);\n    };\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/xml2js/lib/parser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/xml2js/lib/processors.js":
/*!***********************************************!*\
  !*** ./node_modules/xml2js/lib/processors.js ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, exports) {

eval("// Generated by CoffeeScript 1.12.7\n(function() {\n    \"use strict\";\n    var prefixMatch;\n    prefixMatch = new RegExp(/(?!xmlns)^.*:/);\n    exports.normalize = function(str) {\n        return str.toLowerCase();\n    };\n    exports.firstCharLowerCase = function(str) {\n        return str.charAt(0).toLowerCase() + str.slice(1);\n    };\n    exports.stripPrefix = function(str) {\n        return str.replace(prefixMatch, \"\");\n    };\n    exports.parseNumbers = function(str) {\n        if (!isNaN(str)) {\n            str = str % 1 === 0 ? parseInt(str, 10) : parseFloat(str);\n        }\n        return str;\n    };\n    exports.parseBooleans = function(str) {\n        if (/^(?:true|false)$/i.test(str)) {\n            str = str.toLowerCase() === \"true\";\n        }\n        return str;\n    };\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMveG1sMmpzL2xpYi9wcm9jZXNzb3JzLmpzIiwibWFwcGluZ3MiOiJBQUFBLG1DQUFtQztBQUNsQztJQUNDO0lBQ0EsSUFBSUE7SUFFSkEsY0FBYyxJQUFJQyxPQUFPO0lBRXpCQyxpQkFBaUIsR0FBRyxTQUFTRSxHQUFHO1FBQzlCLE9BQU9BLElBQUlDLFdBQVc7SUFDeEI7SUFFQUgsMEJBQTBCLEdBQUcsU0FBU0UsR0FBRztRQUN2QyxPQUFPQSxJQUFJRyxNQUFNLENBQUMsR0FBR0YsV0FBVyxLQUFLRCxJQUFJSSxLQUFLLENBQUM7SUFDakQ7SUFFQU4sbUJBQW1CLEdBQUcsU0FBU0UsR0FBRztRQUNoQyxPQUFPQSxJQUFJTSxPQUFPLENBQUNWLGFBQWE7SUFDbEM7SUFFQUUsb0JBQW9CLEdBQUcsU0FBU0UsR0FBRztRQUNqQyxJQUFJLENBQUNRLE1BQU1SLE1BQU07WUFDZkEsTUFBTUEsTUFBTSxNQUFNLElBQUlTLFNBQVNULEtBQUssTUFBTVUsV0FBV1Y7UUFDdkQ7UUFDQSxPQUFPQTtJQUNUO0lBRUFGLHFCQUFxQixHQUFHLFNBQVNFLEdBQUc7UUFDbEMsSUFBSSxvQkFBb0JZLElBQUksQ0FBQ1osTUFBTTtZQUNqQ0EsTUFBTUEsSUFBSUMsV0FBVyxPQUFPO1FBQzlCO1FBQ0EsT0FBT0Q7SUFDVDtBQUVGLEdBQUdhLElBQUksQ0FBQyxJQUFJIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2xvdWRzaGlmdC8uL25vZGVfbW9kdWxlcy94bWwyanMvbGliL3Byb2Nlc3NvcnMuanM/YTE5ZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuMTIuN1xuKGZ1bmN0aW9uKCkge1xuICBcInVzZSBzdHJpY3RcIjtcbiAgdmFyIHByZWZpeE1hdGNoO1xuXG4gIHByZWZpeE1hdGNoID0gbmV3IFJlZ0V4cCgvKD8heG1sbnMpXi4qOi8pO1xuXG4gIGV4cG9ydHMubm9ybWFsaXplID0gZnVuY3Rpb24oc3RyKSB7XG4gICAgcmV0dXJuIHN0ci50b0xvd2VyQ2FzZSgpO1xuICB9O1xuXG4gIGV4cG9ydHMuZmlyc3RDaGFyTG93ZXJDYXNlID0gZnVuY3Rpb24oc3RyKSB7XG4gICAgcmV0dXJuIHN0ci5jaGFyQXQoMCkudG9Mb3dlckNhc2UoKSArIHN0ci5zbGljZSgxKTtcbiAgfTtcblxuICBleHBvcnRzLnN0cmlwUHJlZml4ID0gZnVuY3Rpb24oc3RyKSB7XG4gICAgcmV0dXJuIHN0ci5yZXBsYWNlKHByZWZpeE1hdGNoLCAnJyk7XG4gIH07XG5cbiAgZXhwb3J0cy5wYXJzZU51bWJlcnMgPSBmdW5jdGlvbihzdHIpIHtcbiAgICBpZiAoIWlzTmFOKHN0cikpIHtcbiAgICAgIHN0ciA9IHN0ciAlIDEgPT09IDAgPyBwYXJzZUludChzdHIsIDEwKSA6IHBhcnNlRmxvYXQoc3RyKTtcbiAgICB9XG4gICAgcmV0dXJuIHN0cjtcbiAgfTtcblxuICBleHBvcnRzLnBhcnNlQm9vbGVhbnMgPSBmdW5jdGlvbihzdHIpIHtcbiAgICBpZiAoL14oPzp0cnVlfGZhbHNlKSQvaS50ZXN0KHN0cikpIHtcbiAgICAgIHN0ciA9IHN0ci50b0xvd2VyQ2FzZSgpID09PSAndHJ1ZSc7XG4gICAgfVxuICAgIHJldHVybiBzdHI7XG4gIH07XG5cbn0pLmNhbGwodGhpcyk7XG4iXSwibmFtZXMiOlsicHJlZml4TWF0Y2giLCJSZWdFeHAiLCJleHBvcnRzIiwibm9ybWFsaXplIiwic3RyIiwidG9Mb3dlckNhc2UiLCJmaXJzdENoYXJMb3dlckNhc2UiLCJjaGFyQXQiLCJzbGljZSIsInN0cmlwUHJlZml4IiwicmVwbGFjZSIsInBhcnNlTnVtYmVycyIsImlzTmFOIiwicGFyc2VJbnQiLCJwYXJzZUZsb2F0IiwicGFyc2VCb29sZWFucyIsInRlc3QiLCJjYWxsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/xml2js/lib/processors.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/xml2js/lib/xml2js.js":
/*!*******************************************!*\
  !*** ./node_modules/xml2js/lib/xml2js.js ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("// Generated by CoffeeScript 1.12.7\n(function() {\n    \"use strict\";\n    var builder, defaults, parser, processors, extend = function(child, parent) {\n        for(var key in parent){\n            if (hasProp.call(parent, key)) child[key] = parent[key];\n        }\n        function ctor() {\n            this.constructor = child;\n        }\n        ctor.prototype = parent.prototype;\n        child.prototype = new ctor();\n        child.__super__ = parent.prototype;\n        return child;\n    }, hasProp = {}.hasOwnProperty;\n    defaults = __webpack_require__(/*! ./defaults */ \"(rsc)/./node_modules/xml2js/lib/defaults.js\");\n    builder = __webpack_require__(/*! ./builder */ \"(rsc)/./node_modules/xml2js/lib/builder.js\");\n    parser = __webpack_require__(/*! ./parser */ \"(rsc)/./node_modules/xml2js/lib/parser.js\");\n    processors = __webpack_require__(/*! ./processors */ \"(rsc)/./node_modules/xml2js/lib/processors.js\");\n    exports.defaults = defaults.defaults;\n    exports.processors = processors;\n    exports.ValidationError = function(superClass) {\n        extend(ValidationError, superClass);\n        function ValidationError(message) {\n            this.message = message;\n        }\n        return ValidationError;\n    }(Error);\n    exports.Builder = builder.Builder;\n    exports.Parser = parser.Parser;\n    exports.parseString = parser.parseString;\n    exports.parseStringPromise = parser.parseStringPromise;\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMveG1sMmpzL2xpYi94bWwyanMuanMiLCJtYXBwaW5ncyI6IkFBQUEsbUNBQW1DO0FBQ2xDO0lBQ0M7SUFDQSxJQUFJQSxTQUFTQyxVQUFVQyxRQUFRQyxZQUM3QkMsU0FBUyxTQUFTQyxLQUFLLEVBQUVDLE1BQU07UUFBSSxJQUFLLElBQUlDLE9BQU9ELE9BQVE7WUFBRSxJQUFJRSxRQUFRQyxJQUFJLENBQUNILFFBQVFDLE1BQU1GLEtBQUssQ0FBQ0UsSUFBSSxHQUFHRCxNQUFNLENBQUNDLElBQUk7UUFBRTtRQUFFLFNBQVNHO1lBQVMsSUFBSSxDQUFDQyxXQUFXLEdBQUdOO1FBQU87UUFBRUssS0FBS0UsU0FBUyxHQUFHTixPQUFPTSxTQUFTO1FBQUVQLE1BQU1PLFNBQVMsR0FBRyxJQUFJRjtRQUFRTCxNQUFNUSxTQUFTLEdBQUdQLE9BQU9NLFNBQVM7UUFBRSxPQUFPUDtJQUFPLEdBQ3pSRyxVQUFVLENBQUMsRUFBRU0sY0FBYztJQUU3QmIsV0FBV2MsbUJBQU9BLENBQUM7SUFFbkJmLFVBQVVlLG1CQUFPQSxDQUFDO0lBRWxCYixTQUFTYSxtQkFBT0EsQ0FBQztJQUVqQlosYUFBYVksbUJBQU9BLENBQUM7SUFFckJDLGdCQUFnQixHQUFHZixTQUFTQSxRQUFRO0lBRXBDZSxrQkFBa0IsR0FBR2I7SUFFckJhLHVCQUF1QixHQUFHLFNBQVVFLFVBQVU7UUFDNUNkLE9BQU9hLGlCQUFpQkM7UUFFeEIsU0FBU0QsZ0JBQWdCRSxPQUFPO1lBQzlCLElBQUksQ0FBQ0EsT0FBTyxHQUFHQTtRQUNqQjtRQUVBLE9BQU9GO0lBRVQsRUFBR0c7SUFFSEosZUFBZSxHQUFHaEIsUUFBUXFCLE9BQU87SUFFakNMLGNBQWMsR0FBR2QsT0FBT29CLE1BQU07SUFFOUJOLG1CQUFtQixHQUFHZCxPQUFPcUIsV0FBVztJQUV4Q1AsMEJBQTBCLEdBQUdkLE9BQU9zQixrQkFBa0I7QUFFeEQsR0FBR2YsSUFBSSxDQUFDLElBQUkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbG91ZHNoaWZ0Ly4vbm9kZV9tb2R1bGVzL3htbDJqcy9saWIveG1sMmpzLmpzP2U5MmUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjEyLjdcbihmdW5jdGlvbigpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG4gIHZhciBidWlsZGVyLCBkZWZhdWx0cywgcGFyc2VyLCBwcm9jZXNzb3JzLFxuICAgIGV4dGVuZCA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoaGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfSxcbiAgICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cbiAgZGVmYXVsdHMgPSByZXF1aXJlKCcuL2RlZmF1bHRzJyk7XG5cbiAgYnVpbGRlciA9IHJlcXVpcmUoJy4vYnVpbGRlcicpO1xuXG4gIHBhcnNlciA9IHJlcXVpcmUoJy4vcGFyc2VyJyk7XG5cbiAgcHJvY2Vzc29ycyA9IHJlcXVpcmUoJy4vcHJvY2Vzc29ycycpO1xuXG4gIGV4cG9ydHMuZGVmYXVsdHMgPSBkZWZhdWx0cy5kZWZhdWx0cztcblxuICBleHBvcnRzLnByb2Nlc3NvcnMgPSBwcm9jZXNzb3JzO1xuXG4gIGV4cG9ydHMuVmFsaWRhdGlvbkVycm9yID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgICBleHRlbmQoVmFsaWRhdGlvbkVycm9yLCBzdXBlckNsYXNzKTtcblxuICAgIGZ1bmN0aW9uIFZhbGlkYXRpb25FcnJvcihtZXNzYWdlKSB7XG4gICAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICAgIH1cblxuICAgIHJldHVybiBWYWxpZGF0aW9uRXJyb3I7XG5cbiAgfSkoRXJyb3IpO1xuXG4gIGV4cG9ydHMuQnVpbGRlciA9IGJ1aWxkZXIuQnVpbGRlcjtcblxuICBleHBvcnRzLlBhcnNlciA9IHBhcnNlci5QYXJzZXI7XG5cbiAgZXhwb3J0cy5wYXJzZVN0cmluZyA9IHBhcnNlci5wYXJzZVN0cmluZztcblxuICBleHBvcnRzLnBhcnNlU3RyaW5nUHJvbWlzZSA9IHBhcnNlci5wYXJzZVN0cmluZ1Byb21pc2U7XG5cbn0pLmNhbGwodGhpcyk7XG4iXSwibmFtZXMiOlsiYnVpbGRlciIsImRlZmF1bHRzIiwicGFyc2VyIiwicHJvY2Vzc29ycyIsImV4dGVuZCIsImNoaWxkIiwicGFyZW50Iiwia2V5IiwiaGFzUHJvcCIsImNhbGwiLCJjdG9yIiwiY29uc3RydWN0b3IiLCJwcm90b3R5cGUiLCJfX3N1cGVyX18iLCJoYXNPd25Qcm9wZXJ0eSIsInJlcXVpcmUiLCJleHBvcnRzIiwiVmFsaWRhdGlvbkVycm9yIiwic3VwZXJDbGFzcyIsIm1lc3NhZ2UiLCJFcnJvciIsIkJ1aWxkZXIiLCJQYXJzZXIiLCJwYXJzZVN0cmluZyIsInBhcnNlU3RyaW5nUHJvbWlzZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/xml2js/lib/xml2js.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/xml2js/node_modules/sax/lib/sax.js":
/*!*********************************************************!*\
  !*** ./node_modules/xml2js/node_modules/sax/lib/sax.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval(";\n(function(sax) {\n    sax.parser = function(strict, opt) {\n        return new SAXParser(strict, opt);\n    };\n    sax.SAXParser = SAXParser;\n    sax.SAXStream = SAXStream;\n    sax.createStream = createStream;\n    // When we pass the MAX_BUFFER_LENGTH position, start checking for buffer overruns.\n    // When we check, schedule the next check for MAX_BUFFER_LENGTH - (max(buffer lengths)),\n    // since that's the earliest that a buffer overrun could occur.  This way, checks are\n    // as rare as required, but as often as necessary to ensure never crossing this bound.\n    // Furthermore, buffers are only tested at most once per write(), so passing a very\n    // large string into write() might have undesirable effects, but this is manageable by\n    // the caller, so it is assumed to be safe.  Thus, a call to write() may, in the extreme\n    // edge case, result in creating at most one complete copy of the string passed in.\n    // Set to Infinity to have unlimited buffers.\n    sax.MAX_BUFFER_LENGTH = 64 * 1024;\n    var buffers = [\n        \"comment\",\n        \"sgmlDecl\",\n        \"textNode\",\n        \"tagName\",\n        \"doctype\",\n        \"procInstName\",\n        \"procInstBody\",\n        \"entity\",\n        \"attribName\",\n        \"attribValue\",\n        \"cdata\",\n        \"script\"\n    ];\n    sax.EVENTS = [\n        \"text\",\n        \"processinginstruction\",\n        \"sgmldeclaration\",\n        \"doctype\",\n        \"comment\",\n        \"opentagstart\",\n        \"attribute\",\n        \"opentag\",\n        \"closetag\",\n        \"opencdata\",\n        \"cdata\",\n        \"closecdata\",\n        \"error\",\n        \"end\",\n        \"ready\",\n        \"script\",\n        \"opennamespace\",\n        \"closenamespace\"\n    ];\n    function SAXParser(strict, opt) {\n        if (!(this instanceof SAXParser)) {\n            return new SAXParser(strict, opt);\n        }\n        var parser = this;\n        clearBuffers(parser);\n        parser.q = parser.c = \"\";\n        parser.bufferCheckPosition = sax.MAX_BUFFER_LENGTH;\n        parser.opt = opt || {};\n        parser.opt.lowercase = parser.opt.lowercase || parser.opt.lowercasetags;\n        parser.looseCase = parser.opt.lowercase ? \"toLowerCase\" : \"toUpperCase\";\n        parser.tags = [];\n        parser.closed = parser.closedRoot = parser.sawRoot = false;\n        parser.tag = parser.error = null;\n        parser.strict = !!strict;\n        parser.noscript = !!(strict || parser.opt.noscript);\n        parser.state = S.BEGIN;\n        parser.strictEntities = parser.opt.strictEntities;\n        parser.ENTITIES = parser.strictEntities ? Object.create(sax.XML_ENTITIES) : Object.create(sax.ENTITIES);\n        parser.attribList = [];\n        // namespaces form a prototype chain.\n        // it always points at the current tag,\n        // which protos to its parent tag.\n        if (parser.opt.xmlns) {\n            parser.ns = Object.create(rootNS);\n        }\n        // disallow unquoted attribute values if not otherwise configured\n        // and strict mode is true\n        if (parser.opt.unquotedAttributeValues === undefined) {\n            parser.opt.unquotedAttributeValues = !strict;\n        }\n        // mostly just for error reporting\n        parser.trackPosition = parser.opt.position !== false;\n        if (parser.trackPosition) {\n            parser.position = parser.line = parser.column = 0;\n        }\n        emit(parser, \"onready\");\n    }\n    if (!Object.create) {\n        Object.create = function(o) {\n            function F() {}\n            F.prototype = o;\n            var newf = new F();\n            return newf;\n        };\n    }\n    if (!Object.keys) {\n        Object.keys = function(o) {\n            var a = [];\n            for(var i in o)if (o.hasOwnProperty(i)) a.push(i);\n            return a;\n        };\n    }\n    function checkBufferLength(parser) {\n        var maxAllowed = Math.max(sax.MAX_BUFFER_LENGTH, 10);\n        var maxActual = 0;\n        for(var i = 0, l = buffers.length; i < l; i++){\n            var len = parser[buffers[i]].length;\n            if (len > maxAllowed) {\n                // Text/cdata nodes can get big, and since they're buffered,\n                // we can get here under normal conditions.\n                // Avoid issues by emitting the text node now,\n                // so at least it won't get any bigger.\n                switch(buffers[i]){\n                    case \"textNode\":\n                        closeText(parser);\n                        break;\n                    case \"cdata\":\n                        emitNode(parser, \"oncdata\", parser.cdata);\n                        parser.cdata = \"\";\n                        break;\n                    case \"script\":\n                        emitNode(parser, \"onscript\", parser.script);\n                        parser.script = \"\";\n                        break;\n                    default:\n                        error(parser, \"Max buffer length exceeded: \" + buffers[i]);\n                }\n            }\n            maxActual = Math.max(maxActual, len);\n        }\n        // schedule the next check for the earliest possible buffer overrun.\n        var m = sax.MAX_BUFFER_LENGTH - maxActual;\n        parser.bufferCheckPosition = m + parser.position;\n    }\n    function clearBuffers(parser) {\n        for(var i = 0, l = buffers.length; i < l; i++){\n            parser[buffers[i]] = \"\";\n        }\n    }\n    function flushBuffers(parser) {\n        closeText(parser);\n        if (parser.cdata !== \"\") {\n            emitNode(parser, \"oncdata\", parser.cdata);\n            parser.cdata = \"\";\n        }\n        if (parser.script !== \"\") {\n            emitNode(parser, \"onscript\", parser.script);\n            parser.script = \"\";\n        }\n    }\n    SAXParser.prototype = {\n        end: function() {\n            end(this);\n        },\n        write: write,\n        resume: function() {\n            this.error = null;\n            return this;\n        },\n        close: function() {\n            return this.write(null);\n        },\n        flush: function() {\n            flushBuffers(this);\n        }\n    };\n    var Stream;\n    try {\n        Stream = (__webpack_require__(/*! stream */ \"stream\").Stream);\n    } catch (ex) {\n        Stream = function() {};\n    }\n    if (!Stream) Stream = function() {};\n    var streamWraps = sax.EVENTS.filter(function(ev) {\n        return ev !== \"error\" && ev !== \"end\";\n    });\n    function createStream(strict, opt) {\n        return new SAXStream(strict, opt);\n    }\n    function SAXStream(strict, opt) {\n        if (!(this instanceof SAXStream)) {\n            return new SAXStream(strict, opt);\n        }\n        Stream.apply(this);\n        this._parser = new SAXParser(strict, opt);\n        this.writable = true;\n        this.readable = true;\n        var me = this;\n        this._parser.onend = function() {\n            me.emit(\"end\");\n        };\n        this._parser.onerror = function(er) {\n            me.emit(\"error\", er);\n            // if didn't throw, then means error was handled.\n            // go ahead and clear error, so we can write again.\n            me._parser.error = null;\n        };\n        this._decoder = null;\n        streamWraps.forEach(function(ev) {\n            Object.defineProperty(me, \"on\" + ev, {\n                get: function() {\n                    return me._parser[\"on\" + ev];\n                },\n                set: function(h) {\n                    if (!h) {\n                        me.removeAllListeners(ev);\n                        me._parser[\"on\" + ev] = h;\n                        return h;\n                    }\n                    me.on(ev, h);\n                },\n                enumerable: true,\n                configurable: false\n            });\n        });\n    }\n    SAXStream.prototype = Object.create(Stream.prototype, {\n        constructor: {\n            value: SAXStream\n        }\n    });\n    SAXStream.prototype.write = function(data) {\n        if (typeof Buffer === \"function\" && typeof Buffer.isBuffer === \"function\" && Buffer.isBuffer(data)) {\n            if (!this._decoder) {\n                var SD = (__webpack_require__(/*! string_decoder */ \"string_decoder\").StringDecoder);\n                this._decoder = new SD(\"utf8\");\n            }\n            data = this._decoder.write(data);\n        }\n        this._parser.write(data.toString());\n        this.emit(\"data\", data);\n        return true;\n    };\n    SAXStream.prototype.end = function(chunk) {\n        if (chunk && chunk.length) {\n            this.write(chunk);\n        }\n        this._parser.end();\n        return true;\n    };\n    SAXStream.prototype.on = function(ev, handler) {\n        var me = this;\n        if (!me._parser[\"on\" + ev] && streamWraps.indexOf(ev) !== -1) {\n            me._parser[\"on\" + ev] = function() {\n                var args = arguments.length === 1 ? [\n                    arguments[0]\n                ] : Array.apply(null, arguments);\n                args.splice(0, 0, ev);\n                me.emit.apply(me, args);\n            };\n        }\n        return Stream.prototype.on.call(me, ev, handler);\n    };\n    // this really needs to be replaced with character classes.\n    // XML allows all manner of ridiculous numbers and digits.\n    var CDATA = \"[CDATA[\";\n    var DOCTYPE = \"DOCTYPE\";\n    var XML_NAMESPACE = \"http://www.w3.org/XML/1998/namespace\";\n    var XMLNS_NAMESPACE = \"http://www.w3.org/2000/xmlns/\";\n    var rootNS = {\n        xml: XML_NAMESPACE,\n        xmlns: XMLNS_NAMESPACE\n    };\n    // http://www.w3.org/TR/REC-xml/#NT-NameStartChar\n    // This implementation works on strings, a single character at a time\n    // as such, it cannot ever support astral-plane characters (10000-EFFFF)\n    // without a significant breaking change to either this  parser, or the\n    // JavaScript language.  Implementation of an emoji-capable xml parser\n    // is left as an exercise for the reader.\n    var nameStart = /[:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/;\n    var nameBody = /[:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u00B7\\u0300-\\u036F\\u203F-\\u2040.\\d-]/;\n    var entityStart = /[#:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/;\n    var entityBody = /[#:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u00B7\\u0300-\\u036F\\u203F-\\u2040.\\d-]/;\n    function isWhitespace(c) {\n        return c === \" \" || c === \"\\n\" || c === \"\\r\" || c === \"\t\";\n    }\n    function isQuote(c) {\n        return c === '\"' || c === \"'\";\n    }\n    function isAttribEnd(c) {\n        return c === \">\" || isWhitespace(c);\n    }\n    function isMatch(regex, c) {\n        return regex.test(c);\n    }\n    function notMatch(regex, c) {\n        return !isMatch(regex, c);\n    }\n    var S = 0;\n    sax.STATE = {\n        BEGIN: S++,\n        BEGIN_WHITESPACE: S++,\n        TEXT: S++,\n        TEXT_ENTITY: S++,\n        OPEN_WAKA: S++,\n        SGML_DECL: S++,\n        SGML_DECL_QUOTED: S++,\n        DOCTYPE: S++,\n        DOCTYPE_QUOTED: S++,\n        DOCTYPE_DTD: S++,\n        DOCTYPE_DTD_QUOTED: S++,\n        COMMENT_STARTING: S++,\n        COMMENT: S++,\n        COMMENT_ENDING: S++,\n        COMMENT_ENDED: S++,\n        CDATA: S++,\n        CDATA_ENDING: S++,\n        CDATA_ENDING_2: S++,\n        PROC_INST: S++,\n        PROC_INST_BODY: S++,\n        PROC_INST_ENDING: S++,\n        OPEN_TAG: S++,\n        OPEN_TAG_SLASH: S++,\n        ATTRIB: S++,\n        ATTRIB_NAME: S++,\n        ATTRIB_NAME_SAW_WHITE: S++,\n        ATTRIB_VALUE: S++,\n        ATTRIB_VALUE_QUOTED: S++,\n        ATTRIB_VALUE_CLOSED: S++,\n        ATTRIB_VALUE_UNQUOTED: S++,\n        ATTRIB_VALUE_ENTITY_Q: S++,\n        ATTRIB_VALUE_ENTITY_U: S++,\n        CLOSE_TAG: S++,\n        CLOSE_TAG_SAW_WHITE: S++,\n        SCRIPT: S++,\n        SCRIPT_ENDING: S++ // <script> ... <\n    };\n    sax.XML_ENTITIES = {\n        \"amp\": \"&\",\n        \"gt\": \">\",\n        \"lt\": \"<\",\n        \"quot\": '\"',\n        \"apos\": \"'\"\n    };\n    sax.ENTITIES = {\n        \"amp\": \"&\",\n        \"gt\": \">\",\n        \"lt\": \"<\",\n        \"quot\": '\"',\n        \"apos\": \"'\",\n        \"AElig\": 198,\n        \"Aacute\": 193,\n        \"Acirc\": 194,\n        \"Agrave\": 192,\n        \"Aring\": 197,\n        \"Atilde\": 195,\n        \"Auml\": 196,\n        \"Ccedil\": 199,\n        \"ETH\": 208,\n        \"Eacute\": 201,\n        \"Ecirc\": 202,\n        \"Egrave\": 200,\n        \"Euml\": 203,\n        \"Iacute\": 205,\n        \"Icirc\": 206,\n        \"Igrave\": 204,\n        \"Iuml\": 207,\n        \"Ntilde\": 209,\n        \"Oacute\": 211,\n        \"Ocirc\": 212,\n        \"Ograve\": 210,\n        \"Oslash\": 216,\n        \"Otilde\": 213,\n        \"Ouml\": 214,\n        \"THORN\": 222,\n        \"Uacute\": 218,\n        \"Ucirc\": 219,\n        \"Ugrave\": 217,\n        \"Uuml\": 220,\n        \"Yacute\": 221,\n        \"aacute\": 225,\n        \"acirc\": 226,\n        \"aelig\": 230,\n        \"agrave\": 224,\n        \"aring\": 229,\n        \"atilde\": 227,\n        \"auml\": 228,\n        \"ccedil\": 231,\n        \"eacute\": 233,\n        \"ecirc\": 234,\n        \"egrave\": 232,\n        \"eth\": 240,\n        \"euml\": 235,\n        \"iacute\": 237,\n        \"icirc\": 238,\n        \"igrave\": 236,\n        \"iuml\": 239,\n        \"ntilde\": 241,\n        \"oacute\": 243,\n        \"ocirc\": 244,\n        \"ograve\": 242,\n        \"oslash\": 248,\n        \"otilde\": 245,\n        \"ouml\": 246,\n        \"szlig\": 223,\n        \"thorn\": 254,\n        \"uacute\": 250,\n        \"ucirc\": 251,\n        \"ugrave\": 249,\n        \"uuml\": 252,\n        \"yacute\": 253,\n        \"yuml\": 255,\n        \"copy\": 169,\n        \"reg\": 174,\n        \"nbsp\": 160,\n        \"iexcl\": 161,\n        \"cent\": 162,\n        \"pound\": 163,\n        \"curren\": 164,\n        \"yen\": 165,\n        \"brvbar\": 166,\n        \"sect\": 167,\n        \"uml\": 168,\n        \"ordf\": 170,\n        \"laquo\": 171,\n        \"not\": 172,\n        \"shy\": 173,\n        \"macr\": 175,\n        \"deg\": 176,\n        \"plusmn\": 177,\n        \"sup1\": 185,\n        \"sup2\": 178,\n        \"sup3\": 179,\n        \"acute\": 180,\n        \"micro\": 181,\n        \"para\": 182,\n        \"middot\": 183,\n        \"cedil\": 184,\n        \"ordm\": 186,\n        \"raquo\": 187,\n        \"frac14\": 188,\n        \"frac12\": 189,\n        \"frac34\": 190,\n        \"iquest\": 191,\n        \"times\": 215,\n        \"divide\": 247,\n        \"OElig\": 338,\n        \"oelig\": 339,\n        \"Scaron\": 352,\n        \"scaron\": 353,\n        \"Yuml\": 376,\n        \"fnof\": 402,\n        \"circ\": 710,\n        \"tilde\": 732,\n        \"Alpha\": 913,\n        \"Beta\": 914,\n        \"Gamma\": 915,\n        \"Delta\": 916,\n        \"Epsilon\": 917,\n        \"Zeta\": 918,\n        \"Eta\": 919,\n        \"Theta\": 920,\n        \"Iota\": 921,\n        \"Kappa\": 922,\n        \"Lambda\": 923,\n        \"Mu\": 924,\n        \"Nu\": 925,\n        \"Xi\": 926,\n        \"Omicron\": 927,\n        \"Pi\": 928,\n        \"Rho\": 929,\n        \"Sigma\": 931,\n        \"Tau\": 932,\n        \"Upsilon\": 933,\n        \"Phi\": 934,\n        \"Chi\": 935,\n        \"Psi\": 936,\n        \"Omega\": 937,\n        \"alpha\": 945,\n        \"beta\": 946,\n        \"gamma\": 947,\n        \"delta\": 948,\n        \"epsilon\": 949,\n        \"zeta\": 950,\n        \"eta\": 951,\n        \"theta\": 952,\n        \"iota\": 953,\n        \"kappa\": 954,\n        \"lambda\": 955,\n        \"mu\": 956,\n        \"nu\": 957,\n        \"xi\": 958,\n        \"omicron\": 959,\n        \"pi\": 960,\n        \"rho\": 961,\n        \"sigmaf\": 962,\n        \"sigma\": 963,\n        \"tau\": 964,\n        \"upsilon\": 965,\n        \"phi\": 966,\n        \"chi\": 967,\n        \"psi\": 968,\n        \"omega\": 969,\n        \"thetasym\": 977,\n        \"upsih\": 978,\n        \"piv\": 982,\n        \"ensp\": 8194,\n        \"emsp\": 8195,\n        \"thinsp\": 8201,\n        \"zwnj\": 8204,\n        \"zwj\": 8205,\n        \"lrm\": 8206,\n        \"rlm\": 8207,\n        \"ndash\": 8211,\n        \"mdash\": 8212,\n        \"lsquo\": 8216,\n        \"rsquo\": 8217,\n        \"sbquo\": 8218,\n        \"ldquo\": 8220,\n        \"rdquo\": 8221,\n        \"bdquo\": 8222,\n        \"dagger\": 8224,\n        \"Dagger\": 8225,\n        \"bull\": 8226,\n        \"hellip\": 8230,\n        \"permil\": 8240,\n        \"prime\": 8242,\n        \"Prime\": 8243,\n        \"lsaquo\": 8249,\n        \"rsaquo\": 8250,\n        \"oline\": 8254,\n        \"frasl\": 8260,\n        \"euro\": 8364,\n        \"image\": 8465,\n        \"weierp\": 8472,\n        \"real\": 8476,\n        \"trade\": 8482,\n        \"alefsym\": 8501,\n        \"larr\": 8592,\n        \"uarr\": 8593,\n        \"rarr\": 8594,\n        \"darr\": 8595,\n        \"harr\": 8596,\n        \"crarr\": 8629,\n        \"lArr\": 8656,\n        \"uArr\": 8657,\n        \"rArr\": 8658,\n        \"dArr\": 8659,\n        \"hArr\": 8660,\n        \"forall\": 8704,\n        \"part\": 8706,\n        \"exist\": 8707,\n        \"empty\": 8709,\n        \"nabla\": 8711,\n        \"isin\": 8712,\n        \"notin\": 8713,\n        \"ni\": 8715,\n        \"prod\": 8719,\n        \"sum\": 8721,\n        \"minus\": 8722,\n        \"lowast\": 8727,\n        \"radic\": 8730,\n        \"prop\": 8733,\n        \"infin\": 8734,\n        \"ang\": 8736,\n        \"and\": 8743,\n        \"or\": 8744,\n        \"cap\": 8745,\n        \"cup\": 8746,\n        \"int\": 8747,\n        \"there4\": 8756,\n        \"sim\": 8764,\n        \"cong\": 8773,\n        \"asymp\": 8776,\n        \"ne\": 8800,\n        \"equiv\": 8801,\n        \"le\": 8804,\n        \"ge\": 8805,\n        \"sub\": 8834,\n        \"sup\": 8835,\n        \"nsub\": 8836,\n        \"sube\": 8838,\n        \"supe\": 8839,\n        \"oplus\": 8853,\n        \"otimes\": 8855,\n        \"perp\": 8869,\n        \"sdot\": 8901,\n        \"lceil\": 8968,\n        \"rceil\": 8969,\n        \"lfloor\": 8970,\n        \"rfloor\": 8971,\n        \"lang\": 9001,\n        \"rang\": 9002,\n        \"loz\": 9674,\n        \"spades\": 9824,\n        \"clubs\": 9827,\n        \"hearts\": 9829,\n        \"diams\": 9830\n    };\n    Object.keys(sax.ENTITIES).forEach(function(key) {\n        var e = sax.ENTITIES[key];\n        var s = typeof e === \"number\" ? String.fromCharCode(e) : e;\n        sax.ENTITIES[key] = s;\n    });\n    for(var s in sax.STATE){\n        sax.STATE[sax.STATE[s]] = s;\n    }\n    // shorthand\n    S = sax.STATE;\n    function emit(parser, event, data) {\n        parser[event] && parser[event](data);\n    }\n    function emitNode(parser, nodeType, data) {\n        if (parser.textNode) closeText(parser);\n        emit(parser, nodeType, data);\n    }\n    function closeText(parser) {\n        parser.textNode = textopts(parser.opt, parser.textNode);\n        if (parser.textNode) emit(parser, \"ontext\", parser.textNode);\n        parser.textNode = \"\";\n    }\n    function textopts(opt, text) {\n        if (opt.trim) text = text.trim();\n        if (opt.normalize) text = text.replace(/\\s+/g, \" \");\n        return text;\n    }\n    function error(parser, er) {\n        closeText(parser);\n        if (parser.trackPosition) {\n            er += \"\\nLine: \" + parser.line + \"\\nColumn: \" + parser.column + \"\\nChar: \" + parser.c;\n        }\n        er = new Error(er);\n        parser.error = er;\n        emit(parser, \"onerror\", er);\n        return parser;\n    }\n    function end(parser) {\n        if (parser.sawRoot && !parser.closedRoot) strictFail(parser, \"Unclosed root tag\");\n        if (parser.state !== S.BEGIN && parser.state !== S.BEGIN_WHITESPACE && parser.state !== S.TEXT) {\n            error(parser, \"Unexpected end\");\n        }\n        closeText(parser);\n        parser.c = \"\";\n        parser.closed = true;\n        emit(parser, \"onend\");\n        SAXParser.call(parser, parser.strict, parser.opt);\n        return parser;\n    }\n    function strictFail(parser, message) {\n        if (typeof parser !== \"object\" || !(parser instanceof SAXParser)) {\n            throw new Error(\"bad call to strictFail\");\n        }\n        if (parser.strict) {\n            error(parser, message);\n        }\n    }\n    function newTag(parser) {\n        if (!parser.strict) parser.tagName = parser.tagName[parser.looseCase]();\n        var parent = parser.tags[parser.tags.length - 1] || parser;\n        var tag = parser.tag = {\n            name: parser.tagName,\n            attributes: {}\n        };\n        // will be overridden if tag contails an xmlns=\"foo\" or xmlns:foo=\"bar\"\n        if (parser.opt.xmlns) {\n            tag.ns = parent.ns;\n        }\n        parser.attribList.length = 0;\n        emitNode(parser, \"onopentagstart\", tag);\n    }\n    function qname(name, attribute) {\n        var i = name.indexOf(\":\");\n        var qualName = i < 0 ? [\n            \"\",\n            name\n        ] : name.split(\":\");\n        var prefix = qualName[0];\n        var local = qualName[1];\n        // <x \"xmlns\"=\"http://foo\">\n        if (attribute && name === \"xmlns\") {\n            prefix = \"xmlns\";\n            local = \"\";\n        }\n        return {\n            prefix: prefix,\n            local: local\n        };\n    }\n    function attrib(parser) {\n        if (!parser.strict) {\n            parser.attribName = parser.attribName[parser.looseCase]();\n        }\n        if (parser.attribList.indexOf(parser.attribName) !== -1 || parser.tag.attributes.hasOwnProperty(parser.attribName)) {\n            parser.attribName = parser.attribValue = \"\";\n            return;\n        }\n        if (parser.opt.xmlns) {\n            var qn = qname(parser.attribName, true);\n            var prefix = qn.prefix;\n            var local = qn.local;\n            if (prefix === \"xmlns\") {\n                // namespace binding attribute. push the binding into scope\n                if (local === \"xml\" && parser.attribValue !== XML_NAMESPACE) {\n                    strictFail(parser, \"xml: prefix must be bound to \" + XML_NAMESPACE + \"\\n\" + \"Actual: \" + parser.attribValue);\n                } else if (local === \"xmlns\" && parser.attribValue !== XMLNS_NAMESPACE) {\n                    strictFail(parser, \"xmlns: prefix must be bound to \" + XMLNS_NAMESPACE + \"\\n\" + \"Actual: \" + parser.attribValue);\n                } else {\n                    var tag = parser.tag;\n                    var parent = parser.tags[parser.tags.length - 1] || parser;\n                    if (tag.ns === parent.ns) {\n                        tag.ns = Object.create(parent.ns);\n                    }\n                    tag.ns[local] = parser.attribValue;\n                }\n            }\n            // defer onattribute events until all attributes have been seen\n            // so any new bindings can take effect. preserve attribute order\n            // so deferred events can be emitted in document order\n            parser.attribList.push([\n                parser.attribName,\n                parser.attribValue\n            ]);\n        } else {\n            // in non-xmlns mode, we can emit the event right away\n            parser.tag.attributes[parser.attribName] = parser.attribValue;\n            emitNode(parser, \"onattribute\", {\n                name: parser.attribName,\n                value: parser.attribValue\n            });\n        }\n        parser.attribName = parser.attribValue = \"\";\n    }\n    function openTag(parser, selfClosing) {\n        if (parser.opt.xmlns) {\n            // emit namespace binding events\n            var tag = parser.tag;\n            // add namespace info to tag\n            var qn = qname(parser.tagName);\n            tag.prefix = qn.prefix;\n            tag.local = qn.local;\n            tag.uri = tag.ns[qn.prefix] || \"\";\n            if (tag.prefix && !tag.uri) {\n                strictFail(parser, \"Unbound namespace prefix: \" + JSON.stringify(parser.tagName));\n                tag.uri = qn.prefix;\n            }\n            var parent = parser.tags[parser.tags.length - 1] || parser;\n            if (tag.ns && parent.ns !== tag.ns) {\n                Object.keys(tag.ns).forEach(function(p) {\n                    emitNode(parser, \"onopennamespace\", {\n                        prefix: p,\n                        uri: tag.ns[p]\n                    });\n                });\n            }\n            // handle deferred onattribute events\n            // Note: do not apply default ns to attributes:\n            //   http://www.w3.org/TR/REC-xml-names/#defaulting\n            for(var i = 0, l = parser.attribList.length; i < l; i++){\n                var nv = parser.attribList[i];\n                var name = nv[0];\n                var value = nv[1];\n                var qualName = qname(name, true);\n                var prefix = qualName.prefix;\n                var local = qualName.local;\n                var uri = prefix === \"\" ? \"\" : tag.ns[prefix] || \"\";\n                var a = {\n                    name: name,\n                    value: value,\n                    prefix: prefix,\n                    local: local,\n                    uri: uri\n                };\n                // if there's any attributes with an undefined namespace,\n                // then fail on them now.\n                if (prefix && prefix !== \"xmlns\" && !uri) {\n                    strictFail(parser, \"Unbound namespace prefix: \" + JSON.stringify(prefix));\n                    a.uri = prefix;\n                }\n                parser.tag.attributes[name] = a;\n                emitNode(parser, \"onattribute\", a);\n            }\n            parser.attribList.length = 0;\n        }\n        parser.tag.isSelfClosing = !!selfClosing;\n        // process the tag\n        parser.sawRoot = true;\n        parser.tags.push(parser.tag);\n        emitNode(parser, \"onopentag\", parser.tag);\n        if (!selfClosing) {\n            // special case for <script> in non-strict mode.\n            if (!parser.noscript && parser.tagName.toLowerCase() === \"script\") {\n                parser.state = S.SCRIPT;\n            } else {\n                parser.state = S.TEXT;\n            }\n            parser.tag = null;\n            parser.tagName = \"\";\n        }\n        parser.attribName = parser.attribValue = \"\";\n        parser.attribList.length = 0;\n    }\n    function closeTag(parser) {\n        if (!parser.tagName) {\n            strictFail(parser, \"Weird empty close tag.\");\n            parser.textNode += \"</>\";\n            parser.state = S.TEXT;\n            return;\n        }\n        if (parser.script) {\n            if (parser.tagName !== \"script\") {\n                parser.script += \"</\" + parser.tagName + \">\";\n                parser.tagName = \"\";\n                parser.state = S.SCRIPT;\n                return;\n            }\n            emitNode(parser, \"onscript\", parser.script);\n            parser.script = \"\";\n        }\n        // first make sure that the closing tag actually exists.\n        // <a><b></c></b></a> will close everything, otherwise.\n        var t = parser.tags.length;\n        var tagName = parser.tagName;\n        if (!parser.strict) {\n            tagName = tagName[parser.looseCase]();\n        }\n        var closeTo = tagName;\n        while(t--){\n            var close = parser.tags[t];\n            if (close.name !== closeTo) {\n                // fail the first time in strict mode\n                strictFail(parser, \"Unexpected close tag\");\n            } else {\n                break;\n            }\n        }\n        // didn't find it.  we already failed for strict, so just abort.\n        if (t < 0) {\n            strictFail(parser, \"Unmatched closing tag: \" + parser.tagName);\n            parser.textNode += \"</\" + parser.tagName + \">\";\n            parser.state = S.TEXT;\n            return;\n        }\n        parser.tagName = tagName;\n        var s = parser.tags.length;\n        while(s-- > t){\n            var tag = parser.tag = parser.tags.pop();\n            parser.tagName = parser.tag.name;\n            emitNode(parser, \"onclosetag\", parser.tagName);\n            var x = {};\n            for(var i in tag.ns){\n                x[i] = tag.ns[i];\n            }\n            var parent = parser.tags[parser.tags.length - 1] || parser;\n            if (parser.opt.xmlns && tag.ns !== parent.ns) {\n                // remove namespace bindings introduced by tag\n                Object.keys(tag.ns).forEach(function(p) {\n                    var n = tag.ns[p];\n                    emitNode(parser, \"onclosenamespace\", {\n                        prefix: p,\n                        uri: n\n                    });\n                });\n            }\n        }\n        if (t === 0) parser.closedRoot = true;\n        parser.tagName = parser.attribValue = parser.attribName = \"\";\n        parser.attribList.length = 0;\n        parser.state = S.TEXT;\n    }\n    function parseEntity(parser) {\n        var entity = parser.entity;\n        var entityLC = entity.toLowerCase();\n        var num;\n        var numStr = \"\";\n        if (parser.ENTITIES[entity]) {\n            return parser.ENTITIES[entity];\n        }\n        if (parser.ENTITIES[entityLC]) {\n            return parser.ENTITIES[entityLC];\n        }\n        entity = entityLC;\n        if (entity.charAt(0) === \"#\") {\n            if (entity.charAt(1) === \"x\") {\n                entity = entity.slice(2);\n                num = parseInt(entity, 16);\n                numStr = num.toString(16);\n            } else {\n                entity = entity.slice(1);\n                num = parseInt(entity, 10);\n                numStr = num.toString(10);\n            }\n        }\n        entity = entity.replace(/^0+/, \"\");\n        if (isNaN(num) || numStr.toLowerCase() !== entity) {\n            strictFail(parser, \"Invalid character entity\");\n            return \"&\" + parser.entity + \";\";\n        }\n        return String.fromCodePoint(num);\n    }\n    function beginWhiteSpace(parser, c) {\n        if (c === \"<\") {\n            parser.state = S.OPEN_WAKA;\n            parser.startTagPosition = parser.position;\n        } else if (!isWhitespace(c)) {\n            // have to process this as a text node.\n            // weird, but happens.\n            strictFail(parser, \"Non-whitespace before first tag.\");\n            parser.textNode = c;\n            parser.state = S.TEXT;\n        }\n    }\n    function charAt(chunk, i) {\n        var result = \"\";\n        if (i < chunk.length) {\n            result = chunk.charAt(i);\n        }\n        return result;\n    }\n    function write(chunk) {\n        var parser = this;\n        if (this.error) {\n            throw this.error;\n        }\n        if (parser.closed) {\n            return error(parser, \"Cannot write after close. Assign an onready handler.\");\n        }\n        if (chunk === null) {\n            return end(parser);\n        }\n        if (typeof chunk === \"object\") {\n            chunk = chunk.toString();\n        }\n        var i = 0;\n        var c = \"\";\n        while(true){\n            c = charAt(chunk, i++);\n            parser.c = c;\n            if (!c) {\n                break;\n            }\n            if (parser.trackPosition) {\n                parser.position++;\n                if (c === \"\\n\") {\n                    parser.line++;\n                    parser.column = 0;\n                } else {\n                    parser.column++;\n                }\n            }\n            switch(parser.state){\n                case S.BEGIN:\n                    parser.state = S.BEGIN_WHITESPACE;\n                    if (c === \"\\uFEFF\") {\n                        continue;\n                    }\n                    beginWhiteSpace(parser, c);\n                    continue;\n                case S.BEGIN_WHITESPACE:\n                    beginWhiteSpace(parser, c);\n                    continue;\n                case S.TEXT:\n                    if (parser.sawRoot && !parser.closedRoot) {\n                        var starti = i - 1;\n                        while(c && c !== \"<\" && c !== \"&\"){\n                            c = charAt(chunk, i++);\n                            if (c && parser.trackPosition) {\n                                parser.position++;\n                                if (c === \"\\n\") {\n                                    parser.line++;\n                                    parser.column = 0;\n                                } else {\n                                    parser.column++;\n                                }\n                            }\n                        }\n                        parser.textNode += chunk.substring(starti, i - 1);\n                    }\n                    if (c === \"<\" && !(parser.sawRoot && parser.closedRoot && !parser.strict)) {\n                        parser.state = S.OPEN_WAKA;\n                        parser.startTagPosition = parser.position;\n                    } else {\n                        if (!isWhitespace(c) && (!parser.sawRoot || parser.closedRoot)) {\n                            strictFail(parser, \"Text data outside of root node.\");\n                        }\n                        if (c === \"&\") {\n                            parser.state = S.TEXT_ENTITY;\n                        } else {\n                            parser.textNode += c;\n                        }\n                    }\n                    continue;\n                case S.SCRIPT:\n                    // only non-strict\n                    if (c === \"<\") {\n                        parser.state = S.SCRIPT_ENDING;\n                    } else {\n                        parser.script += c;\n                    }\n                    continue;\n                case S.SCRIPT_ENDING:\n                    if (c === \"/\") {\n                        parser.state = S.CLOSE_TAG;\n                    } else {\n                        parser.script += \"<\" + c;\n                        parser.state = S.SCRIPT;\n                    }\n                    continue;\n                case S.OPEN_WAKA:\n                    // either a /, ?, !, or text is coming next.\n                    if (c === \"!\") {\n                        parser.state = S.SGML_DECL;\n                        parser.sgmlDecl = \"\";\n                    } else if (isWhitespace(c)) {\n                    // wait for it...\n                    } else if (isMatch(nameStart, c)) {\n                        parser.state = S.OPEN_TAG;\n                        parser.tagName = c;\n                    } else if (c === \"/\") {\n                        parser.state = S.CLOSE_TAG;\n                        parser.tagName = \"\";\n                    } else if (c === \"?\") {\n                        parser.state = S.PROC_INST;\n                        parser.procInstName = parser.procInstBody = \"\";\n                    } else {\n                        strictFail(parser, \"Unencoded <\");\n                        // if there was some whitespace, then add that in.\n                        if (parser.startTagPosition + 1 < parser.position) {\n                            var pad = parser.position - parser.startTagPosition;\n                            c = new Array(pad).join(\" \") + c;\n                        }\n                        parser.textNode += \"<\" + c;\n                        parser.state = S.TEXT;\n                    }\n                    continue;\n                case S.SGML_DECL:\n                    if (parser.sgmlDecl + c === \"--\") {\n                        parser.state = S.COMMENT;\n                        parser.comment = \"\";\n                        parser.sgmlDecl = \"\";\n                        continue;\n                    }\n                    if (parser.doctype && parser.doctype !== true && parser.sgmlDecl) {\n                        parser.state = S.DOCTYPE_DTD;\n                        parser.doctype += \"<!\" + parser.sgmlDecl + c;\n                        parser.sgmlDecl = \"\";\n                    } else if ((parser.sgmlDecl + c).toUpperCase() === CDATA) {\n                        emitNode(parser, \"onopencdata\");\n                        parser.state = S.CDATA;\n                        parser.sgmlDecl = \"\";\n                        parser.cdata = \"\";\n                    } else if ((parser.sgmlDecl + c).toUpperCase() === DOCTYPE) {\n                        parser.state = S.DOCTYPE;\n                        if (parser.doctype || parser.sawRoot) {\n                            strictFail(parser, \"Inappropriately located doctype declaration\");\n                        }\n                        parser.doctype = \"\";\n                        parser.sgmlDecl = \"\";\n                    } else if (c === \">\") {\n                        emitNode(parser, \"onsgmldeclaration\", parser.sgmlDecl);\n                        parser.sgmlDecl = \"\";\n                        parser.state = S.TEXT;\n                    } else if (isQuote(c)) {\n                        parser.state = S.SGML_DECL_QUOTED;\n                        parser.sgmlDecl += c;\n                    } else {\n                        parser.sgmlDecl += c;\n                    }\n                    continue;\n                case S.SGML_DECL_QUOTED:\n                    if (c === parser.q) {\n                        parser.state = S.SGML_DECL;\n                        parser.q = \"\";\n                    }\n                    parser.sgmlDecl += c;\n                    continue;\n                case S.DOCTYPE:\n                    if (c === \">\") {\n                        parser.state = S.TEXT;\n                        emitNode(parser, \"ondoctype\", parser.doctype);\n                        parser.doctype = true // just remember that we saw it.\n                        ;\n                    } else {\n                        parser.doctype += c;\n                        if (c === \"[\") {\n                            parser.state = S.DOCTYPE_DTD;\n                        } else if (isQuote(c)) {\n                            parser.state = S.DOCTYPE_QUOTED;\n                            parser.q = c;\n                        }\n                    }\n                    continue;\n                case S.DOCTYPE_QUOTED:\n                    parser.doctype += c;\n                    if (c === parser.q) {\n                        parser.q = \"\";\n                        parser.state = S.DOCTYPE;\n                    }\n                    continue;\n                case S.DOCTYPE_DTD:\n                    if (c === \"]\") {\n                        parser.doctype += c;\n                        parser.state = S.DOCTYPE;\n                    } else if (c === \"<\") {\n                        parser.state = S.OPEN_WAKA;\n                        parser.startTagPosition = parser.position;\n                    } else if (isQuote(c)) {\n                        parser.doctype += c;\n                        parser.state = S.DOCTYPE_DTD_QUOTED;\n                        parser.q = c;\n                    } else {\n                        parser.doctype += c;\n                    }\n                    continue;\n                case S.DOCTYPE_DTD_QUOTED:\n                    parser.doctype += c;\n                    if (c === parser.q) {\n                        parser.state = S.DOCTYPE_DTD;\n                        parser.q = \"\";\n                    }\n                    continue;\n                case S.COMMENT:\n                    if (c === \"-\") {\n                        parser.state = S.COMMENT_ENDING;\n                    } else {\n                        parser.comment += c;\n                    }\n                    continue;\n                case S.COMMENT_ENDING:\n                    if (c === \"-\") {\n                        parser.state = S.COMMENT_ENDED;\n                        parser.comment = textopts(parser.opt, parser.comment);\n                        if (parser.comment) {\n                            emitNode(parser, \"oncomment\", parser.comment);\n                        }\n                        parser.comment = \"\";\n                    } else {\n                        parser.comment += \"-\" + c;\n                        parser.state = S.COMMENT;\n                    }\n                    continue;\n                case S.COMMENT_ENDED:\n                    if (c !== \">\") {\n                        strictFail(parser, \"Malformed comment\");\n                        // allow <!-- blah -- bloo --> in non-strict mode,\n                        // which is a comment of \" blah -- bloo \"\n                        parser.comment += \"--\" + c;\n                        parser.state = S.COMMENT;\n                    } else if (parser.doctype && parser.doctype !== true) {\n                        parser.state = S.DOCTYPE_DTD;\n                    } else {\n                        parser.state = S.TEXT;\n                    }\n                    continue;\n                case S.CDATA:\n                    if (c === \"]\") {\n                        parser.state = S.CDATA_ENDING;\n                    } else {\n                        parser.cdata += c;\n                    }\n                    continue;\n                case S.CDATA_ENDING:\n                    if (c === \"]\") {\n                        parser.state = S.CDATA_ENDING_2;\n                    } else {\n                        parser.cdata += \"]\" + c;\n                        parser.state = S.CDATA;\n                    }\n                    continue;\n                case S.CDATA_ENDING_2:\n                    if (c === \">\") {\n                        if (parser.cdata) {\n                            emitNode(parser, \"oncdata\", parser.cdata);\n                        }\n                        emitNode(parser, \"onclosecdata\");\n                        parser.cdata = \"\";\n                        parser.state = S.TEXT;\n                    } else if (c === \"]\") {\n                        parser.cdata += \"]\";\n                    } else {\n                        parser.cdata += \"]]\" + c;\n                        parser.state = S.CDATA;\n                    }\n                    continue;\n                case S.PROC_INST:\n                    if (c === \"?\") {\n                        parser.state = S.PROC_INST_ENDING;\n                    } else if (isWhitespace(c)) {\n                        parser.state = S.PROC_INST_BODY;\n                    } else {\n                        parser.procInstName += c;\n                    }\n                    continue;\n                case S.PROC_INST_BODY:\n                    if (!parser.procInstBody && isWhitespace(c)) {\n                        continue;\n                    } else if (c === \"?\") {\n                        parser.state = S.PROC_INST_ENDING;\n                    } else {\n                        parser.procInstBody += c;\n                    }\n                    continue;\n                case S.PROC_INST_ENDING:\n                    if (c === \">\") {\n                        emitNode(parser, \"onprocessinginstruction\", {\n                            name: parser.procInstName,\n                            body: parser.procInstBody\n                        });\n                        parser.procInstName = parser.procInstBody = \"\";\n                        parser.state = S.TEXT;\n                    } else {\n                        parser.procInstBody += \"?\" + c;\n                        parser.state = S.PROC_INST_BODY;\n                    }\n                    continue;\n                case S.OPEN_TAG:\n                    if (isMatch(nameBody, c)) {\n                        parser.tagName += c;\n                    } else {\n                        newTag(parser);\n                        if (c === \">\") {\n                            openTag(parser);\n                        } else if (c === \"/\") {\n                            parser.state = S.OPEN_TAG_SLASH;\n                        } else {\n                            if (!isWhitespace(c)) {\n                                strictFail(parser, \"Invalid character in tag name\");\n                            }\n                            parser.state = S.ATTRIB;\n                        }\n                    }\n                    continue;\n                case S.OPEN_TAG_SLASH:\n                    if (c === \">\") {\n                        openTag(parser, true);\n                        closeTag(parser);\n                    } else {\n                        strictFail(parser, \"Forward-slash in opening tag not followed by >\");\n                        parser.state = S.ATTRIB;\n                    }\n                    continue;\n                case S.ATTRIB:\n                    // haven't read the attribute name yet.\n                    if (isWhitespace(c)) {\n                        continue;\n                    } else if (c === \">\") {\n                        openTag(parser);\n                    } else if (c === \"/\") {\n                        parser.state = S.OPEN_TAG_SLASH;\n                    } else if (isMatch(nameStart, c)) {\n                        parser.attribName = c;\n                        parser.attribValue = \"\";\n                        parser.state = S.ATTRIB_NAME;\n                    } else {\n                        strictFail(parser, \"Invalid attribute name\");\n                    }\n                    continue;\n                case S.ATTRIB_NAME:\n                    if (c === \"=\") {\n                        parser.state = S.ATTRIB_VALUE;\n                    } else if (c === \">\") {\n                        strictFail(parser, \"Attribute without value\");\n                        parser.attribValue = parser.attribName;\n                        attrib(parser);\n                        openTag(parser);\n                    } else if (isWhitespace(c)) {\n                        parser.state = S.ATTRIB_NAME_SAW_WHITE;\n                    } else if (isMatch(nameBody, c)) {\n                        parser.attribName += c;\n                    } else {\n                        strictFail(parser, \"Invalid attribute name\");\n                    }\n                    continue;\n                case S.ATTRIB_NAME_SAW_WHITE:\n                    if (c === \"=\") {\n                        parser.state = S.ATTRIB_VALUE;\n                    } else if (isWhitespace(c)) {\n                        continue;\n                    } else {\n                        strictFail(parser, \"Attribute without value\");\n                        parser.tag.attributes[parser.attribName] = \"\";\n                        parser.attribValue = \"\";\n                        emitNode(parser, \"onattribute\", {\n                            name: parser.attribName,\n                            value: \"\"\n                        });\n                        parser.attribName = \"\";\n                        if (c === \">\") {\n                            openTag(parser);\n                        } else if (isMatch(nameStart, c)) {\n                            parser.attribName = c;\n                            parser.state = S.ATTRIB_NAME;\n                        } else {\n                            strictFail(parser, \"Invalid attribute name\");\n                            parser.state = S.ATTRIB;\n                        }\n                    }\n                    continue;\n                case S.ATTRIB_VALUE:\n                    if (isWhitespace(c)) {\n                        continue;\n                    } else if (isQuote(c)) {\n                        parser.q = c;\n                        parser.state = S.ATTRIB_VALUE_QUOTED;\n                    } else {\n                        if (!parser.opt.unquotedAttributeValues) {\n                            error(parser, \"Unquoted attribute value\");\n                        }\n                        parser.state = S.ATTRIB_VALUE_UNQUOTED;\n                        parser.attribValue = c;\n                    }\n                    continue;\n                case S.ATTRIB_VALUE_QUOTED:\n                    if (c !== parser.q) {\n                        if (c === \"&\") {\n                            parser.state = S.ATTRIB_VALUE_ENTITY_Q;\n                        } else {\n                            parser.attribValue += c;\n                        }\n                        continue;\n                    }\n                    attrib(parser);\n                    parser.q = \"\";\n                    parser.state = S.ATTRIB_VALUE_CLOSED;\n                    continue;\n                case S.ATTRIB_VALUE_CLOSED:\n                    if (isWhitespace(c)) {\n                        parser.state = S.ATTRIB;\n                    } else if (c === \">\") {\n                        openTag(parser);\n                    } else if (c === \"/\") {\n                        parser.state = S.OPEN_TAG_SLASH;\n                    } else if (isMatch(nameStart, c)) {\n                        strictFail(parser, \"No whitespace between attributes\");\n                        parser.attribName = c;\n                        parser.attribValue = \"\";\n                        parser.state = S.ATTRIB_NAME;\n                    } else {\n                        strictFail(parser, \"Invalid attribute name\");\n                    }\n                    continue;\n                case S.ATTRIB_VALUE_UNQUOTED:\n                    if (!isAttribEnd(c)) {\n                        if (c === \"&\") {\n                            parser.state = S.ATTRIB_VALUE_ENTITY_U;\n                        } else {\n                            parser.attribValue += c;\n                        }\n                        continue;\n                    }\n                    attrib(parser);\n                    if (c === \">\") {\n                        openTag(parser);\n                    } else {\n                        parser.state = S.ATTRIB;\n                    }\n                    continue;\n                case S.CLOSE_TAG:\n                    if (!parser.tagName) {\n                        if (isWhitespace(c)) {\n                            continue;\n                        } else if (notMatch(nameStart, c)) {\n                            if (parser.script) {\n                                parser.script += \"</\" + c;\n                                parser.state = S.SCRIPT;\n                            } else {\n                                strictFail(parser, \"Invalid tagname in closing tag.\");\n                            }\n                        } else {\n                            parser.tagName = c;\n                        }\n                    } else if (c === \">\") {\n                        closeTag(parser);\n                    } else if (isMatch(nameBody, c)) {\n                        parser.tagName += c;\n                    } else if (parser.script) {\n                        parser.script += \"</\" + parser.tagName;\n                        parser.tagName = \"\";\n                        parser.state = S.SCRIPT;\n                    } else {\n                        if (!isWhitespace(c)) {\n                            strictFail(parser, \"Invalid tagname in closing tag\");\n                        }\n                        parser.state = S.CLOSE_TAG_SAW_WHITE;\n                    }\n                    continue;\n                case S.CLOSE_TAG_SAW_WHITE:\n                    if (isWhitespace(c)) {\n                        continue;\n                    }\n                    if (c === \">\") {\n                        closeTag(parser);\n                    } else {\n                        strictFail(parser, \"Invalid characters in closing tag\");\n                    }\n                    continue;\n                case S.TEXT_ENTITY:\n                case S.ATTRIB_VALUE_ENTITY_Q:\n                case S.ATTRIB_VALUE_ENTITY_U:\n                    var returnState;\n                    var buffer;\n                    switch(parser.state){\n                        case S.TEXT_ENTITY:\n                            returnState = S.TEXT;\n                            buffer = \"textNode\";\n                            break;\n                        case S.ATTRIB_VALUE_ENTITY_Q:\n                            returnState = S.ATTRIB_VALUE_QUOTED;\n                            buffer = \"attribValue\";\n                            break;\n                        case S.ATTRIB_VALUE_ENTITY_U:\n                            returnState = S.ATTRIB_VALUE_UNQUOTED;\n                            buffer = \"attribValue\";\n                            break;\n                    }\n                    if (c === \";\") {\n                        var parsedEntity = parseEntity(parser);\n                        if (parser.opt.unparsedEntities && !Object.values(sax.XML_ENTITIES).includes(parsedEntity)) {\n                            parser.entity = \"\";\n                            parser.state = returnState;\n                            parser.write(parsedEntity);\n                        } else {\n                            parser[buffer] += parsedEntity;\n                            parser.entity = \"\";\n                            parser.state = returnState;\n                        }\n                    } else if (isMatch(parser.entity.length ? entityBody : entityStart, c)) {\n                        parser.entity += c;\n                    } else {\n                        strictFail(parser, \"Invalid character in entity name\");\n                        parser[buffer] += \"&\" + parser.entity + c;\n                        parser.entity = \"\";\n                        parser.state = returnState;\n                    }\n                    continue;\n                default:\n                    /* istanbul ignore next */ {\n                        throw new Error(parser, \"Unknown state: \" + parser.state);\n                    }\n            }\n        } // while\n        if (parser.position >= parser.bufferCheckPosition) {\n            checkBufferLength(parser);\n        }\n        return parser;\n    }\n    /*! http://mths.be/fromcodepoint v0.1.0 by @mathias */ /* istanbul ignore next */ if (!String.fromCodePoint) {\n        (function() {\n            var stringFromCharCode = String.fromCharCode;\n            var floor = Math.floor;\n            var fromCodePoint = function() {\n                var MAX_SIZE = 0x4000;\n                var codeUnits = [];\n                var highSurrogate;\n                var lowSurrogate;\n                var index = -1;\n                var length = arguments.length;\n                if (!length) {\n                    return \"\";\n                }\n                var result = \"\";\n                while(++index < length){\n                    var codePoint = Number(arguments[index]);\n                    if (!isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`\n                    codePoint < 0 || // not a valid Unicode code point\n                    codePoint > 0x10FFFF || // not a valid Unicode code point\n                    floor(codePoint) !== codePoint // not an integer\n                    ) {\n                        throw RangeError(\"Invalid code point: \" + codePoint);\n                    }\n                    if (codePoint <= 0xFFFF) {\n                        codeUnits.push(codePoint);\n                    } else {\n                        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n                        codePoint -= 0x10000;\n                        highSurrogate = (codePoint >> 10) + 0xD800;\n                        lowSurrogate = codePoint % 0x400 + 0xDC00;\n                        codeUnits.push(highSurrogate, lowSurrogate);\n                    }\n                    if (index + 1 === length || codeUnits.length > MAX_SIZE) {\n                        result += stringFromCharCode.apply(null, codeUnits);\n                        codeUnits.length = 0;\n                    }\n                }\n                return result;\n            };\n            /* istanbul ignore next */ if (Object.defineProperty) {\n                Object.defineProperty(String, \"fromCodePoint\", {\n                    value: fromCodePoint,\n                    configurable: true,\n                    writable: true\n                });\n            } else {\n                String.fromCodePoint = fromCodePoint;\n            }\n        })();\n    }\n})( false ? 0 : exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/xml2js/node_modules/sax/lib/sax.js\n");

/***/ })

};
;