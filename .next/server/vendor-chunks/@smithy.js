"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@smithy";
exports.ids = ["vendor-chunks/@smithy"];
exports.modules = {

/***/ "(rsc)/./node_modules/@smithy/config-resolver/dist-cjs/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@smithy/config-resolver/dist-cjs/index.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value)=>__defProp(target, \"name\", {\n        value,\n        configurable: true\n    });\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n    CONFIG_USE_DUALSTACK_ENDPOINT: ()=>CONFIG_USE_DUALSTACK_ENDPOINT,\n    CONFIG_USE_FIPS_ENDPOINT: ()=>CONFIG_USE_FIPS_ENDPOINT,\n    DEFAULT_USE_DUALSTACK_ENDPOINT: ()=>DEFAULT_USE_DUALSTACK_ENDPOINT,\n    DEFAULT_USE_FIPS_ENDPOINT: ()=>DEFAULT_USE_FIPS_ENDPOINT,\n    ENV_USE_DUALSTACK_ENDPOINT: ()=>ENV_USE_DUALSTACK_ENDPOINT,\n    ENV_USE_FIPS_ENDPOINT: ()=>ENV_USE_FIPS_ENDPOINT,\n    NODE_REGION_CONFIG_FILE_OPTIONS: ()=>NODE_REGION_CONFIG_FILE_OPTIONS,\n    NODE_REGION_CONFIG_OPTIONS: ()=>NODE_REGION_CONFIG_OPTIONS,\n    NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS: ()=>NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS,\n    NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS: ()=>NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS,\n    REGION_ENV_NAME: ()=>REGION_ENV_NAME,\n    REGION_INI_NAME: ()=>REGION_INI_NAME,\n    getRegionInfo: ()=>getRegionInfo,\n    resolveCustomEndpointsConfig: ()=>resolveCustomEndpointsConfig,\n    resolveEndpointsConfig: ()=>resolveEndpointsConfig,\n    resolveRegionConfig: ()=>resolveRegionConfig\n});\nmodule.exports = __toCommonJS(src_exports);\n// src/endpointsConfig/NodeUseDualstackEndpointConfigOptions.ts\nvar import_util_config_provider = __webpack_require__(/*! @smithy/util-config-provider */ \"(rsc)/./node_modules/@smithy/util-config-provider/dist-cjs/index.js\");\nvar ENV_USE_DUALSTACK_ENDPOINT = \"AWS_USE_DUALSTACK_ENDPOINT\";\nvar CONFIG_USE_DUALSTACK_ENDPOINT = \"use_dualstack_endpoint\";\nvar DEFAULT_USE_DUALSTACK_ENDPOINT = false;\nvar NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS = {\n    environmentVariableSelector: (env)=>(0, import_util_config_provider.booleanSelector)(env, ENV_USE_DUALSTACK_ENDPOINT, import_util_config_provider.SelectorType.ENV),\n    configFileSelector: (profile)=>(0, import_util_config_provider.booleanSelector)(profile, CONFIG_USE_DUALSTACK_ENDPOINT, import_util_config_provider.SelectorType.CONFIG),\n    default: false\n};\n// src/endpointsConfig/NodeUseFipsEndpointConfigOptions.ts\nvar ENV_USE_FIPS_ENDPOINT = \"AWS_USE_FIPS_ENDPOINT\";\nvar CONFIG_USE_FIPS_ENDPOINT = \"use_fips_endpoint\";\nvar DEFAULT_USE_FIPS_ENDPOINT = false;\nvar NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS = {\n    environmentVariableSelector: (env)=>(0, import_util_config_provider.booleanSelector)(env, ENV_USE_FIPS_ENDPOINT, import_util_config_provider.SelectorType.ENV),\n    configFileSelector: (profile)=>(0, import_util_config_provider.booleanSelector)(profile, CONFIG_USE_FIPS_ENDPOINT, import_util_config_provider.SelectorType.CONFIG),\n    default: false\n};\n// src/endpointsConfig/resolveCustomEndpointsConfig.ts\nvar import_util_middleware = __webpack_require__(/*! @smithy/util-middleware */ \"(rsc)/./node_modules/@smithy/util-middleware/dist-cjs/index.js\");\nvar resolveCustomEndpointsConfig = /* @__PURE__ */ __name((input)=>{\n    const { tls, endpoint, urlParser, useDualstackEndpoint } = input;\n    return Object.assign(input, {\n        tls: tls ?? true,\n        endpoint: (0, import_util_middleware.normalizeProvider)(typeof endpoint === \"string\" ? urlParser(endpoint) : endpoint),\n        isCustomEndpoint: true,\n        useDualstackEndpoint: (0, import_util_middleware.normalizeProvider)(useDualstackEndpoint ?? false)\n    });\n}, \"resolveCustomEndpointsConfig\");\n// src/endpointsConfig/resolveEndpointsConfig.ts\n// src/endpointsConfig/utils/getEndpointFromRegion.ts\nvar getEndpointFromRegion = /* @__PURE__ */ __name(async (input)=>{\n    const { tls = true } = input;\n    const region = await input.region();\n    const dnsHostRegex = new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/);\n    if (!dnsHostRegex.test(region)) {\n        throw new Error(\"Invalid region in client config\");\n    }\n    const useDualstackEndpoint = await input.useDualstackEndpoint();\n    const useFipsEndpoint = await input.useFipsEndpoint();\n    const { hostname } = await input.regionInfoProvider(region, {\n        useDualstackEndpoint,\n        useFipsEndpoint\n    }) ?? {};\n    if (!hostname) {\n        throw new Error(\"Cannot resolve hostname from client config\");\n    }\n    return input.urlParser(`${tls ? \"https:\" : \"http:\"}//${hostname}`);\n}, \"getEndpointFromRegion\");\n// src/endpointsConfig/resolveEndpointsConfig.ts\nvar resolveEndpointsConfig = /* @__PURE__ */ __name((input)=>{\n    const useDualstackEndpoint = (0, import_util_middleware.normalizeProvider)(input.useDualstackEndpoint ?? false);\n    const { endpoint, useFipsEndpoint, urlParser, tls } = input;\n    return Object.assign(input, {\n        tls: tls ?? true,\n        endpoint: endpoint ? (0, import_util_middleware.normalizeProvider)(typeof endpoint === \"string\" ? urlParser(endpoint) : endpoint) : ()=>getEndpointFromRegion({\n                ...input,\n                useDualstackEndpoint,\n                useFipsEndpoint\n            }),\n        isCustomEndpoint: !!endpoint,\n        useDualstackEndpoint\n    });\n}, \"resolveEndpointsConfig\");\n// src/regionConfig/config.ts\nvar REGION_ENV_NAME = \"AWS_REGION\";\nvar REGION_INI_NAME = \"region\";\nvar NODE_REGION_CONFIG_OPTIONS = {\n    environmentVariableSelector: (env)=>env[REGION_ENV_NAME],\n    configFileSelector: (profile)=>profile[REGION_INI_NAME],\n    default: ()=>{\n        throw new Error(\"Region is missing\");\n    }\n};\nvar NODE_REGION_CONFIG_FILE_OPTIONS = {\n    preferredFile: \"credentials\"\n};\n// src/regionConfig/isFipsRegion.ts\nvar isFipsRegion = /* @__PURE__ */ __name((region)=>typeof region === \"string\" && (region.startsWith(\"fips-\") || region.endsWith(\"-fips\")), \"isFipsRegion\");\n// src/regionConfig/getRealRegion.ts\nvar getRealRegion = /* @__PURE__ */ __name((region)=>isFipsRegion(region) ? [\n        \"fips-aws-global\",\n        \"aws-fips\"\n    ].includes(region) ? \"us-east-1\" : region.replace(/fips-(dkr-|prod-)?|-fips/, \"\") : region, \"getRealRegion\");\n// src/regionConfig/resolveRegionConfig.ts\nvar resolveRegionConfig = /* @__PURE__ */ __name((input)=>{\n    const { region, useFipsEndpoint } = input;\n    if (!region) {\n        throw new Error(\"Region is missing\");\n    }\n    return Object.assign(input, {\n        region: async ()=>{\n            if (typeof region === \"string\") {\n                return getRealRegion(region);\n            }\n            const providedRegion = await region();\n            return getRealRegion(providedRegion);\n        },\n        useFipsEndpoint: async ()=>{\n            const providedRegion = typeof region === \"string\" ? region : await region();\n            if (isFipsRegion(providedRegion)) {\n                return true;\n            }\n            return typeof useFipsEndpoint !== \"function\" ? Promise.resolve(!!useFipsEndpoint) : useFipsEndpoint();\n        }\n    });\n}, \"resolveRegionConfig\");\n// src/regionInfo/getHostnameFromVariants.ts\nvar getHostnameFromVariants = /* @__PURE__ */ __name((variants = [], { useFipsEndpoint, useDualstackEndpoint })=>variants.find(({ tags })=>useFipsEndpoint === tags.includes(\"fips\") && useDualstackEndpoint === tags.includes(\"dualstack\"))?.hostname, \"getHostnameFromVariants\");\n// src/regionInfo/getResolvedHostname.ts\nvar getResolvedHostname = /* @__PURE__ */ __name((resolvedRegion, { regionHostname, partitionHostname })=>regionHostname ? regionHostname : partitionHostname ? partitionHostname.replace(\"{region}\", resolvedRegion) : void 0, \"getResolvedHostname\");\n// src/regionInfo/getResolvedPartition.ts\nvar getResolvedPartition = /* @__PURE__ */ __name((region, { partitionHash })=>Object.keys(partitionHash || {}).find((key)=>partitionHash[key].regions.includes(region)) ?? \"aws\", \"getResolvedPartition\");\n// src/regionInfo/getResolvedSigningRegion.ts\nvar getResolvedSigningRegion = /* @__PURE__ */ __name((hostname, { signingRegion, regionRegex, useFipsEndpoint })=>{\n    if (signingRegion) {\n        return signingRegion;\n    } else if (useFipsEndpoint) {\n        const regionRegexJs = regionRegex.replace(\"\\\\\\\\\", \"\\\\\").replace(/^\\^/g, \"\\\\.\").replace(/\\$$/g, \"\\\\.\");\n        const regionRegexmatchArray = hostname.match(regionRegexJs);\n        if (regionRegexmatchArray) {\n            return regionRegexmatchArray[0].slice(1, -1);\n        }\n    }\n}, \"getResolvedSigningRegion\");\n// src/regionInfo/getRegionInfo.ts\nvar getRegionInfo = /* @__PURE__ */ __name((region, { useFipsEndpoint = false, useDualstackEndpoint = false, signingService, regionHash, partitionHash })=>{\n    const partition = getResolvedPartition(region, {\n        partitionHash\n    });\n    const resolvedRegion = region in regionHash ? region : partitionHash[partition]?.endpoint ?? region;\n    const hostnameOptions = {\n        useFipsEndpoint,\n        useDualstackEndpoint\n    };\n    const regionHostname = getHostnameFromVariants(regionHash[resolvedRegion]?.variants, hostnameOptions);\n    const partitionHostname = getHostnameFromVariants(partitionHash[partition]?.variants, hostnameOptions);\n    const hostname = getResolvedHostname(resolvedRegion, {\n        regionHostname,\n        partitionHostname\n    });\n    if (hostname === void 0) {\n        throw new Error(`Endpoint resolution failed for: ${{\n            resolvedRegion,\n            useFipsEndpoint,\n            useDualstackEndpoint\n        }}`);\n    }\n    const signingRegion = getResolvedSigningRegion(hostname, {\n        signingRegion: regionHash[resolvedRegion]?.signingRegion,\n        regionRegex: partitionHash[partition].regionRegex,\n        useFipsEndpoint\n    });\n    return {\n        partition,\n        signingService,\n        hostname,\n        ...signingRegion && {\n            signingRegion\n        },\n        ...regionHash[resolvedRegion]?.signingService && {\n            signingService: regionHash[resolvedRegion].signingService\n        }\n    };\n}, \"getRegionInfo\");\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/config-resolver/dist-cjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/core/dist-es/getSmithyContext.js":
/*!***************************************************************!*\
  !*** ./node_modules/@smithy/core/dist-es/getSmithyContext.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getSmithyContext: () => (/* binding */ getSmithyContext)\n/* harmony export */ });\n/* harmony import */ var _smithy_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/types */ \"(rsc)/./node_modules/@smithy/types/dist-cjs/index.js\");\n/* harmony import */ var _smithy_types__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_smithy_types__WEBPACK_IMPORTED_MODULE_0__);\n\nconst getSmithyContext = (context)=>context[_smithy_types__WEBPACK_IMPORTED_MODULE_0__.SMITHY_CONTEXT_KEY] || (context[_smithy_types__WEBPACK_IMPORTED_MODULE_0__.SMITHY_CONTEXT_KEY] = {});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9jb3JlL2Rpc3QtZXMvZ2V0U21pdGh5Q29udGV4dC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBbUQ7QUFDNUMsTUFBTUMsbUJBQW1CLENBQUNDLFVBQVlBLE9BQU8sQ0FBQ0YsNkRBQWtCQSxDQUFDLElBQUtFLENBQUFBLE9BQU8sQ0FBQ0YsNkRBQWtCQSxDQUFDLEdBQUcsQ0FBQyxHQUFHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2xvdWRzaGlmdC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L2NvcmUvZGlzdC1lcy9nZXRTbWl0aHlDb250ZXh0LmpzPzkzMzgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU01JVEhZX0NPTlRFWFRfS0VZIH0gZnJvbSBcIkBzbWl0aHkvdHlwZXNcIjtcbmV4cG9ydCBjb25zdCBnZXRTbWl0aHlDb250ZXh0ID0gKGNvbnRleHQpID0+IGNvbnRleHRbU01JVEhZX0NPTlRFWFRfS0VZXSB8fCAoY29udGV4dFtTTUlUSFlfQ09OVEVYVF9LRVldID0ge30pO1xuIl0sIm5hbWVzIjpbIlNNSVRIWV9DT05URVhUX0tFWSIsImdldFNtaXRoeUNvbnRleHQiLCJjb250ZXh0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/core/dist-es/getSmithyContext.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/core/dist-es/index.js":
/*!****************************************************!*\
  !*** ./node_modules/@smithy/core/dist-es/index.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultIdentityProviderConfig: () => (/* reexport safe */ _util_identity_and_auth__WEBPACK_IMPORTED_MODULE_7__.DefaultIdentityProviderConfig),\n/* harmony export */   EXPIRATION_MS: () => (/* reexport safe */ _util_identity_and_auth__WEBPACK_IMPORTED_MODULE_7__.EXPIRATION_MS),\n/* harmony export */   HttpApiKeyAuthSigner: () => (/* reexport safe */ _util_identity_and_auth__WEBPACK_IMPORTED_MODULE_7__.HttpApiKeyAuthSigner),\n/* harmony export */   HttpBearerAuthSigner: () => (/* reexport safe */ _util_identity_and_auth__WEBPACK_IMPORTED_MODULE_7__.HttpBearerAuthSigner),\n/* harmony export */   NoAuthSigner: () => (/* reexport safe */ _util_identity_and_auth__WEBPACK_IMPORTED_MODULE_7__.NoAuthSigner),\n/* harmony export */   createIsIdentityExpiredFunction: () => (/* reexport safe */ _util_identity_and_auth__WEBPACK_IMPORTED_MODULE_7__.createIsIdentityExpiredFunction),\n/* harmony export */   createPaginator: () => (/* reexport safe */ _pagination_createPaginator__WEBPACK_IMPORTED_MODULE_4__.createPaginator),\n/* harmony export */   doesIdentityRequireRefresh: () => (/* reexport safe */ _util_identity_and_auth__WEBPACK_IMPORTED_MODULE_7__.doesIdentityRequireRefresh),\n/* harmony export */   getHttpAuthSchemeEndpointRuleSetPlugin: () => (/* reexport safe */ _middleware_http_auth_scheme__WEBPACK_IMPORTED_MODULE_1__.getHttpAuthSchemeEndpointRuleSetPlugin),\n/* harmony export */   getHttpAuthSchemePlugin: () => (/* reexport safe */ _middleware_http_auth_scheme__WEBPACK_IMPORTED_MODULE_1__.getHttpAuthSchemePlugin),\n/* harmony export */   getHttpSigningPlugin: () => (/* reexport safe */ _middleware_http_signing__WEBPACK_IMPORTED_MODULE_2__.getHttpSigningPlugin),\n/* harmony export */   getSmithyContext: () => (/* reexport safe */ _getSmithyContext__WEBPACK_IMPORTED_MODULE_0__.getSmithyContext),\n/* harmony export */   httpAuthSchemeEndpointRuleSetMiddlewareOptions: () => (/* reexport safe */ _middleware_http_auth_scheme__WEBPACK_IMPORTED_MODULE_1__.httpAuthSchemeEndpointRuleSetMiddlewareOptions),\n/* harmony export */   httpAuthSchemeMiddleware: () => (/* reexport safe */ _middleware_http_auth_scheme__WEBPACK_IMPORTED_MODULE_1__.httpAuthSchemeMiddleware),\n/* harmony export */   httpAuthSchemeMiddlewareOptions: () => (/* reexport safe */ _middleware_http_auth_scheme__WEBPACK_IMPORTED_MODULE_1__.httpAuthSchemeMiddlewareOptions),\n/* harmony export */   httpSigningMiddleware: () => (/* reexport safe */ _middleware_http_signing__WEBPACK_IMPORTED_MODULE_2__.httpSigningMiddleware),\n/* harmony export */   httpSigningMiddlewareOptions: () => (/* reexport safe */ _middleware_http_signing__WEBPACK_IMPORTED_MODULE_2__.httpSigningMiddlewareOptions),\n/* harmony export */   isIdentityExpired: () => (/* reexport safe */ _util_identity_and_auth__WEBPACK_IMPORTED_MODULE_7__.isIdentityExpired),\n/* harmony export */   memoizeIdentityProvider: () => (/* reexport safe */ _util_identity_and_auth__WEBPACK_IMPORTED_MODULE_7__.memoizeIdentityProvider),\n/* harmony export */   normalizeProvider: () => (/* reexport safe */ _normalizeProvider__WEBPACK_IMPORTED_MODULE_3__.normalizeProvider),\n/* harmony export */   requestBuilder: () => (/* reexport safe */ _protocols_requestBuilder__WEBPACK_IMPORTED_MODULE_5__.requestBuilder),\n/* harmony export */   setFeature: () => (/* reexport safe */ _setFeature__WEBPACK_IMPORTED_MODULE_6__.setFeature)\n/* harmony export */ });\n/* harmony import */ var _getSmithyContext__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getSmithyContext */ \"(rsc)/./node_modules/@smithy/core/dist-es/getSmithyContext.js\");\n/* harmony import */ var _middleware_http_auth_scheme__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./middleware-http-auth-scheme */ \"(rsc)/./node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/index.js\");\n/* harmony import */ var _middleware_http_signing__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./middleware-http-signing */ \"(rsc)/./node_modules/@smithy/core/dist-es/middleware-http-signing/index.js\");\n/* harmony import */ var _normalizeProvider__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./normalizeProvider */ \"(rsc)/./node_modules/@smithy/core/dist-es/normalizeProvider.js\");\n/* harmony import */ var _pagination_createPaginator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./pagination/createPaginator */ \"(rsc)/./node_modules/@smithy/core/dist-es/pagination/createPaginator.js\");\n/* harmony import */ var _protocols_requestBuilder__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./protocols/requestBuilder */ \"(rsc)/./node_modules/@smithy/core/dist-es/protocols/requestBuilder.js\");\n/* harmony import */ var _setFeature__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./setFeature */ \"(rsc)/./node_modules/@smithy/core/dist-es/setFeature.js\");\n/* harmony import */ var _util_identity_and_auth__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./util-identity-and-auth */ \"(rsc)/./node_modules/@smithy/core/dist-es/util-identity-and-auth/index.js\");\n\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9jb3JlL2Rpc3QtZXMvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQW1DO0FBQ1c7QUFDSjtBQUNOO0FBQzJCO0FBQ3BCO0FBQ2Q7QUFDWSIsInNvdXJjZXMiOlsid2VicGFjazovL2Nsb3Vkc2hpZnQvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9jb3JlL2Rpc3QtZXMvaW5kZXguanM/OTQ5ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tIFwiLi9nZXRTbWl0aHlDb250ZXh0XCI7XG5leHBvcnQgKiBmcm9tIFwiLi9taWRkbGV3YXJlLWh0dHAtYXV0aC1zY2hlbWVcIjtcbmV4cG9ydCAqIGZyb20gXCIuL21pZGRsZXdhcmUtaHR0cC1zaWduaW5nXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9ub3JtYWxpemVQcm92aWRlclwiO1xuZXhwb3J0IHsgY3JlYXRlUGFnaW5hdG9yIH0gZnJvbSBcIi4vcGFnaW5hdGlvbi9jcmVhdGVQYWdpbmF0b3JcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3Byb3RvY29scy9yZXF1ZXN0QnVpbGRlclwiO1xuZXhwb3J0ICogZnJvbSBcIi4vc2V0RmVhdHVyZVwiO1xuZXhwb3J0ICogZnJvbSBcIi4vdXRpbC1pZGVudGl0eS1hbmQtYXV0aFwiO1xuIl0sIm5hbWVzIjpbImNyZWF0ZVBhZ2luYXRvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/core/dist-es/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/getHttpAuthSchemeEndpointRuleSetPlugin.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/getHttpAuthSchemeEndpointRuleSetPlugin.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getHttpAuthSchemeEndpointRuleSetPlugin: () => (/* binding */ getHttpAuthSchemeEndpointRuleSetPlugin),\n/* harmony export */   httpAuthSchemeEndpointRuleSetMiddlewareOptions: () => (/* binding */ httpAuthSchemeEndpointRuleSetMiddlewareOptions)\n/* harmony export */ });\n/* harmony import */ var _httpAuthSchemeMiddleware__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./httpAuthSchemeMiddleware */ \"(rsc)/./node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/httpAuthSchemeMiddleware.js\");\n\nconst httpAuthSchemeEndpointRuleSetMiddlewareOptions = {\n    step: \"serialize\",\n    tags: [\n        \"HTTP_AUTH_SCHEME\"\n    ],\n    name: \"httpAuthSchemeMiddleware\",\n    override: true,\n    relation: \"before\",\n    toMiddleware: \"endpointV2Middleware\"\n};\nconst getHttpAuthSchemeEndpointRuleSetPlugin = (config, { httpAuthSchemeParametersProvider, identityProviderConfigProvider })=>({\n        applyToStack: (clientStack)=>{\n            clientStack.addRelativeTo((0,_httpAuthSchemeMiddleware__WEBPACK_IMPORTED_MODULE_0__.httpAuthSchemeMiddleware)(config, {\n                httpAuthSchemeParametersProvider,\n                identityProviderConfigProvider\n            }), httpAuthSchemeEndpointRuleSetMiddlewareOptions);\n        }\n    });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9jb3JlL2Rpc3QtZXMvbWlkZGxld2FyZS1odHRwLWF1dGgtc2NoZW1lL2dldEh0dHBBdXRoU2NoZW1lRW5kcG9pbnRSdWxlU2V0UGx1Z2luLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFzRTtBQUMvRCxNQUFNQyxpREFBaUQ7SUFDMURDLE1BQU07SUFDTkMsTUFBTTtRQUFDO0tBQW1CO0lBQzFCQyxNQUFNO0lBQ05DLFVBQVU7SUFDVkMsVUFBVTtJQUNWQyxjQUFjO0FBQ2xCLEVBQUU7QUFDSyxNQUFNQyx5Q0FBeUMsQ0FBQ0MsUUFBUSxFQUFFQyxnQ0FBZ0MsRUFBRUMsOEJBQThCLEVBQUcsR0FBTTtRQUN0SUMsY0FBYyxDQUFDQztZQUNYQSxZQUFZQyxhQUFhLENBQUNkLG1GQUF3QkEsQ0FBQ1MsUUFBUTtnQkFDdkRDO2dCQUNBQztZQUNKLElBQUlWO1FBQ1I7SUFDSixHQUFHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2xvdWRzaGlmdC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L2NvcmUvZGlzdC1lcy9taWRkbGV3YXJlLWh0dHAtYXV0aC1zY2hlbWUvZ2V0SHR0cEF1dGhTY2hlbWVFbmRwb2ludFJ1bGVTZXRQbHVnaW4uanM/N2ZkNyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBodHRwQXV0aFNjaGVtZU1pZGRsZXdhcmUgfSBmcm9tIFwiLi9odHRwQXV0aFNjaGVtZU1pZGRsZXdhcmVcIjtcbmV4cG9ydCBjb25zdCBodHRwQXV0aFNjaGVtZUVuZHBvaW50UnVsZVNldE1pZGRsZXdhcmVPcHRpb25zID0ge1xuICAgIHN0ZXA6IFwic2VyaWFsaXplXCIsXG4gICAgdGFnczogW1wiSFRUUF9BVVRIX1NDSEVNRVwiXSxcbiAgICBuYW1lOiBcImh0dHBBdXRoU2NoZW1lTWlkZGxld2FyZVwiLFxuICAgIG92ZXJyaWRlOiB0cnVlLFxuICAgIHJlbGF0aW9uOiBcImJlZm9yZVwiLFxuICAgIHRvTWlkZGxld2FyZTogXCJlbmRwb2ludFYyTWlkZGxld2FyZVwiLFxufTtcbmV4cG9ydCBjb25zdCBnZXRIdHRwQXV0aFNjaGVtZUVuZHBvaW50UnVsZVNldFBsdWdpbiA9IChjb25maWcsIHsgaHR0cEF1dGhTY2hlbWVQYXJhbWV0ZXJzUHJvdmlkZXIsIGlkZW50aXR5UHJvdmlkZXJDb25maWdQcm92aWRlciwgfSkgPT4gKHtcbiAgICBhcHBseVRvU3RhY2s6IChjbGllbnRTdGFjaykgPT4ge1xuICAgICAgICBjbGllbnRTdGFjay5hZGRSZWxhdGl2ZVRvKGh0dHBBdXRoU2NoZW1lTWlkZGxld2FyZShjb25maWcsIHtcbiAgICAgICAgICAgIGh0dHBBdXRoU2NoZW1lUGFyYW1ldGVyc1Byb3ZpZGVyLFxuICAgICAgICAgICAgaWRlbnRpdHlQcm92aWRlckNvbmZpZ1Byb3ZpZGVyLFxuICAgICAgICB9KSwgaHR0cEF1dGhTY2hlbWVFbmRwb2ludFJ1bGVTZXRNaWRkbGV3YXJlT3B0aW9ucyk7XG4gICAgfSxcbn0pO1xuIl0sIm5hbWVzIjpbImh0dHBBdXRoU2NoZW1lTWlkZGxld2FyZSIsImh0dHBBdXRoU2NoZW1lRW5kcG9pbnRSdWxlU2V0TWlkZGxld2FyZU9wdGlvbnMiLCJzdGVwIiwidGFncyIsIm5hbWUiLCJvdmVycmlkZSIsInJlbGF0aW9uIiwidG9NaWRkbGV3YXJlIiwiZ2V0SHR0cEF1dGhTY2hlbWVFbmRwb2ludFJ1bGVTZXRQbHVnaW4iLCJjb25maWciLCJodHRwQXV0aFNjaGVtZVBhcmFtZXRlcnNQcm92aWRlciIsImlkZW50aXR5UHJvdmlkZXJDb25maWdQcm92aWRlciIsImFwcGx5VG9TdGFjayIsImNsaWVudFN0YWNrIiwiYWRkUmVsYXRpdmVUbyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/getHttpAuthSchemeEndpointRuleSetPlugin.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/getHttpAuthSchemePlugin.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/getHttpAuthSchemePlugin.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getHttpAuthSchemePlugin: () => (/* binding */ getHttpAuthSchemePlugin),\n/* harmony export */   httpAuthSchemeMiddlewareOptions: () => (/* binding */ httpAuthSchemeMiddlewareOptions)\n/* harmony export */ });\n/* harmony import */ var _smithy_middleware_serde__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/middleware-serde */ \"(rsc)/./node_modules/@smithy/middleware-serde/dist-cjs/index.js\");\n/* harmony import */ var _smithy_middleware_serde__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_smithy_middleware_serde__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _httpAuthSchemeMiddleware__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./httpAuthSchemeMiddleware */ \"(rsc)/./node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/httpAuthSchemeMiddleware.js\");\n\n\nconst httpAuthSchemeMiddlewareOptions = {\n    step: \"serialize\",\n    tags: [\n        \"HTTP_AUTH_SCHEME\"\n    ],\n    name: \"httpAuthSchemeMiddleware\",\n    override: true,\n    relation: \"before\",\n    toMiddleware: _smithy_middleware_serde__WEBPACK_IMPORTED_MODULE_0__.serializerMiddlewareOption.name\n};\nconst getHttpAuthSchemePlugin = (config, { httpAuthSchemeParametersProvider, identityProviderConfigProvider })=>({\n        applyToStack: (clientStack)=>{\n            clientStack.addRelativeTo((0,_httpAuthSchemeMiddleware__WEBPACK_IMPORTED_MODULE_1__.httpAuthSchemeMiddleware)(config, {\n                httpAuthSchemeParametersProvider,\n                identityProviderConfigProvider\n            }), httpAuthSchemeMiddlewareOptions);\n        }\n    });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9jb3JlL2Rpc3QtZXMvbWlkZGxld2FyZS1odHRwLWF1dGgtc2NoZW1lL2dldEh0dHBBdXRoU2NoZW1lUGx1Z2luLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQXNFO0FBQ0E7QUFDL0QsTUFBTUUsa0NBQWtDO0lBQzNDQyxNQUFNO0lBQ05DLE1BQU07UUFBQztLQUFtQjtJQUMxQkMsTUFBTTtJQUNOQyxVQUFVO0lBQ1ZDLFVBQVU7SUFDVkMsY0FBY1IsZ0ZBQTBCQSxDQUFDSyxJQUFJO0FBQ2pELEVBQUU7QUFDSyxNQUFNSSwwQkFBMEIsQ0FBQ0MsUUFBUSxFQUFFQyxnQ0FBZ0MsRUFBRUMsOEJBQThCLEVBQUcsR0FBTTtRQUN2SEMsY0FBYyxDQUFDQztZQUNYQSxZQUFZQyxhQUFhLENBQUNkLG1GQUF3QkEsQ0FBQ1MsUUFBUTtnQkFDdkRDO2dCQUNBQztZQUNKLElBQUlWO1FBQ1I7SUFDSixHQUFHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2xvdWRzaGlmdC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L2NvcmUvZGlzdC1lcy9taWRkbGV3YXJlLWh0dHAtYXV0aC1zY2hlbWUvZ2V0SHR0cEF1dGhTY2hlbWVQbHVnaW4uanM/ZjQwOCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzZXJpYWxpemVyTWlkZGxld2FyZU9wdGlvbiB9IGZyb20gXCJAc21pdGh5L21pZGRsZXdhcmUtc2VyZGVcIjtcbmltcG9ydCB7IGh0dHBBdXRoU2NoZW1lTWlkZGxld2FyZSB9IGZyb20gXCIuL2h0dHBBdXRoU2NoZW1lTWlkZGxld2FyZVwiO1xuZXhwb3J0IGNvbnN0IGh0dHBBdXRoU2NoZW1lTWlkZGxld2FyZU9wdGlvbnMgPSB7XG4gICAgc3RlcDogXCJzZXJpYWxpemVcIixcbiAgICB0YWdzOiBbXCJIVFRQX0FVVEhfU0NIRU1FXCJdLFxuICAgIG5hbWU6IFwiaHR0cEF1dGhTY2hlbWVNaWRkbGV3YXJlXCIsXG4gICAgb3ZlcnJpZGU6IHRydWUsXG4gICAgcmVsYXRpb246IFwiYmVmb3JlXCIsXG4gICAgdG9NaWRkbGV3YXJlOiBzZXJpYWxpemVyTWlkZGxld2FyZU9wdGlvbi5uYW1lLFxufTtcbmV4cG9ydCBjb25zdCBnZXRIdHRwQXV0aFNjaGVtZVBsdWdpbiA9IChjb25maWcsIHsgaHR0cEF1dGhTY2hlbWVQYXJhbWV0ZXJzUHJvdmlkZXIsIGlkZW50aXR5UHJvdmlkZXJDb25maWdQcm92aWRlciwgfSkgPT4gKHtcbiAgICBhcHBseVRvU3RhY2s6IChjbGllbnRTdGFjaykgPT4ge1xuICAgICAgICBjbGllbnRTdGFjay5hZGRSZWxhdGl2ZVRvKGh0dHBBdXRoU2NoZW1lTWlkZGxld2FyZShjb25maWcsIHtcbiAgICAgICAgICAgIGh0dHBBdXRoU2NoZW1lUGFyYW1ldGVyc1Byb3ZpZGVyLFxuICAgICAgICAgICAgaWRlbnRpdHlQcm92aWRlckNvbmZpZ1Byb3ZpZGVyLFxuICAgICAgICB9KSwgaHR0cEF1dGhTY2hlbWVNaWRkbGV3YXJlT3B0aW9ucyk7XG4gICAgfSxcbn0pO1xuIl0sIm5hbWVzIjpbInNlcmlhbGl6ZXJNaWRkbGV3YXJlT3B0aW9uIiwiaHR0cEF1dGhTY2hlbWVNaWRkbGV3YXJlIiwiaHR0cEF1dGhTY2hlbWVNaWRkbGV3YXJlT3B0aW9ucyIsInN0ZXAiLCJ0YWdzIiwibmFtZSIsIm92ZXJyaWRlIiwicmVsYXRpb24iLCJ0b01pZGRsZXdhcmUiLCJnZXRIdHRwQXV0aFNjaGVtZVBsdWdpbiIsImNvbmZpZyIsImh0dHBBdXRoU2NoZW1lUGFyYW1ldGVyc1Byb3ZpZGVyIiwiaWRlbnRpdHlQcm92aWRlckNvbmZpZ1Byb3ZpZGVyIiwiYXBwbHlUb1N0YWNrIiwiY2xpZW50U3RhY2siLCJhZGRSZWxhdGl2ZVRvIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/getHttpAuthSchemePlugin.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/httpAuthSchemeMiddleware.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/httpAuthSchemeMiddleware.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   httpAuthSchemeMiddleware: () => (/* binding */ httpAuthSchemeMiddleware)\n/* harmony export */ });\n/* harmony import */ var _smithy_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/types */ \"(rsc)/./node_modules/@smithy/types/dist-cjs/index.js\");\n/* harmony import */ var _smithy_types__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_smithy_types__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _smithy_util_middleware__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @smithy/util-middleware */ \"(rsc)/./node_modules/@smithy/util-middleware/dist-cjs/index.js\");\n/* harmony import */ var _smithy_util_middleware__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_smithy_util_middleware__WEBPACK_IMPORTED_MODULE_1__);\n\n\nfunction convertHttpAuthSchemesToMap(httpAuthSchemes) {\n    const map = new Map();\n    for (const scheme of httpAuthSchemes){\n        map.set(scheme.schemeId, scheme);\n    }\n    return map;\n}\nconst httpAuthSchemeMiddleware = (config, mwOptions)=>(next, context)=>async (args)=>{\n            const options = config.httpAuthSchemeProvider(await mwOptions.httpAuthSchemeParametersProvider(config, context, args.input));\n            const authSchemes = convertHttpAuthSchemesToMap(config.httpAuthSchemes);\n            const smithyContext = (0,_smithy_util_middleware__WEBPACK_IMPORTED_MODULE_1__.getSmithyContext)(context);\n            const failureReasons = [];\n            for (const option of options){\n                const scheme = authSchemes.get(option.schemeId);\n                if (!scheme) {\n                    failureReasons.push(`HttpAuthScheme \\`${option.schemeId}\\` was not enabled for this service.`);\n                    continue;\n                }\n                const identityProvider = scheme.identityProvider(await mwOptions.identityProviderConfigProvider(config));\n                if (!identityProvider) {\n                    failureReasons.push(`HttpAuthScheme \\`${option.schemeId}\\` did not have an IdentityProvider configured.`);\n                    continue;\n                }\n                const { identityProperties = {}, signingProperties = {} } = option.propertiesExtractor?.(config, context) || {};\n                option.identityProperties = Object.assign(option.identityProperties || {}, identityProperties);\n                option.signingProperties = Object.assign(option.signingProperties || {}, signingProperties);\n                smithyContext.selectedHttpAuthScheme = {\n                    httpAuthOption: option,\n                    identity: await identityProvider(option.identityProperties),\n                    signer: scheme.signer\n                };\n                break;\n            }\n            if (!smithyContext.selectedHttpAuthScheme) {\n                throw new Error(failureReasons.join(\"\\n\"));\n            }\n            return next(args);\n        };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9jb3JlL2Rpc3QtZXMvbWlkZGxld2FyZS1odHRwLWF1dGgtc2NoZW1lL2h0dHBBdXRoU2NoZW1lTWlkZGxld2FyZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFvRDtBQUNPO0FBQzNELFNBQVNFLDRCQUE0QkMsZUFBZTtJQUNoRCxNQUFNQyxNQUFNLElBQUlDO0lBQ2hCLEtBQUssTUFBTUMsVUFBVUgsZ0JBQWlCO1FBQ2xDQyxJQUFJRyxHQUFHLENBQUNELE9BQU9FLFFBQVEsRUFBRUY7SUFDN0I7SUFDQSxPQUFPRjtBQUNYO0FBQ08sTUFBTUssMkJBQTJCLENBQUNDLFFBQVFDLFlBQWMsQ0FBQ0MsTUFBTUMsVUFBWSxPQUFPQztZQUNyRixNQUFNQyxVQUFVTCxPQUFPTSxzQkFBc0IsQ0FBQyxNQUFNTCxVQUFVTSxnQ0FBZ0MsQ0FBQ1AsUUFBUUcsU0FBU0MsS0FBS0ksS0FBSztZQUMxSCxNQUFNQyxjQUFjakIsNEJBQTRCUSxPQUFPUCxlQUFlO1lBQ3RFLE1BQU1pQixnQkFBZ0JuQix5RUFBZ0JBLENBQUNZO1lBQ3ZDLE1BQU1RLGlCQUFpQixFQUFFO1lBQ3pCLEtBQUssTUFBTUMsVUFBVVAsUUFBUztnQkFDMUIsTUFBTVQsU0FBU2EsWUFBWUksR0FBRyxDQUFDRCxPQUFPZCxRQUFRO2dCQUM5QyxJQUFJLENBQUNGLFFBQVE7b0JBQ1RlLGVBQWVHLElBQUksQ0FBQyxDQUFDLGlCQUFpQixFQUFFRixPQUFPZCxRQUFRLENBQUMsb0NBQW9DLENBQUM7b0JBQzdGO2dCQUNKO2dCQUNBLE1BQU1pQixtQkFBbUJuQixPQUFPbUIsZ0JBQWdCLENBQUMsTUFBTWQsVUFBVWUsOEJBQThCLENBQUNoQjtnQkFDaEcsSUFBSSxDQUFDZSxrQkFBa0I7b0JBQ25CSixlQUFlRyxJQUFJLENBQUMsQ0FBQyxpQkFBaUIsRUFBRUYsT0FBT2QsUUFBUSxDQUFDLCtDQUErQyxDQUFDO29CQUN4RztnQkFDSjtnQkFDQSxNQUFNLEVBQUVtQixxQkFBcUIsQ0FBQyxDQUFDLEVBQUVDLG9CQUFvQixDQUFDLENBQUMsRUFBRSxHQUFHTixPQUFPTyxtQkFBbUIsR0FBR25CLFFBQVFHLFlBQVksQ0FBQztnQkFDOUdTLE9BQU9LLGtCQUFrQixHQUFHRyxPQUFPQyxNQUFNLENBQUNULE9BQU9LLGtCQUFrQixJQUFJLENBQUMsR0FBR0E7Z0JBQzNFTCxPQUFPTSxpQkFBaUIsR0FBR0UsT0FBT0MsTUFBTSxDQUFDVCxPQUFPTSxpQkFBaUIsSUFBSSxDQUFDLEdBQUdBO2dCQUN6RVIsY0FBY1ksc0JBQXNCLEdBQUc7b0JBQ25DQyxnQkFBZ0JYO29CQUNoQlksVUFBVSxNQUFNVCxpQkFBaUJILE9BQU9LLGtCQUFrQjtvQkFDMURRLFFBQVE3QixPQUFPNkIsTUFBTTtnQkFDekI7Z0JBQ0E7WUFDSjtZQUNBLElBQUksQ0FBQ2YsY0FBY1ksc0JBQXNCLEVBQUU7Z0JBQ3ZDLE1BQU0sSUFBSUksTUFBTWYsZUFBZWdCLElBQUksQ0FBQztZQUN4QztZQUNBLE9BQU96QixLQUFLRTtRQUNoQixFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2xvdWRzaGlmdC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L2NvcmUvZGlzdC1lcy9taWRkbGV3YXJlLWh0dHAtYXV0aC1zY2hlbWUvaHR0cEF1dGhTY2hlbWVNaWRkbGV3YXJlLmpzPzM1ODAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU01JVEhZX0NPTlRFWFRfS0VZLCB9IGZyb20gXCJAc21pdGh5L3R5cGVzXCI7XG5pbXBvcnQgeyBnZXRTbWl0aHlDb250ZXh0IH0gZnJvbSBcIkBzbWl0aHkvdXRpbC1taWRkbGV3YXJlXCI7XG5mdW5jdGlvbiBjb252ZXJ0SHR0cEF1dGhTY2hlbWVzVG9NYXAoaHR0cEF1dGhTY2hlbWVzKSB7XG4gICAgY29uc3QgbWFwID0gbmV3IE1hcCgpO1xuICAgIGZvciAoY29uc3Qgc2NoZW1lIG9mIGh0dHBBdXRoU2NoZW1lcykge1xuICAgICAgICBtYXAuc2V0KHNjaGVtZS5zY2hlbWVJZCwgc2NoZW1lKTtcbiAgICB9XG4gICAgcmV0dXJuIG1hcDtcbn1cbmV4cG9ydCBjb25zdCBodHRwQXV0aFNjaGVtZU1pZGRsZXdhcmUgPSAoY29uZmlnLCBtd09wdGlvbnMpID0+IChuZXh0LCBjb250ZXh0KSA9PiBhc3luYyAoYXJncykgPT4ge1xuICAgIGNvbnN0IG9wdGlvbnMgPSBjb25maWcuaHR0cEF1dGhTY2hlbWVQcm92aWRlcihhd2FpdCBtd09wdGlvbnMuaHR0cEF1dGhTY2hlbWVQYXJhbWV0ZXJzUHJvdmlkZXIoY29uZmlnLCBjb250ZXh0LCBhcmdzLmlucHV0KSk7XG4gICAgY29uc3QgYXV0aFNjaGVtZXMgPSBjb252ZXJ0SHR0cEF1dGhTY2hlbWVzVG9NYXAoY29uZmlnLmh0dHBBdXRoU2NoZW1lcyk7XG4gICAgY29uc3Qgc21pdGh5Q29udGV4dCA9IGdldFNtaXRoeUNvbnRleHQoY29udGV4dCk7XG4gICAgY29uc3QgZmFpbHVyZVJlYXNvbnMgPSBbXTtcbiAgICBmb3IgKGNvbnN0IG9wdGlvbiBvZiBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHNjaGVtZSA9IGF1dGhTY2hlbWVzLmdldChvcHRpb24uc2NoZW1lSWQpO1xuICAgICAgICBpZiAoIXNjaGVtZSkge1xuICAgICAgICAgICAgZmFpbHVyZVJlYXNvbnMucHVzaChgSHR0cEF1dGhTY2hlbWUgXFxgJHtvcHRpb24uc2NoZW1lSWR9XFxgIHdhcyBub3QgZW5hYmxlZCBmb3IgdGhpcyBzZXJ2aWNlLmApO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaWRlbnRpdHlQcm92aWRlciA9IHNjaGVtZS5pZGVudGl0eVByb3ZpZGVyKGF3YWl0IG13T3B0aW9ucy5pZGVudGl0eVByb3ZpZGVyQ29uZmlnUHJvdmlkZXIoY29uZmlnKSk7XG4gICAgICAgIGlmICghaWRlbnRpdHlQcm92aWRlcikge1xuICAgICAgICAgICAgZmFpbHVyZVJlYXNvbnMucHVzaChgSHR0cEF1dGhTY2hlbWUgXFxgJHtvcHRpb24uc2NoZW1lSWR9XFxgIGRpZCBub3QgaGF2ZSBhbiBJZGVudGl0eVByb3ZpZGVyIGNvbmZpZ3VyZWQuYCk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB7IGlkZW50aXR5UHJvcGVydGllcyA9IHt9LCBzaWduaW5nUHJvcGVydGllcyA9IHt9IH0gPSBvcHRpb24ucHJvcGVydGllc0V4dHJhY3Rvcj8uKGNvbmZpZywgY29udGV4dCkgfHwge307XG4gICAgICAgIG9wdGlvbi5pZGVudGl0eVByb3BlcnRpZXMgPSBPYmplY3QuYXNzaWduKG9wdGlvbi5pZGVudGl0eVByb3BlcnRpZXMgfHwge30sIGlkZW50aXR5UHJvcGVydGllcyk7XG4gICAgICAgIG9wdGlvbi5zaWduaW5nUHJvcGVydGllcyA9IE9iamVjdC5hc3NpZ24ob3B0aW9uLnNpZ25pbmdQcm9wZXJ0aWVzIHx8IHt9LCBzaWduaW5nUHJvcGVydGllcyk7XG4gICAgICAgIHNtaXRoeUNvbnRleHQuc2VsZWN0ZWRIdHRwQXV0aFNjaGVtZSA9IHtcbiAgICAgICAgICAgIGh0dHBBdXRoT3B0aW9uOiBvcHRpb24sXG4gICAgICAgICAgICBpZGVudGl0eTogYXdhaXQgaWRlbnRpdHlQcm92aWRlcihvcHRpb24uaWRlbnRpdHlQcm9wZXJ0aWVzKSxcbiAgICAgICAgICAgIHNpZ25lcjogc2NoZW1lLnNpZ25lcixcbiAgICAgICAgfTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGlmICghc21pdGh5Q29udGV4dC5zZWxlY3RlZEh0dHBBdXRoU2NoZW1lKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihmYWlsdXJlUmVhc29ucy5qb2luKFwiXFxuXCIpKTtcbiAgICB9XG4gICAgcmV0dXJuIG5leHQoYXJncyk7XG59O1xuIl0sIm5hbWVzIjpbIlNNSVRIWV9DT05URVhUX0tFWSIsImdldFNtaXRoeUNvbnRleHQiLCJjb252ZXJ0SHR0cEF1dGhTY2hlbWVzVG9NYXAiLCJodHRwQXV0aFNjaGVtZXMiLCJtYXAiLCJNYXAiLCJzY2hlbWUiLCJzZXQiLCJzY2hlbWVJZCIsImh0dHBBdXRoU2NoZW1lTWlkZGxld2FyZSIsImNvbmZpZyIsIm13T3B0aW9ucyIsIm5leHQiLCJjb250ZXh0IiwiYXJncyIsIm9wdGlvbnMiLCJodHRwQXV0aFNjaGVtZVByb3ZpZGVyIiwiaHR0cEF1dGhTY2hlbWVQYXJhbWV0ZXJzUHJvdmlkZXIiLCJpbnB1dCIsImF1dGhTY2hlbWVzIiwic21pdGh5Q29udGV4dCIsImZhaWx1cmVSZWFzb25zIiwib3B0aW9uIiwiZ2V0IiwicHVzaCIsImlkZW50aXR5UHJvdmlkZXIiLCJpZGVudGl0eVByb3ZpZGVyQ29uZmlnUHJvdmlkZXIiLCJpZGVudGl0eVByb3BlcnRpZXMiLCJzaWduaW5nUHJvcGVydGllcyIsInByb3BlcnRpZXNFeHRyYWN0b3IiLCJPYmplY3QiLCJhc3NpZ24iLCJzZWxlY3RlZEh0dHBBdXRoU2NoZW1lIiwiaHR0cEF1dGhPcHRpb24iLCJpZGVudGl0eSIsInNpZ25lciIsIkVycm9yIiwiam9pbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/httpAuthSchemeMiddleware.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/index.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/index.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getHttpAuthSchemeEndpointRuleSetPlugin: () => (/* reexport safe */ _getHttpAuthSchemeEndpointRuleSetPlugin__WEBPACK_IMPORTED_MODULE_1__.getHttpAuthSchemeEndpointRuleSetPlugin),\n/* harmony export */   getHttpAuthSchemePlugin: () => (/* reexport safe */ _getHttpAuthSchemePlugin__WEBPACK_IMPORTED_MODULE_2__.getHttpAuthSchemePlugin),\n/* harmony export */   httpAuthSchemeEndpointRuleSetMiddlewareOptions: () => (/* reexport safe */ _getHttpAuthSchemeEndpointRuleSetPlugin__WEBPACK_IMPORTED_MODULE_1__.httpAuthSchemeEndpointRuleSetMiddlewareOptions),\n/* harmony export */   httpAuthSchemeMiddleware: () => (/* reexport safe */ _httpAuthSchemeMiddleware__WEBPACK_IMPORTED_MODULE_0__.httpAuthSchemeMiddleware),\n/* harmony export */   httpAuthSchemeMiddlewareOptions: () => (/* reexport safe */ _getHttpAuthSchemePlugin__WEBPACK_IMPORTED_MODULE_2__.httpAuthSchemeMiddlewareOptions)\n/* harmony export */ });\n/* harmony import */ var _httpAuthSchemeMiddleware__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./httpAuthSchemeMiddleware */ \"(rsc)/./node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/httpAuthSchemeMiddleware.js\");\n/* harmony import */ var _getHttpAuthSchemeEndpointRuleSetPlugin__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getHttpAuthSchemeEndpointRuleSetPlugin */ \"(rsc)/./node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/getHttpAuthSchemeEndpointRuleSetPlugin.js\");\n/* harmony import */ var _getHttpAuthSchemePlugin__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getHttpAuthSchemePlugin */ \"(rsc)/./node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/getHttpAuthSchemePlugin.js\");\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9jb3JlL2Rpc3QtZXMvbWlkZGxld2FyZS1odHRwLWF1dGgtc2NoZW1lL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQTJDO0FBQ2M7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL2Nsb3Vkc2hpZnQvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9jb3JlL2Rpc3QtZXMvbWlkZGxld2FyZS1odHRwLWF1dGgtc2NoZW1lL2luZGV4LmpzPzRiYmYiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSBcIi4vaHR0cEF1dGhTY2hlbWVNaWRkbGV3YXJlXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9nZXRIdHRwQXV0aFNjaGVtZUVuZHBvaW50UnVsZVNldFBsdWdpblwiO1xuZXhwb3J0ICogZnJvbSBcIi4vZ2V0SHR0cEF1dGhTY2hlbWVQbHVnaW5cIjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/core/dist-es/middleware-http-signing/getHttpSigningMiddleware.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@smithy/core/dist-es/middleware-http-signing/getHttpSigningMiddleware.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getHttpSigningPlugin: () => (/* binding */ getHttpSigningPlugin),\n/* harmony export */   httpSigningMiddlewareOptions: () => (/* binding */ httpSigningMiddlewareOptions)\n/* harmony export */ });\n/* harmony import */ var _httpSigningMiddleware__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./httpSigningMiddleware */ \"(rsc)/./node_modules/@smithy/core/dist-es/middleware-http-signing/httpSigningMiddleware.js\");\n\nconst httpSigningMiddlewareOptions = {\n    step: \"finalizeRequest\",\n    tags: [\n        \"HTTP_SIGNING\"\n    ],\n    name: \"httpSigningMiddleware\",\n    aliases: [\n        \"apiKeyMiddleware\",\n        \"tokenMiddleware\",\n        \"awsAuthMiddleware\"\n    ],\n    override: true,\n    relation: \"after\",\n    toMiddleware: \"retryMiddleware\"\n};\nconst getHttpSigningPlugin = (config)=>({\n        applyToStack: (clientStack)=>{\n            clientStack.addRelativeTo((0,_httpSigningMiddleware__WEBPACK_IMPORTED_MODULE_0__.httpSigningMiddleware)(config), httpSigningMiddlewareOptions);\n        }\n    });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9jb3JlL2Rpc3QtZXMvbWlkZGxld2FyZS1odHRwLXNpZ25pbmcvZ2V0SHR0cFNpZ25pbmdNaWRkbGV3YXJlLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFnRTtBQUN6RCxNQUFNQywrQkFBK0I7SUFDeENDLE1BQU07SUFDTkMsTUFBTTtRQUFDO0tBQWU7SUFDdEJDLE1BQU07SUFDTkMsU0FBUztRQUFDO1FBQW9CO1FBQW1CO0tBQW9CO0lBQ3JFQyxVQUFVO0lBQ1ZDLFVBQVU7SUFDVkMsY0FBYztBQUNsQixFQUFFO0FBQ0ssTUFBTUMsdUJBQXVCLENBQUNDLFNBQVk7UUFDN0NDLGNBQWMsQ0FBQ0M7WUFDWEEsWUFBWUMsYUFBYSxDQUFDYiw2RUFBcUJBLENBQUNVLFNBQVNUO1FBQzdEO0lBQ0osR0FBRyIsInNvdXJjZXMiOlsid2VicGFjazovL2Nsb3Vkc2hpZnQvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9jb3JlL2Rpc3QtZXMvbWlkZGxld2FyZS1odHRwLXNpZ25pbmcvZ2V0SHR0cFNpZ25pbmdNaWRkbGV3YXJlLmpzP2NhNjciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaHR0cFNpZ25pbmdNaWRkbGV3YXJlIH0gZnJvbSBcIi4vaHR0cFNpZ25pbmdNaWRkbGV3YXJlXCI7XG5leHBvcnQgY29uc3QgaHR0cFNpZ25pbmdNaWRkbGV3YXJlT3B0aW9ucyA9IHtcbiAgICBzdGVwOiBcImZpbmFsaXplUmVxdWVzdFwiLFxuICAgIHRhZ3M6IFtcIkhUVFBfU0lHTklOR1wiXSxcbiAgICBuYW1lOiBcImh0dHBTaWduaW5nTWlkZGxld2FyZVwiLFxuICAgIGFsaWFzZXM6IFtcImFwaUtleU1pZGRsZXdhcmVcIiwgXCJ0b2tlbk1pZGRsZXdhcmVcIiwgXCJhd3NBdXRoTWlkZGxld2FyZVwiXSxcbiAgICBvdmVycmlkZTogdHJ1ZSxcbiAgICByZWxhdGlvbjogXCJhZnRlclwiLFxuICAgIHRvTWlkZGxld2FyZTogXCJyZXRyeU1pZGRsZXdhcmVcIixcbn07XG5leHBvcnQgY29uc3QgZ2V0SHR0cFNpZ25pbmdQbHVnaW4gPSAoY29uZmlnKSA9PiAoe1xuICAgIGFwcGx5VG9TdGFjazogKGNsaWVudFN0YWNrKSA9PiB7XG4gICAgICAgIGNsaWVudFN0YWNrLmFkZFJlbGF0aXZlVG8oaHR0cFNpZ25pbmdNaWRkbGV3YXJlKGNvbmZpZyksIGh0dHBTaWduaW5nTWlkZGxld2FyZU9wdGlvbnMpO1xuICAgIH0sXG59KTtcbiJdLCJuYW1lcyI6WyJodHRwU2lnbmluZ01pZGRsZXdhcmUiLCJodHRwU2lnbmluZ01pZGRsZXdhcmVPcHRpb25zIiwic3RlcCIsInRhZ3MiLCJuYW1lIiwiYWxpYXNlcyIsIm92ZXJyaWRlIiwicmVsYXRpb24iLCJ0b01pZGRsZXdhcmUiLCJnZXRIdHRwU2lnbmluZ1BsdWdpbiIsImNvbmZpZyIsImFwcGx5VG9TdGFjayIsImNsaWVudFN0YWNrIiwiYWRkUmVsYXRpdmVUbyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/core/dist-es/middleware-http-signing/getHttpSigningMiddleware.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/core/dist-es/middleware-http-signing/httpSigningMiddleware.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@smithy/core/dist-es/middleware-http-signing/httpSigningMiddleware.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   httpSigningMiddleware: () => (/* binding */ httpSigningMiddleware)\n/* harmony export */ });\n/* harmony import */ var _smithy_protocol_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/protocol-http */ \"(rsc)/./node_modules/@smithy/protocol-http/dist-cjs/index.js\");\n/* harmony import */ var _smithy_protocol_http__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_smithy_protocol_http__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _smithy_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @smithy/types */ \"(rsc)/./node_modules/@smithy/types/dist-cjs/index.js\");\n/* harmony import */ var _smithy_types__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_smithy_types__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _smithy_util_middleware__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @smithy/util-middleware */ \"(rsc)/./node_modules/@smithy/util-middleware/dist-cjs/index.js\");\n/* harmony import */ var _smithy_util_middleware__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_smithy_util_middleware__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\nconst defaultErrorHandler = (signingProperties)=>(error)=>{\n        throw error;\n    };\nconst defaultSuccessHandler = (httpResponse, signingProperties)=>{};\nconst httpSigningMiddleware = (config)=>(next, context)=>async (args)=>{\n            if (!_smithy_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest.isInstance(args.request)) {\n                return next(args);\n            }\n            const smithyContext = (0,_smithy_util_middleware__WEBPACK_IMPORTED_MODULE_2__.getSmithyContext)(context);\n            const scheme = smithyContext.selectedHttpAuthScheme;\n            if (!scheme) {\n                throw new Error(`No HttpAuthScheme was selected: unable to sign request`);\n            }\n            const { httpAuthOption: { signingProperties = {} }, identity, signer } = scheme;\n            const output = await next({\n                ...args,\n                request: await signer.sign(args.request, identity, signingProperties)\n            }).catch((signer.errorHandler || defaultErrorHandler)(signingProperties));\n            (signer.successHandler || defaultSuccessHandler)(output.response, signingProperties);\n            return output;\n        };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9jb3JlL2Rpc3QtZXMvbWlkZGxld2FyZS1odHRwLXNpZ25pbmcvaHR0cFNpZ25pbmdNaWRkbGV3YXJlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBb0Q7QUFDQTtBQUNPO0FBQzNELE1BQU1HLHNCQUFzQixDQUFDQyxvQkFBc0IsQ0FBQ0M7UUFDaEQsTUFBTUE7SUFDVjtBQUNBLE1BQU1DLHdCQUF3QixDQUFDQyxjQUFjSCxxQkFBd0I7QUFDOUQsTUFBTUksd0JBQXdCLENBQUNDLFNBQVcsQ0FBQ0MsTUFBTUMsVUFBWSxPQUFPQztZQUN2RSxJQUFJLENBQUNaLDhEQUFXQSxDQUFDYSxVQUFVLENBQUNELEtBQUtFLE9BQU8sR0FBRztnQkFDdkMsT0FBT0osS0FBS0U7WUFDaEI7WUFDQSxNQUFNRyxnQkFBZ0JiLHlFQUFnQkEsQ0FBQ1M7WUFDdkMsTUFBTUssU0FBU0QsY0FBY0Usc0JBQXNCO1lBQ25ELElBQUksQ0FBQ0QsUUFBUTtnQkFDVCxNQUFNLElBQUlFLE1BQU0sQ0FBQyxzREFBc0QsQ0FBQztZQUM1RTtZQUNBLE1BQU0sRUFBRUMsZ0JBQWdCLEVBQUVmLG9CQUFvQixDQUFDLENBQUMsRUFBRSxFQUFFZ0IsUUFBUSxFQUFFQyxNQUFNLEVBQUcsR0FBR0w7WUFDMUUsTUFBTU0sU0FBUyxNQUFNWixLQUFLO2dCQUN0QixHQUFHRSxJQUFJO2dCQUNQRSxTQUFTLE1BQU1PLE9BQU9FLElBQUksQ0FBQ1gsS0FBS0UsT0FBTyxFQUFFTSxVQUFVaEI7WUFDdkQsR0FBR29CLEtBQUssQ0FBQyxDQUFDSCxPQUFPSSxZQUFZLElBQUl0QixtQkFBa0IsRUFBR0M7WUFDckRpQixDQUFBQSxPQUFPSyxjQUFjLElBQUlwQixxQkFBb0IsRUFBR2dCLE9BQU9LLFFBQVEsRUFBRXZCO1lBQ2xFLE9BQU9rQjtRQUNYLEVBQUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbG91ZHNoaWZ0Ly4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvY29yZS9kaXN0LWVzL21pZGRsZXdhcmUtaHR0cC1zaWduaW5nL2h0dHBTaWduaW5nTWlkZGxld2FyZS5qcz82YzFiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBSZXF1ZXN0IH0gZnJvbSBcIkBzbWl0aHkvcHJvdG9jb2wtaHR0cFwiO1xuaW1wb3J0IHsgU01JVEhZX0NPTlRFWFRfS0VZLCB9IGZyb20gXCJAc21pdGh5L3R5cGVzXCI7XG5pbXBvcnQgeyBnZXRTbWl0aHlDb250ZXh0IH0gZnJvbSBcIkBzbWl0aHkvdXRpbC1taWRkbGV3YXJlXCI7XG5jb25zdCBkZWZhdWx0RXJyb3JIYW5kbGVyID0gKHNpZ25pbmdQcm9wZXJ0aWVzKSA9PiAoZXJyb3IpID0+IHtcbiAgICB0aHJvdyBlcnJvcjtcbn07XG5jb25zdCBkZWZhdWx0U3VjY2Vzc0hhbmRsZXIgPSAoaHR0cFJlc3BvbnNlLCBzaWduaW5nUHJvcGVydGllcykgPT4geyB9O1xuZXhwb3J0IGNvbnN0IGh0dHBTaWduaW5nTWlkZGxld2FyZSA9IChjb25maWcpID0+IChuZXh0LCBjb250ZXh0KSA9PiBhc3luYyAoYXJncykgPT4ge1xuICAgIGlmICghSHR0cFJlcXVlc3QuaXNJbnN0YW5jZShhcmdzLnJlcXVlc3QpKSB7XG4gICAgICAgIHJldHVybiBuZXh0KGFyZ3MpO1xuICAgIH1cbiAgICBjb25zdCBzbWl0aHlDb250ZXh0ID0gZ2V0U21pdGh5Q29udGV4dChjb250ZXh0KTtcbiAgICBjb25zdCBzY2hlbWUgPSBzbWl0aHlDb250ZXh0LnNlbGVjdGVkSHR0cEF1dGhTY2hlbWU7XG4gICAgaWYgKCFzY2hlbWUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBObyBIdHRwQXV0aFNjaGVtZSB3YXMgc2VsZWN0ZWQ6IHVuYWJsZSB0byBzaWduIHJlcXVlc3RgKTtcbiAgICB9XG4gICAgY29uc3QgeyBodHRwQXV0aE9wdGlvbjogeyBzaWduaW5nUHJvcGVydGllcyA9IHt9IH0sIGlkZW50aXR5LCBzaWduZXIsIH0gPSBzY2hlbWU7XG4gICAgY29uc3Qgb3V0cHV0ID0gYXdhaXQgbmV4dCh7XG4gICAgICAgIC4uLmFyZ3MsXG4gICAgICAgIHJlcXVlc3Q6IGF3YWl0IHNpZ25lci5zaWduKGFyZ3MucmVxdWVzdCwgaWRlbnRpdHksIHNpZ25pbmdQcm9wZXJ0aWVzKSxcbiAgICB9KS5jYXRjaCgoc2lnbmVyLmVycm9ySGFuZGxlciB8fCBkZWZhdWx0RXJyb3JIYW5kbGVyKShzaWduaW5nUHJvcGVydGllcykpO1xuICAgIChzaWduZXIuc3VjY2Vzc0hhbmRsZXIgfHwgZGVmYXVsdFN1Y2Nlc3NIYW5kbGVyKShvdXRwdXQucmVzcG9uc2UsIHNpZ25pbmdQcm9wZXJ0aWVzKTtcbiAgICByZXR1cm4gb3V0cHV0O1xufTtcbiJdLCJuYW1lcyI6WyJIdHRwUmVxdWVzdCIsIlNNSVRIWV9DT05URVhUX0tFWSIsImdldFNtaXRoeUNvbnRleHQiLCJkZWZhdWx0RXJyb3JIYW5kbGVyIiwic2lnbmluZ1Byb3BlcnRpZXMiLCJlcnJvciIsImRlZmF1bHRTdWNjZXNzSGFuZGxlciIsImh0dHBSZXNwb25zZSIsImh0dHBTaWduaW5nTWlkZGxld2FyZSIsImNvbmZpZyIsIm5leHQiLCJjb250ZXh0IiwiYXJncyIsImlzSW5zdGFuY2UiLCJyZXF1ZXN0Iiwic21pdGh5Q29udGV4dCIsInNjaGVtZSIsInNlbGVjdGVkSHR0cEF1dGhTY2hlbWUiLCJFcnJvciIsImh0dHBBdXRoT3B0aW9uIiwiaWRlbnRpdHkiLCJzaWduZXIiLCJvdXRwdXQiLCJzaWduIiwiY2F0Y2giLCJlcnJvckhhbmRsZXIiLCJzdWNjZXNzSGFuZGxlciIsInJlc3BvbnNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/core/dist-es/middleware-http-signing/httpSigningMiddleware.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/core/dist-es/middleware-http-signing/index.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@smithy/core/dist-es/middleware-http-signing/index.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getHttpSigningPlugin: () => (/* reexport safe */ _getHttpSigningMiddleware__WEBPACK_IMPORTED_MODULE_1__.getHttpSigningPlugin),\n/* harmony export */   httpSigningMiddleware: () => (/* reexport safe */ _httpSigningMiddleware__WEBPACK_IMPORTED_MODULE_0__.httpSigningMiddleware),\n/* harmony export */   httpSigningMiddlewareOptions: () => (/* reexport safe */ _getHttpSigningMiddleware__WEBPACK_IMPORTED_MODULE_1__.httpSigningMiddlewareOptions)\n/* harmony export */ });\n/* harmony import */ var _httpSigningMiddleware__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./httpSigningMiddleware */ \"(rsc)/./node_modules/@smithy/core/dist-es/middleware-http-signing/httpSigningMiddleware.js\");\n/* harmony import */ var _getHttpSigningMiddleware__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getHttpSigningMiddleware */ \"(rsc)/./node_modules/@smithy/core/dist-es/middleware-http-signing/getHttpSigningMiddleware.js\");\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9jb3JlL2Rpc3QtZXMvbWlkZGxld2FyZS1odHRwLXNpZ25pbmcvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBd0M7QUFDRyIsInNvdXJjZXMiOlsid2VicGFjazovL2Nsb3Vkc2hpZnQvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9jb3JlL2Rpc3QtZXMvbWlkZGxld2FyZS1odHRwLXNpZ25pbmcvaW5kZXguanM/MGRmZiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tIFwiLi9odHRwU2lnbmluZ01pZGRsZXdhcmVcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2dldEh0dHBTaWduaW5nTWlkZGxld2FyZVwiO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/core/dist-es/middleware-http-signing/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/core/dist-es/normalizeProvider.js":
/*!****************************************************************!*\
  !*** ./node_modules/@smithy/core/dist-es/normalizeProvider.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   normalizeProvider: () => (/* binding */ normalizeProvider)\n/* harmony export */ });\nconst normalizeProvider = (input)=>{\n    if (typeof input === \"function\") return input;\n    const promisified = Promise.resolve(input);\n    return ()=>promisified;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9jb3JlL2Rpc3QtZXMvbm9ybWFsaXplUHJvdmlkZXIuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLE1BQU1BLG9CQUFvQixDQUFDQztJQUM5QixJQUFJLE9BQU9BLFVBQVUsWUFDakIsT0FBT0E7SUFDWCxNQUFNQyxjQUFjQyxRQUFRQyxPQUFPLENBQUNIO0lBQ3BDLE9BQU8sSUFBTUM7QUFDakIsRUFBRSIsInNvdXJjZXMiOlsid2VicGFjazovL2Nsb3Vkc2hpZnQvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9jb3JlL2Rpc3QtZXMvbm9ybWFsaXplUHJvdmlkZXIuanM/MGJjNCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3Qgbm9ybWFsaXplUHJvdmlkZXIgPSAoaW5wdXQpID0+IHtcbiAgICBpZiAodHlwZW9mIGlucHV0ID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIHJldHVybiBpbnB1dDtcbiAgICBjb25zdCBwcm9taXNpZmllZCA9IFByb21pc2UucmVzb2x2ZShpbnB1dCk7XG4gICAgcmV0dXJuICgpID0+IHByb21pc2lmaWVkO1xufTtcbiJdLCJuYW1lcyI6WyJub3JtYWxpemVQcm92aWRlciIsImlucHV0IiwicHJvbWlzaWZpZWQiLCJQcm9taXNlIiwicmVzb2x2ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/core/dist-es/normalizeProvider.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/core/dist-es/pagination/createPaginator.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@smithy/core/dist-es/pagination/createPaginator.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createPaginator: () => (/* binding */ createPaginator)\n/* harmony export */ });\nconst makePagedClientRequest = async (CommandCtor, client, input, withCommand = (_)=>_, ...args)=>{\n    let command = new CommandCtor(input);\n    command = withCommand(command) ?? command;\n    return await client.send(command, ...args);\n};\nfunction createPaginator(ClientCtor, CommandCtor, inputTokenName, outputTokenName, pageSizeTokenName) {\n    return async function* paginateOperation(config, input, ...additionalArguments) {\n        const _input = input;\n        let token = config.startingToken ?? _input[inputTokenName];\n        let hasNext = true;\n        let page;\n        while(hasNext){\n            _input[inputTokenName] = token;\n            if (pageSizeTokenName) {\n                _input[pageSizeTokenName] = _input[pageSizeTokenName] ?? config.pageSize;\n            }\n            if (config.client instanceof ClientCtor) {\n                page = await makePagedClientRequest(CommandCtor, config.client, input, config.withCommand, ...additionalArguments);\n            } else {\n                throw new Error(`Invalid client, expected instance of ${ClientCtor.name}`);\n            }\n            yield page;\n            const prevToken = token;\n            token = get(page, outputTokenName);\n            hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));\n        }\n        return undefined;\n    };\n}\nconst get = (fromObject, path)=>{\n    let cursor = fromObject;\n    const pathComponents = path.split(\".\");\n    for (const step of pathComponents){\n        if (!cursor || typeof cursor !== \"object\") {\n            return undefined;\n        }\n        cursor = cursor[step];\n    }\n    return cursor;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9jb3JlL2Rpc3QtZXMvcGFnaW5hdGlvbi9jcmVhdGVQYWdpbmF0b3IuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE1BQU1BLHlCQUF5QixPQUFPQyxhQUFhQyxRQUFRQyxPQUFPQyxjQUFjLENBQUNDLElBQU1BLENBQUMsRUFBRSxHQUFHQztJQUN6RixJQUFJQyxVQUFVLElBQUlOLFlBQVlFO0lBQzlCSSxVQUFVSCxZQUFZRyxZQUFZQTtJQUNsQyxPQUFPLE1BQU1MLE9BQU9NLElBQUksQ0FBQ0QsWUFBWUQ7QUFDekM7QUFDTyxTQUFTRyxnQkFBZ0JDLFVBQVUsRUFBRVQsV0FBVyxFQUFFVSxjQUFjLEVBQUVDLGVBQWUsRUFBRUMsaUJBQWlCO0lBQ3ZHLE9BQU8sZ0JBQWdCQyxrQkFBa0JDLE1BQU0sRUFBRVosS0FBSyxFQUFFLEdBQUdhLG1CQUFtQjtRQUMxRSxNQUFNQyxTQUFTZDtRQUNmLElBQUllLFFBQVFILE9BQU9JLGFBQWEsSUFBSUYsTUFBTSxDQUFDTixlQUFlO1FBQzFELElBQUlTLFVBQVU7UUFDZCxJQUFJQztRQUNKLE1BQU9ELFFBQVM7WUFDWkgsTUFBTSxDQUFDTixlQUFlLEdBQUdPO1lBQ3pCLElBQUlMLG1CQUFtQjtnQkFDbkJJLE1BQU0sQ0FBQ0osa0JBQWtCLEdBQUdJLE1BQU0sQ0FBQ0osa0JBQWtCLElBQUlFLE9BQU9PLFFBQVE7WUFDNUU7WUFDQSxJQUFJUCxPQUFPYixNQUFNLFlBQVlRLFlBQVk7Z0JBQ3JDVyxPQUFPLE1BQU1yQix1QkFBdUJDLGFBQWFjLE9BQU9iLE1BQU0sRUFBRUMsT0FBT1ksT0FBT1gsV0FBVyxLQUFLWTtZQUNsRyxPQUNLO2dCQUNELE1BQU0sSUFBSU8sTUFBTSxDQUFDLHFDQUFxQyxFQUFFYixXQUFXYyxJQUFJLENBQUMsQ0FBQztZQUM3RTtZQUNBLE1BQU1IO1lBQ04sTUFBTUksWUFBWVA7WUFDbEJBLFFBQVFRLElBQUlMLE1BQU1UO1lBQ2xCUSxVQUFVLENBQUMsQ0FBRUYsQ0FBQUEsU0FBVSxFQUFDSCxPQUFPWSxlQUFlLElBQUlULFVBQVVPLFNBQVEsQ0FBQztRQUN6RTtRQUNBLE9BQU9HO0lBQ1g7QUFDSjtBQUNBLE1BQU1GLE1BQU0sQ0FBQ0csWUFBWUM7SUFDckIsSUFBSUMsU0FBU0Y7SUFDYixNQUFNRyxpQkFBaUJGLEtBQUtHLEtBQUssQ0FBQztJQUNsQyxLQUFLLE1BQU1DLFFBQVFGLGVBQWdCO1FBQy9CLElBQUksQ0FBQ0QsVUFBVSxPQUFPQSxXQUFXLFVBQVU7WUFDdkMsT0FBT0g7UUFDWDtRQUNBRyxTQUFTQSxNQUFNLENBQUNHLEtBQUs7SUFDekI7SUFDQSxPQUFPSDtBQUNYIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2xvdWRzaGlmdC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L2NvcmUvZGlzdC1lcy9wYWdpbmF0aW9uL2NyZWF0ZVBhZ2luYXRvci5qcz85MTc2Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IG1ha2VQYWdlZENsaWVudFJlcXVlc3QgPSBhc3luYyAoQ29tbWFuZEN0b3IsIGNsaWVudCwgaW5wdXQsIHdpdGhDb21tYW5kID0gKF8pID0+IF8sIC4uLmFyZ3MpID0+IHtcbiAgICBsZXQgY29tbWFuZCA9IG5ldyBDb21tYW5kQ3RvcihpbnB1dCk7XG4gICAgY29tbWFuZCA9IHdpdGhDb21tYW5kKGNvbW1hbmQpID8/IGNvbW1hbmQ7XG4gICAgcmV0dXJuIGF3YWl0IGNsaWVudC5zZW5kKGNvbW1hbmQsIC4uLmFyZ3MpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVQYWdpbmF0b3IoQ2xpZW50Q3RvciwgQ29tbWFuZEN0b3IsIGlucHV0VG9rZW5OYW1lLCBvdXRwdXRUb2tlbk5hbWUsIHBhZ2VTaXplVG9rZW5OYW1lKSB7XG4gICAgcmV0dXJuIGFzeW5jIGZ1bmN0aW9uKiBwYWdpbmF0ZU9wZXJhdGlvbihjb25maWcsIGlucHV0LCAuLi5hZGRpdGlvbmFsQXJndW1lbnRzKSB7XG4gICAgICAgIGNvbnN0IF9pbnB1dCA9IGlucHV0O1xuICAgICAgICBsZXQgdG9rZW4gPSBjb25maWcuc3RhcnRpbmdUb2tlbiA/PyBfaW5wdXRbaW5wdXRUb2tlbk5hbWVdO1xuICAgICAgICBsZXQgaGFzTmV4dCA9IHRydWU7XG4gICAgICAgIGxldCBwYWdlO1xuICAgICAgICB3aGlsZSAoaGFzTmV4dCkge1xuICAgICAgICAgICAgX2lucHV0W2lucHV0VG9rZW5OYW1lXSA9IHRva2VuO1xuICAgICAgICAgICAgaWYgKHBhZ2VTaXplVG9rZW5OYW1lKSB7XG4gICAgICAgICAgICAgICAgX2lucHV0W3BhZ2VTaXplVG9rZW5OYW1lXSA9IF9pbnB1dFtwYWdlU2l6ZVRva2VuTmFtZV0gPz8gY29uZmlnLnBhZ2VTaXplO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNvbmZpZy5jbGllbnQgaW5zdGFuY2VvZiBDbGllbnRDdG9yKSB7XG4gICAgICAgICAgICAgICAgcGFnZSA9IGF3YWl0IG1ha2VQYWdlZENsaWVudFJlcXVlc3QoQ29tbWFuZEN0b3IsIGNvbmZpZy5jbGllbnQsIGlucHV0LCBjb25maWcud2l0aENvbW1hbmQsIC4uLmFkZGl0aW9uYWxBcmd1bWVudHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGNsaWVudCwgZXhwZWN0ZWQgaW5zdGFuY2Ugb2YgJHtDbGllbnRDdG9yLm5hbWV9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB5aWVsZCBwYWdlO1xuICAgICAgICAgICAgY29uc3QgcHJldlRva2VuID0gdG9rZW47XG4gICAgICAgICAgICB0b2tlbiA9IGdldChwYWdlLCBvdXRwdXRUb2tlbk5hbWUpO1xuICAgICAgICAgICAgaGFzTmV4dCA9ICEhKHRva2VuICYmICghY29uZmlnLnN0b3BPblNhbWVUb2tlbiB8fCB0b2tlbiAhPT0gcHJldlRva2VuKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9O1xufVxuY29uc3QgZ2V0ID0gKGZyb21PYmplY3QsIHBhdGgpID0+IHtcbiAgICBsZXQgY3Vyc29yID0gZnJvbU9iamVjdDtcbiAgICBjb25zdCBwYXRoQ29tcG9uZW50cyA9IHBhdGguc3BsaXQoXCIuXCIpO1xuICAgIGZvciAoY29uc3Qgc3RlcCBvZiBwYXRoQ29tcG9uZW50cykge1xuICAgICAgICBpZiAoIWN1cnNvciB8fCB0eXBlb2YgY3Vyc29yICE9PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGN1cnNvciA9IGN1cnNvcltzdGVwXTtcbiAgICB9XG4gICAgcmV0dXJuIGN1cnNvcjtcbn07XG4iXSwibmFtZXMiOlsibWFrZVBhZ2VkQ2xpZW50UmVxdWVzdCIsIkNvbW1hbmRDdG9yIiwiY2xpZW50IiwiaW5wdXQiLCJ3aXRoQ29tbWFuZCIsIl8iLCJhcmdzIiwiY29tbWFuZCIsInNlbmQiLCJjcmVhdGVQYWdpbmF0b3IiLCJDbGllbnRDdG9yIiwiaW5wdXRUb2tlbk5hbWUiLCJvdXRwdXRUb2tlbk5hbWUiLCJwYWdlU2l6ZVRva2VuTmFtZSIsInBhZ2luYXRlT3BlcmF0aW9uIiwiY29uZmlnIiwiYWRkaXRpb25hbEFyZ3VtZW50cyIsIl9pbnB1dCIsInRva2VuIiwic3RhcnRpbmdUb2tlbiIsImhhc05leHQiLCJwYWdlIiwicGFnZVNpemUiLCJFcnJvciIsIm5hbWUiLCJwcmV2VG9rZW4iLCJnZXQiLCJzdG9wT25TYW1lVG9rZW4iLCJ1bmRlZmluZWQiLCJmcm9tT2JqZWN0IiwicGF0aCIsImN1cnNvciIsInBhdGhDb21wb25lbnRzIiwic3BsaXQiLCJzdGVwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/core/dist-es/pagination/createPaginator.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/core/dist-es/protocols/requestBuilder.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@smithy/core/dist-es/protocols/requestBuilder.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   requestBuilder: () => (/* reexport safe */ _smithy_core_protocols__WEBPACK_IMPORTED_MODULE_0__.requestBuilder)\n/* harmony export */ });\n/* harmony import */ var _smithy_core_protocols__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/core/protocols */ \"(rsc)/./node_modules/@smithy/core/dist-es/submodules/protocols/index.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9jb3JlL2Rpc3QtZXMvcHJvdG9jb2xzL3JlcXVlc3RCdWlsZGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXdEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2xvdWRzaGlmdC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L2NvcmUvZGlzdC1lcy9wcm90b2NvbHMvcmVxdWVzdEJ1aWxkZXIuanM/NDg4MCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgeyByZXF1ZXN0QnVpbGRlciB9IGZyb20gXCJAc21pdGh5L2NvcmUvcHJvdG9jb2xzXCI7XG4iXSwibmFtZXMiOlsicmVxdWVzdEJ1aWxkZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/core/dist-es/protocols/requestBuilder.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/core/dist-es/setFeature.js":
/*!*********************************************************!*\
  !*** ./node_modules/@smithy/core/dist-es/setFeature.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   setFeature: () => (/* binding */ setFeature)\n/* harmony export */ });\nfunction setFeature(context, feature, value) {\n    if (!context.__smithy_context) {\n        context.__smithy_context = {\n            features: {}\n        };\n    } else if (!context.__smithy_context.features) {\n        context.__smithy_context.features = {};\n    }\n    context.__smithy_context.features[feature] = value;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9jb3JlL2Rpc3QtZXMvc2V0RmVhdHVyZS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sU0FBU0EsV0FBV0MsT0FBTyxFQUFFQyxPQUFPLEVBQUVDLEtBQUs7SUFDOUMsSUFBSSxDQUFDRixRQUFRRyxnQkFBZ0IsRUFBRTtRQUMzQkgsUUFBUUcsZ0JBQWdCLEdBQUc7WUFDdkJDLFVBQVUsQ0FBQztRQUNmO0lBQ0osT0FDSyxJQUFJLENBQUNKLFFBQVFHLGdCQUFnQixDQUFDQyxRQUFRLEVBQUU7UUFDekNKLFFBQVFHLGdCQUFnQixDQUFDQyxRQUFRLEdBQUcsQ0FBQztJQUN6QztJQUNBSixRQUFRRyxnQkFBZ0IsQ0FBQ0MsUUFBUSxDQUFDSCxRQUFRLEdBQUdDO0FBQ2pEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2xvdWRzaGlmdC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L2NvcmUvZGlzdC1lcy9zZXRGZWF0dXJlLmpzP2Q4YjEiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIHNldEZlYXR1cmUoY29udGV4dCwgZmVhdHVyZSwgdmFsdWUpIHtcbiAgICBpZiAoIWNvbnRleHQuX19zbWl0aHlfY29udGV4dCkge1xuICAgICAgICBjb250ZXh0Ll9fc21pdGh5X2NvbnRleHQgPSB7XG4gICAgICAgICAgICBmZWF0dXJlczoge30sXG4gICAgICAgIH07XG4gICAgfVxuICAgIGVsc2UgaWYgKCFjb250ZXh0Ll9fc21pdGh5X2NvbnRleHQuZmVhdHVyZXMpIHtcbiAgICAgICAgY29udGV4dC5fX3NtaXRoeV9jb250ZXh0LmZlYXR1cmVzID0ge307XG4gICAgfVxuICAgIGNvbnRleHQuX19zbWl0aHlfY29udGV4dC5mZWF0dXJlc1tmZWF0dXJlXSA9IHZhbHVlO1xufVxuIl0sIm5hbWVzIjpbInNldEZlYXR1cmUiLCJjb250ZXh0IiwiZmVhdHVyZSIsInZhbHVlIiwiX19zbWl0aHlfY29udGV4dCIsImZlYXR1cmVzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/core/dist-es/setFeature.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/core/dist-es/submodules/protocols/collect-stream-body.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@smithy/core/dist-es/submodules/protocols/collect-stream-body.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   collectBody: () => (/* binding */ collectBody)\n/* harmony export */ });\n/* harmony import */ var _smithy_util_stream__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/util-stream */ \"(rsc)/./node_modules/@smithy/util-stream/dist-cjs/index.js\");\n/* harmony import */ var _smithy_util_stream__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_smithy_util_stream__WEBPACK_IMPORTED_MODULE_0__);\n\nconst collectBody = async (streamBody = new Uint8Array(), context)=>{\n    if (streamBody instanceof Uint8Array) {\n        return _smithy_util_stream__WEBPACK_IMPORTED_MODULE_0__.Uint8ArrayBlobAdapter.mutate(streamBody);\n    }\n    if (!streamBody) {\n        return _smithy_util_stream__WEBPACK_IMPORTED_MODULE_0__.Uint8ArrayBlobAdapter.mutate(new Uint8Array());\n    }\n    const fromContext = context.streamCollector(streamBody);\n    return _smithy_util_stream__WEBPACK_IMPORTED_MODULE_0__.Uint8ArrayBlobAdapter.mutate(await fromContext);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9jb3JlL2Rpc3QtZXMvc3VibW9kdWxlcy9wcm90b2NvbHMvY29sbGVjdC1zdHJlYW0tYm9keS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBNEQ7QUFDckQsTUFBTUMsY0FBYyxPQUFPQyxhQUFhLElBQUlDLFlBQVksRUFBRUM7SUFDN0QsSUFBSUYsc0JBQXNCQyxZQUFZO1FBQ2xDLE9BQU9ILHNFQUFxQkEsQ0FBQ0ssTUFBTSxDQUFDSDtJQUN4QztJQUNBLElBQUksQ0FBQ0EsWUFBWTtRQUNiLE9BQU9GLHNFQUFxQkEsQ0FBQ0ssTUFBTSxDQUFDLElBQUlGO0lBQzVDO0lBQ0EsTUFBTUcsY0FBY0YsUUFBUUcsZUFBZSxDQUFDTDtJQUM1QyxPQUFPRixzRUFBcUJBLENBQUNLLE1BQU0sQ0FBQyxNQUFNQztBQUM5QyxFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2xvdWRzaGlmdC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L2NvcmUvZGlzdC1lcy9zdWJtb2R1bGVzL3Byb3RvY29scy9jb2xsZWN0LXN0cmVhbS1ib2R5LmpzP2NjMmQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVWludDhBcnJheUJsb2JBZGFwdGVyIH0gZnJvbSBcIkBzbWl0aHkvdXRpbC1zdHJlYW1cIjtcbmV4cG9ydCBjb25zdCBjb2xsZWN0Qm9keSA9IGFzeW5jIChzdHJlYW1Cb2R5ID0gbmV3IFVpbnQ4QXJyYXkoKSwgY29udGV4dCkgPT4ge1xuICAgIGlmIChzdHJlYW1Cb2R5IGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuICAgICAgICByZXR1cm4gVWludDhBcnJheUJsb2JBZGFwdGVyLm11dGF0ZShzdHJlYW1Cb2R5KTtcbiAgICB9XG4gICAgaWYgKCFzdHJlYW1Cb2R5KSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5QmxvYkFkYXB0ZXIubXV0YXRlKG5ldyBVaW50OEFycmF5KCkpO1xuICAgIH1cbiAgICBjb25zdCBmcm9tQ29udGV4dCA9IGNvbnRleHQuc3RyZWFtQ29sbGVjdG9yKHN0cmVhbUJvZHkpO1xuICAgIHJldHVybiBVaW50OEFycmF5QmxvYkFkYXB0ZXIubXV0YXRlKGF3YWl0IGZyb21Db250ZXh0KTtcbn07XG4iXSwibmFtZXMiOlsiVWludDhBcnJheUJsb2JBZGFwdGVyIiwiY29sbGVjdEJvZHkiLCJzdHJlYW1Cb2R5IiwiVWludDhBcnJheSIsImNvbnRleHQiLCJtdXRhdGUiLCJmcm9tQ29udGV4dCIsInN0cmVhbUNvbGxlY3RvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/core/dist-es/submodules/protocols/collect-stream-body.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/core/dist-es/submodules/protocols/extended-encode-uri-component.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@smithy/core/dist-es/submodules/protocols/extended-encode-uri-component.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   extendedEncodeURIComponent: () => (/* binding */ extendedEncodeURIComponent)\n/* harmony export */ });\nfunction extendedEncodeURIComponent(str) {\n    return encodeURIComponent(str).replace(/[!'()*]/g, function(c) {\n        return \"%\" + c.charCodeAt(0).toString(16).toUpperCase();\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9jb3JlL2Rpc3QtZXMvc3VibW9kdWxlcy9wcm90b2NvbHMvZXh0ZW5kZWQtZW5jb2RlLXVyaS1jb21wb25lbnQuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLFNBQVNBLDJCQUEyQkMsR0FBRztJQUMxQyxPQUFPQyxtQkFBbUJELEtBQUtFLE9BQU8sQ0FBQyxZQUFZLFNBQVVDLENBQUM7UUFDMUQsT0FBTyxNQUFNQSxFQUFFQyxVQUFVLENBQUMsR0FBR0MsUUFBUSxDQUFDLElBQUlDLFdBQVc7SUFDekQ7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL2Nsb3Vkc2hpZnQvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9jb3JlL2Rpc3QtZXMvc3VibW9kdWxlcy9wcm90b2NvbHMvZXh0ZW5kZWQtZW5jb2RlLXVyaS1jb21wb25lbnQuanM/YWE5YSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gZXh0ZW5kZWRFbmNvZGVVUklDb21wb25lbnQoc3RyKSB7XG4gICAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChzdHIpLnJlcGxhY2UoL1shJygpKl0vZywgZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgcmV0dXJuIFwiJVwiICsgYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpO1xuICAgIH0pO1xufVxuIl0sIm5hbWVzIjpbImV4dGVuZGVkRW5jb2RlVVJJQ29tcG9uZW50Iiwic3RyIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwicmVwbGFjZSIsImMiLCJjaGFyQ29kZUF0IiwidG9TdHJpbmciLCJ0b1VwcGVyQ2FzZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/core/dist-es/submodules/protocols/extended-encode-uri-component.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/core/dist-es/submodules/protocols/index.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@smithy/core/dist-es/submodules/protocols/index.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RequestBuilder: () => (/* reexport safe */ _requestBuilder__WEBPACK_IMPORTED_MODULE_2__.RequestBuilder),\n/* harmony export */   collectBody: () => (/* reexport safe */ _collect_stream_body__WEBPACK_IMPORTED_MODULE_0__.collectBody),\n/* harmony export */   extendedEncodeURIComponent: () => (/* reexport safe */ _extended_encode_uri_component__WEBPACK_IMPORTED_MODULE_1__.extendedEncodeURIComponent),\n/* harmony export */   requestBuilder: () => (/* reexport safe */ _requestBuilder__WEBPACK_IMPORTED_MODULE_2__.requestBuilder),\n/* harmony export */   resolvedPath: () => (/* reexport safe */ _resolve_path__WEBPACK_IMPORTED_MODULE_3__.resolvedPath)\n/* harmony export */ });\n/* harmony import */ var _collect_stream_body__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./collect-stream-body */ \"(rsc)/./node_modules/@smithy/core/dist-es/submodules/protocols/collect-stream-body.js\");\n/* harmony import */ var _extended_encode_uri_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./extended-encode-uri-component */ \"(rsc)/./node_modules/@smithy/core/dist-es/submodules/protocols/extended-encode-uri-component.js\");\n/* harmony import */ var _requestBuilder__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./requestBuilder */ \"(rsc)/./node_modules/@smithy/core/dist-es/submodules/protocols/requestBuilder.js\");\n/* harmony import */ var _resolve_path__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./resolve-path */ \"(rsc)/./node_modules/@smithy/core/dist-es/submodules/protocols/resolve-path.js\");\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9jb3JlL2Rpc3QtZXMvc3VibW9kdWxlcy9wcm90b2NvbHMvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQXNDO0FBQ1U7QUFDZjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2xvdWRzaGlmdC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L2NvcmUvZGlzdC1lcy9zdWJtb2R1bGVzL3Byb3RvY29scy9pbmRleC5qcz8yZjY4Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gXCIuL2NvbGxlY3Qtc3RyZWFtLWJvZHlcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2V4dGVuZGVkLWVuY29kZS11cmktY29tcG9uZW50XCI7XG5leHBvcnQgKiBmcm9tIFwiLi9yZXF1ZXN0QnVpbGRlclwiO1xuZXhwb3J0ICogZnJvbSBcIi4vcmVzb2x2ZS1wYXRoXCI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/core/dist-es/submodules/protocols/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/core/dist-es/submodules/protocols/requestBuilder.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@smithy/core/dist-es/submodules/protocols/requestBuilder.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RequestBuilder: () => (/* binding */ RequestBuilder),\n/* harmony export */   requestBuilder: () => (/* binding */ requestBuilder)\n/* harmony export */ });\n/* harmony import */ var _smithy_protocol_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/protocol-http */ \"(rsc)/./node_modules/@smithy/protocol-http/dist-cjs/index.js\");\n/* harmony import */ var _smithy_protocol_http__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_smithy_protocol_http__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _resolve_path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./resolve-path */ \"(rsc)/./node_modules/@smithy/core/dist-es/submodules/protocols/resolve-path.js\");\n\n\nfunction requestBuilder(input, context) {\n    return new RequestBuilder(input, context);\n}\nclass RequestBuilder {\n    constructor(input, context){\n        this.input = input;\n        this.context = context;\n        this.query = {};\n        this.method = \"\";\n        this.headers = {};\n        this.path = \"\";\n        this.body = null;\n        this.hostname = \"\";\n        this.resolvePathStack = [];\n    }\n    async build() {\n        const { hostname, protocol = \"https\", port, path: basePath } = await this.context.endpoint();\n        this.path = basePath;\n        for (const resolvePath of this.resolvePathStack){\n            resolvePath(this.path);\n        }\n        return new _smithy_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n            protocol,\n            hostname: this.hostname || hostname,\n            port,\n            method: this.method,\n            path: this.path,\n            query: this.query,\n            body: this.body,\n            headers: this.headers\n        });\n    }\n    hn(hostname) {\n        this.hostname = hostname;\n        return this;\n    }\n    bp(uriLabel) {\n        this.resolvePathStack.push((basePath)=>{\n            this.path = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + uriLabel;\n        });\n        return this;\n    }\n    p(memberName, labelValueProvider, uriLabel, isGreedyLabel) {\n        this.resolvePathStack.push((path)=>{\n            this.path = (0,_resolve_path__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(path, this.input, memberName, labelValueProvider, uriLabel, isGreedyLabel);\n        });\n        return this;\n    }\n    h(headers) {\n        this.headers = headers;\n        return this;\n    }\n    q(query) {\n        this.query = query;\n        return this;\n    }\n    b(body) {\n        this.body = body;\n        return this;\n    }\n    m(method) {\n        this.method = method;\n        return this;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9jb3JlL2Rpc3QtZXMvc3VibW9kdWxlcy9wcm90b2NvbHMvcmVxdWVzdEJ1aWxkZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBb0Q7QUFDTjtBQUN2QyxTQUFTRSxlQUFlQyxLQUFLLEVBQUVDLE9BQU87SUFDekMsT0FBTyxJQUFJQyxlQUFlRixPQUFPQztBQUNyQztBQUNPLE1BQU1DO0lBQ1RDLFlBQVlILEtBQUssRUFBRUMsT0FBTyxDQUFFO1FBQ3hCLElBQUksQ0FBQ0QsS0FBSyxHQUFHQTtRQUNiLElBQUksQ0FBQ0MsT0FBTyxHQUFHQTtRQUNmLElBQUksQ0FBQ0csS0FBSyxHQUFHLENBQUM7UUFDZCxJQUFJLENBQUNDLE1BQU0sR0FBRztRQUNkLElBQUksQ0FBQ0MsT0FBTyxHQUFHLENBQUM7UUFDaEIsSUFBSSxDQUFDQyxJQUFJLEdBQUc7UUFDWixJQUFJLENBQUNDLElBQUksR0FBRztRQUNaLElBQUksQ0FBQ0MsUUFBUSxHQUFHO1FBQ2hCLElBQUksQ0FBQ0MsZ0JBQWdCLEdBQUcsRUFBRTtJQUM5QjtJQUNBLE1BQU1DLFFBQVE7UUFDVixNQUFNLEVBQUVGLFFBQVEsRUFBRUcsV0FBVyxPQUFPLEVBQUVDLElBQUksRUFBRU4sTUFBTU8sUUFBUSxFQUFFLEdBQUcsTUFBTSxJQUFJLENBQUNiLE9BQU8sQ0FBQ2MsUUFBUTtRQUMxRixJQUFJLENBQUNSLElBQUksR0FBR087UUFDWixLQUFLLE1BQU1FLGVBQWUsSUFBSSxDQUFDTixnQkFBZ0IsQ0FBRTtZQUM3Q00sWUFBWSxJQUFJLENBQUNULElBQUk7UUFDekI7UUFDQSxPQUFPLElBQUlWLDhEQUFXQSxDQUFDO1lBQ25CZTtZQUNBSCxVQUFVLElBQUksQ0FBQ0EsUUFBUSxJQUFJQTtZQUMzQkk7WUFDQVIsUUFBUSxJQUFJLENBQUNBLE1BQU07WUFDbkJFLE1BQU0sSUFBSSxDQUFDQSxJQUFJO1lBQ2ZILE9BQU8sSUFBSSxDQUFDQSxLQUFLO1lBQ2pCSSxNQUFNLElBQUksQ0FBQ0EsSUFBSTtZQUNmRixTQUFTLElBQUksQ0FBQ0EsT0FBTztRQUN6QjtJQUNKO0lBQ0FXLEdBQUdSLFFBQVEsRUFBRTtRQUNULElBQUksQ0FBQ0EsUUFBUSxHQUFHQTtRQUNoQixPQUFPLElBQUk7SUFDZjtJQUNBUyxHQUFHQyxRQUFRLEVBQUU7UUFDVCxJQUFJLENBQUNULGdCQUFnQixDQUFDVSxJQUFJLENBQUMsQ0FBQ047WUFDeEIsSUFBSSxDQUFDUCxJQUFJLEdBQUcsQ0FBQyxFQUFFTyxVQUFVTyxTQUFTLE9BQU9QLFNBQVNRLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBS1IsWUFBWSxHQUFHLENBQUMsR0FBR0s7UUFDeEY7UUFDQSxPQUFPLElBQUk7SUFDZjtJQUNBSSxFQUFFQyxVQUFVLEVBQUVDLGtCQUFrQixFQUFFTixRQUFRLEVBQUVPLGFBQWEsRUFBRTtRQUN2RCxJQUFJLENBQUNoQixnQkFBZ0IsQ0FBQ1UsSUFBSSxDQUFDLENBQUNiO1lBQ3hCLElBQUksQ0FBQ0EsSUFBSSxHQUFHVCwyREFBWUEsQ0FBQ1MsTUFBTSxJQUFJLENBQUNQLEtBQUssRUFBRXdCLFlBQVlDLG9CQUFvQk4sVUFBVU87UUFDekY7UUFDQSxPQUFPLElBQUk7SUFDZjtJQUNBQyxFQUFFckIsT0FBTyxFQUFFO1FBQ1AsSUFBSSxDQUFDQSxPQUFPLEdBQUdBO1FBQ2YsT0FBTyxJQUFJO0lBQ2Y7SUFDQXNCLEVBQUV4QixLQUFLLEVBQUU7UUFDTCxJQUFJLENBQUNBLEtBQUssR0FBR0E7UUFDYixPQUFPLElBQUk7SUFDZjtJQUNBeUIsRUFBRXJCLElBQUksRUFBRTtRQUNKLElBQUksQ0FBQ0EsSUFBSSxHQUFHQTtRQUNaLE9BQU8sSUFBSTtJQUNmO0lBQ0FzQixFQUFFekIsTUFBTSxFQUFFO1FBQ04sSUFBSSxDQUFDQSxNQUFNLEdBQUdBO1FBQ2QsT0FBTyxJQUFJO0lBQ2Y7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL2Nsb3Vkc2hpZnQvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9jb3JlL2Rpc3QtZXMvc3VibW9kdWxlcy9wcm90b2NvbHMvcmVxdWVzdEJ1aWxkZXIuanM/ZTIxNyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwUmVxdWVzdCB9IGZyb20gXCJAc21pdGh5L3Byb3RvY29sLWh0dHBcIjtcbmltcG9ydCB7IHJlc29sdmVkUGF0aCB9IGZyb20gXCIuL3Jlc29sdmUtcGF0aFwiO1xuZXhwb3J0IGZ1bmN0aW9uIHJlcXVlc3RCdWlsZGVyKGlucHV0LCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIG5ldyBSZXF1ZXN0QnVpbGRlcihpbnB1dCwgY29udGV4dCk7XG59XG5leHBvcnQgY2xhc3MgUmVxdWVzdEJ1aWxkZXIge1xuICAgIGNvbnN0cnVjdG9yKGlucHV0LCBjb250ZXh0KSB7XG4gICAgICAgIHRoaXMuaW5wdXQgPSBpbnB1dDtcbiAgICAgICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgICAgICAgdGhpcy5xdWVyeSA9IHt9O1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwiXCI7XG4gICAgICAgIHRoaXMuaGVhZGVycyA9IHt9O1xuICAgICAgICB0aGlzLnBhdGggPSBcIlwiO1xuICAgICAgICB0aGlzLmJvZHkgPSBudWxsO1xuICAgICAgICB0aGlzLmhvc3RuYW1lID0gXCJcIjtcbiAgICAgICAgdGhpcy5yZXNvbHZlUGF0aFN0YWNrID0gW107XG4gICAgfVxuICAgIGFzeW5jIGJ1aWxkKCkge1xuICAgICAgICBjb25zdCB7IGhvc3RuYW1lLCBwcm90b2NvbCA9IFwiaHR0cHNcIiwgcG9ydCwgcGF0aDogYmFzZVBhdGggfSA9IGF3YWl0IHRoaXMuY29udGV4dC5lbmRwb2ludCgpO1xuICAgICAgICB0aGlzLnBhdGggPSBiYXNlUGF0aDtcbiAgICAgICAgZm9yIChjb25zdCByZXNvbHZlUGF0aCBvZiB0aGlzLnJlc29sdmVQYXRoU3RhY2spIHtcbiAgICAgICAgICAgIHJlc29sdmVQYXRoKHRoaXMucGF0aCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBIdHRwUmVxdWVzdCh7XG4gICAgICAgICAgICBwcm90b2NvbCxcbiAgICAgICAgICAgIGhvc3RuYW1lOiB0aGlzLmhvc3RuYW1lIHx8IGhvc3RuYW1lLFxuICAgICAgICAgICAgcG9ydCxcbiAgICAgICAgICAgIG1ldGhvZDogdGhpcy5tZXRob2QsXG4gICAgICAgICAgICBwYXRoOiB0aGlzLnBhdGgsXG4gICAgICAgICAgICBxdWVyeTogdGhpcy5xdWVyeSxcbiAgICAgICAgICAgIGJvZHk6IHRoaXMuYm9keSxcbiAgICAgICAgICAgIGhlYWRlcnM6IHRoaXMuaGVhZGVycyxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGhuKGhvc3RuYW1lKSB7XG4gICAgICAgIHRoaXMuaG9zdG5hbWUgPSBob3N0bmFtZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGJwKHVyaUxhYmVsKSB7XG4gICAgICAgIHRoaXMucmVzb2x2ZVBhdGhTdGFjay5wdXNoKChiYXNlUGF0aCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5wYXRoID0gYCR7YmFzZVBhdGg/LmVuZHNXaXRoKFwiL1wiKSA/IGJhc2VQYXRoLnNsaWNlKDAsIC0xKSA6IGJhc2VQYXRoIHx8IFwiXCJ9YCArIHVyaUxhYmVsO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHAobWVtYmVyTmFtZSwgbGFiZWxWYWx1ZVByb3ZpZGVyLCB1cmlMYWJlbCwgaXNHcmVlZHlMYWJlbCkge1xuICAgICAgICB0aGlzLnJlc29sdmVQYXRoU3RhY2sucHVzaCgocGF0aCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5wYXRoID0gcmVzb2x2ZWRQYXRoKHBhdGgsIHRoaXMuaW5wdXQsIG1lbWJlck5hbWUsIGxhYmVsVmFsdWVQcm92aWRlciwgdXJpTGFiZWwsIGlzR3JlZWR5TGFiZWwpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGgoaGVhZGVycykge1xuICAgICAgICB0aGlzLmhlYWRlcnMgPSBoZWFkZXJzO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgcShxdWVyeSkge1xuICAgICAgICB0aGlzLnF1ZXJ5ID0gcXVlcnk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBiKGJvZHkpIHtcbiAgICAgICAgdGhpcy5ib2R5ID0gYm9keTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIG0obWV0aG9kKSB7XG4gICAgICAgIHRoaXMubWV0aG9kID0gbWV0aG9kO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59XG4iXSwibmFtZXMiOlsiSHR0cFJlcXVlc3QiLCJyZXNvbHZlZFBhdGgiLCJyZXF1ZXN0QnVpbGRlciIsImlucHV0IiwiY29udGV4dCIsIlJlcXVlc3RCdWlsZGVyIiwiY29uc3RydWN0b3IiLCJxdWVyeSIsIm1ldGhvZCIsImhlYWRlcnMiLCJwYXRoIiwiYm9keSIsImhvc3RuYW1lIiwicmVzb2x2ZVBhdGhTdGFjayIsImJ1aWxkIiwicHJvdG9jb2wiLCJwb3J0IiwiYmFzZVBhdGgiLCJlbmRwb2ludCIsInJlc29sdmVQYXRoIiwiaG4iLCJicCIsInVyaUxhYmVsIiwicHVzaCIsImVuZHNXaXRoIiwic2xpY2UiLCJwIiwibWVtYmVyTmFtZSIsImxhYmVsVmFsdWVQcm92aWRlciIsImlzR3JlZWR5TGFiZWwiLCJoIiwicSIsImIiLCJtIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/core/dist-es/submodules/protocols/requestBuilder.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/core/dist-es/submodules/protocols/resolve-path.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@smithy/core/dist-es/submodules/protocols/resolve-path.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   resolvedPath: () => (/* binding */ resolvedPath)\n/* harmony export */ });\n/* harmony import */ var _extended_encode_uri_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./extended-encode-uri-component */ \"(rsc)/./node_modules/@smithy/core/dist-es/submodules/protocols/extended-encode-uri-component.js\");\n\nconst resolvedPath = (resolvedPath, input, memberName, labelValueProvider, uriLabel, isGreedyLabel)=>{\n    if (input != null && input[memberName] !== undefined) {\n        const labelValue = labelValueProvider();\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: \" + memberName + \".\");\n        }\n        resolvedPath = resolvedPath.replace(uriLabel, isGreedyLabel ? labelValue.split(\"/\").map((segment)=>(0,_extended_encode_uri_component__WEBPACK_IMPORTED_MODULE_0__.extendedEncodeURIComponent)(segment)).join(\"/\") : (0,_extended_encode_uri_component__WEBPACK_IMPORTED_MODULE_0__.extendedEncodeURIComponent)(labelValue));\n    } else {\n        throw new Error(\"No value provided for input HTTP label: \" + memberName + \".\");\n    }\n    return resolvedPath;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9jb3JlL2Rpc3QtZXMvc3VibW9kdWxlcy9wcm90b2NvbHMvcmVzb2x2ZS1wYXRoLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQTZFO0FBQ3RFLE1BQU1DLGVBQWUsQ0FBQ0EsY0FBY0MsT0FBT0MsWUFBWUMsb0JBQW9CQyxVQUFVQztJQUN4RixJQUFJSixTQUFTLFFBQVFBLEtBQUssQ0FBQ0MsV0FBVyxLQUFLSSxXQUFXO1FBQ2xELE1BQU1DLGFBQWFKO1FBQ25CLElBQUlJLFdBQVdDLE1BQU0sSUFBSSxHQUFHO1lBQ3hCLE1BQU0sSUFBSUMsTUFBTSxnREFBZ0RQLGFBQWE7UUFDakY7UUFDQUYsZUFBZUEsYUFBYVUsT0FBTyxDQUFDTixVQUFVQyxnQkFDeENFLFdBQ0dJLEtBQUssQ0FBQyxLQUNOQyxHQUFHLENBQUMsQ0FBQ0MsVUFBWWQsMEZBQTBCQSxDQUFDYyxVQUM1Q0MsSUFBSSxDQUFDLE9BQ1JmLDBGQUEwQkEsQ0FBQ1E7SUFDckMsT0FDSztRQUNELE1BQU0sSUFBSUUsTUFBTSw2Q0FBNkNQLGFBQWE7SUFDOUU7SUFDQSxPQUFPRjtBQUNYLEVBQUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbG91ZHNoaWZ0Ly4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvY29yZS9kaXN0LWVzL3N1Ym1vZHVsZXMvcHJvdG9jb2xzL3Jlc29sdmUtcGF0aC5qcz9kNTMyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGV4dGVuZGVkRW5jb2RlVVJJQ29tcG9uZW50IH0gZnJvbSBcIi4vZXh0ZW5kZWQtZW5jb2RlLXVyaS1jb21wb25lbnRcIjtcbmV4cG9ydCBjb25zdCByZXNvbHZlZFBhdGggPSAocmVzb2x2ZWRQYXRoLCBpbnB1dCwgbWVtYmVyTmFtZSwgbGFiZWxWYWx1ZVByb3ZpZGVyLCB1cmlMYWJlbCwgaXNHcmVlZHlMYWJlbCkgPT4ge1xuICAgIGlmIChpbnB1dCAhPSBudWxsICYmIGlucHV0W21lbWJlck5hbWVdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29uc3QgbGFiZWxWYWx1ZSA9IGxhYmVsVmFsdWVQcm92aWRlcigpO1xuICAgICAgICBpZiAobGFiZWxWYWx1ZS5sZW5ndGggPD0gMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRW1wdHkgdmFsdWUgcHJvdmlkZWQgZm9yIGlucHV0IEhUVFAgbGFiZWw6IFwiICsgbWVtYmVyTmFtZSArIFwiLlwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXNvbHZlZFBhdGggPSByZXNvbHZlZFBhdGgucmVwbGFjZSh1cmlMYWJlbCwgaXNHcmVlZHlMYWJlbFxuICAgICAgICAgICAgPyBsYWJlbFZhbHVlXG4gICAgICAgICAgICAgICAgLnNwbGl0KFwiL1wiKVxuICAgICAgICAgICAgICAgIC5tYXAoKHNlZ21lbnQpID0+IGV4dGVuZGVkRW5jb2RlVVJJQ29tcG9uZW50KHNlZ21lbnQpKVxuICAgICAgICAgICAgICAgIC5qb2luKFwiL1wiKVxuICAgICAgICAgICAgOiBleHRlbmRlZEVuY29kZVVSSUNvbXBvbmVudChsYWJlbFZhbHVlKSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyB2YWx1ZSBwcm92aWRlZCBmb3IgaW5wdXQgSFRUUCBsYWJlbDogXCIgKyBtZW1iZXJOYW1lICsgXCIuXCIpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzb2x2ZWRQYXRoO1xufTtcbiJdLCJuYW1lcyI6WyJleHRlbmRlZEVuY29kZVVSSUNvbXBvbmVudCIsInJlc29sdmVkUGF0aCIsImlucHV0IiwibWVtYmVyTmFtZSIsImxhYmVsVmFsdWVQcm92aWRlciIsInVyaUxhYmVsIiwiaXNHcmVlZHlMYWJlbCIsInVuZGVmaW5lZCIsImxhYmVsVmFsdWUiLCJsZW5ndGgiLCJFcnJvciIsInJlcGxhY2UiLCJzcGxpdCIsIm1hcCIsInNlZ21lbnQiLCJqb2luIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/core/dist-es/submodules/protocols/resolve-path.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/core/dist-es/util-identity-and-auth/DefaultIdentityProviderConfig.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@smithy/core/dist-es/util-identity-and-auth/DefaultIdentityProviderConfig.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultIdentityProviderConfig: () => (/* binding */ DefaultIdentityProviderConfig)\n/* harmony export */ });\nclass DefaultIdentityProviderConfig {\n    constructor(config){\n        this.authSchemes = new Map();\n        for (const [key, value] of Object.entries(config)){\n            if (value !== undefined) {\n                this.authSchemes.set(key, value);\n            }\n        }\n    }\n    getIdentityProvider(schemeId) {\n        return this.authSchemes.get(schemeId);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9jb3JlL2Rpc3QtZXMvdXRpbC1pZGVudGl0eS1hbmQtYXV0aC9EZWZhdWx0SWRlbnRpdHlQcm92aWRlckNvbmZpZy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sTUFBTUE7SUFDVEMsWUFBWUMsTUFBTSxDQUFFO1FBQ2hCLElBQUksQ0FBQ0MsV0FBVyxHQUFHLElBQUlDO1FBQ3ZCLEtBQUssTUFBTSxDQUFDQyxLQUFLQyxNQUFNLElBQUlDLE9BQU9DLE9BQU8sQ0FBQ04sUUFBUztZQUMvQyxJQUFJSSxVQUFVRyxXQUFXO2dCQUNyQixJQUFJLENBQUNOLFdBQVcsQ0FBQ08sR0FBRyxDQUFDTCxLQUFLQztZQUM5QjtRQUNKO0lBQ0o7SUFDQUssb0JBQW9CQyxRQUFRLEVBQUU7UUFDMUIsT0FBTyxJQUFJLENBQUNULFdBQVcsQ0FBQ1UsR0FBRyxDQUFDRDtJQUNoQztBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2xvdWRzaGlmdC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L2NvcmUvZGlzdC1lcy91dGlsLWlkZW50aXR5LWFuZC1hdXRoL0RlZmF1bHRJZGVudGl0eVByb3ZpZGVyQ29uZmlnLmpzP2QwMWMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIERlZmF1bHRJZGVudGl0eVByb3ZpZGVyQ29uZmlnIHtcbiAgICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICAgICAgdGhpcy5hdXRoU2NoZW1lcyA9IG5ldyBNYXAoKTtcbiAgICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoY29uZmlnKSkge1xuICAgICAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmF1dGhTY2hlbWVzLnNldChrZXksIHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXRJZGVudGl0eVByb3ZpZGVyKHNjaGVtZUlkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmF1dGhTY2hlbWVzLmdldChzY2hlbWVJZCk7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbIkRlZmF1bHRJZGVudGl0eVByb3ZpZGVyQ29uZmlnIiwiY29uc3RydWN0b3IiLCJjb25maWciLCJhdXRoU2NoZW1lcyIsIk1hcCIsImtleSIsInZhbHVlIiwiT2JqZWN0IiwiZW50cmllcyIsInVuZGVmaW5lZCIsInNldCIsImdldElkZW50aXR5UHJvdmlkZXIiLCJzY2hlbWVJZCIsImdldCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/core/dist-es/util-identity-and-auth/DefaultIdentityProviderConfig.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/core/dist-es/util-identity-and-auth/httpAuthSchemes/httpApiKeyAuth.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@smithy/core/dist-es/util-identity-and-auth/httpAuthSchemes/httpApiKeyAuth.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HttpApiKeyAuthSigner: () => (/* binding */ HttpApiKeyAuthSigner)\n/* harmony export */ });\n/* harmony import */ var _smithy_protocol_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/protocol-http */ \"(rsc)/./node_modules/@smithy/protocol-http/dist-cjs/index.js\");\n/* harmony import */ var _smithy_protocol_http__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_smithy_protocol_http__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _smithy_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @smithy/types */ \"(rsc)/./node_modules/@smithy/types/dist-cjs/index.js\");\n/* harmony import */ var _smithy_types__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_smithy_types__WEBPACK_IMPORTED_MODULE_1__);\n\n\nclass HttpApiKeyAuthSigner {\n    async sign(httpRequest, identity, signingProperties) {\n        if (!signingProperties) {\n            throw new Error(\"request could not be signed with `apiKey` since the `name` and `in` signer properties are missing\");\n        }\n        if (!signingProperties.name) {\n            throw new Error(\"request could not be signed with `apiKey` since the `name` signer property is missing\");\n        }\n        if (!signingProperties.in) {\n            throw new Error(\"request could not be signed with `apiKey` since the `in` signer property is missing\");\n        }\n        if (!identity.apiKey) {\n            throw new Error(\"request could not be signed with `apiKey` since the `apiKey` is not defined\");\n        }\n        const clonedRequest = _smithy_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest.clone(httpRequest);\n        if (signingProperties.in === _smithy_types__WEBPACK_IMPORTED_MODULE_1__.HttpApiKeyAuthLocation.QUERY) {\n            clonedRequest.query[signingProperties.name] = identity.apiKey;\n        } else if (signingProperties.in === _smithy_types__WEBPACK_IMPORTED_MODULE_1__.HttpApiKeyAuthLocation.HEADER) {\n            clonedRequest.headers[signingProperties.name] = signingProperties.scheme ? `${signingProperties.scheme} ${identity.apiKey}` : identity.apiKey;\n        } else {\n            throw new Error(\"request can only be signed with `apiKey` locations `query` or `header`, \" + \"but found: `\" + signingProperties.in + \"`\");\n        }\n        return clonedRequest;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9jb3JlL2Rpc3QtZXMvdXRpbC1pZGVudGl0eS1hbmQtYXV0aC9odHRwQXV0aFNjaGVtZXMvaHR0cEFwaUtleUF1dGguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBb0Q7QUFDRztBQUNoRCxNQUFNRTtJQUNULE1BQU1DLEtBQUtDLFdBQVcsRUFBRUMsUUFBUSxFQUFFQyxpQkFBaUIsRUFBRTtRQUNqRCxJQUFJLENBQUNBLG1CQUFtQjtZQUNwQixNQUFNLElBQUlDLE1BQU07UUFDcEI7UUFDQSxJQUFJLENBQUNELGtCQUFrQkUsSUFBSSxFQUFFO1lBQ3pCLE1BQU0sSUFBSUQsTUFBTTtRQUNwQjtRQUNBLElBQUksQ0FBQ0Qsa0JBQWtCRyxFQUFFLEVBQUU7WUFDdkIsTUFBTSxJQUFJRixNQUFNO1FBQ3BCO1FBQ0EsSUFBSSxDQUFDRixTQUFTSyxNQUFNLEVBQUU7WUFDbEIsTUFBTSxJQUFJSCxNQUFNO1FBQ3BCO1FBQ0EsTUFBTUksZ0JBQWdCWCw4REFBV0EsQ0FBQ1ksS0FBSyxDQUFDUjtRQUN4QyxJQUFJRSxrQkFBa0JHLEVBQUUsS0FBS1IsaUVBQXNCQSxDQUFDWSxLQUFLLEVBQUU7WUFDdkRGLGNBQWNHLEtBQUssQ0FBQ1Isa0JBQWtCRSxJQUFJLENBQUMsR0FBR0gsU0FBU0ssTUFBTTtRQUNqRSxPQUNLLElBQUlKLGtCQUFrQkcsRUFBRSxLQUFLUixpRUFBc0JBLENBQUNjLE1BQU0sRUFBRTtZQUM3REosY0FBY0ssT0FBTyxDQUFDVixrQkFBa0JFLElBQUksQ0FBQyxHQUFHRixrQkFBa0JXLE1BQU0sR0FDbEUsQ0FBQyxFQUFFWCxrQkFBa0JXLE1BQU0sQ0FBQyxDQUFDLEVBQUVaLFNBQVNLLE1BQU0sQ0FBQyxDQUFDLEdBQ2hETCxTQUFTSyxNQUFNO1FBQ3pCLE9BQ0s7WUFDRCxNQUFNLElBQUlILE1BQU0sNkVBQ1osaUJBQ0FELGtCQUFrQkcsRUFBRSxHQUNwQjtRQUNSO1FBQ0EsT0FBT0U7SUFDWDtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2xvdWRzaGlmdC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L2NvcmUvZGlzdC1lcy91dGlsLWlkZW50aXR5LWFuZC1hdXRoL2h0dHBBdXRoU2NoZW1lcy9odHRwQXBpS2V5QXV0aC5qcz84NGI2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBSZXF1ZXN0IH0gZnJvbSBcIkBzbWl0aHkvcHJvdG9jb2wtaHR0cFwiO1xuaW1wb3J0IHsgSHR0cEFwaUtleUF1dGhMb2NhdGlvbiB9IGZyb20gXCJAc21pdGh5L3R5cGVzXCI7XG5leHBvcnQgY2xhc3MgSHR0cEFwaUtleUF1dGhTaWduZXIge1xuICAgIGFzeW5jIHNpZ24oaHR0cFJlcXVlc3QsIGlkZW50aXR5LCBzaWduaW5nUHJvcGVydGllcykge1xuICAgICAgICBpZiAoIXNpZ25pbmdQcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJyZXF1ZXN0IGNvdWxkIG5vdCBiZSBzaWduZWQgd2l0aCBgYXBpS2V5YCBzaW5jZSB0aGUgYG5hbWVgIGFuZCBgaW5gIHNpZ25lciBwcm9wZXJ0aWVzIGFyZSBtaXNzaW5nXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghc2lnbmluZ1Byb3BlcnRpZXMubmFtZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwicmVxdWVzdCBjb3VsZCBub3QgYmUgc2lnbmVkIHdpdGggYGFwaUtleWAgc2luY2UgdGhlIGBuYW1lYCBzaWduZXIgcHJvcGVydHkgaXMgbWlzc2luZ1wiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXNpZ25pbmdQcm9wZXJ0aWVzLmluKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJyZXF1ZXN0IGNvdWxkIG5vdCBiZSBzaWduZWQgd2l0aCBgYXBpS2V5YCBzaW5jZSB0aGUgYGluYCBzaWduZXIgcHJvcGVydHkgaXMgbWlzc2luZ1wiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlkZW50aXR5LmFwaUtleSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwicmVxdWVzdCBjb3VsZCBub3QgYmUgc2lnbmVkIHdpdGggYGFwaUtleWAgc2luY2UgdGhlIGBhcGlLZXlgIGlzIG5vdCBkZWZpbmVkXCIpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNsb25lZFJlcXVlc3QgPSBIdHRwUmVxdWVzdC5jbG9uZShodHRwUmVxdWVzdCk7XG4gICAgICAgIGlmIChzaWduaW5nUHJvcGVydGllcy5pbiA9PT0gSHR0cEFwaUtleUF1dGhMb2NhdGlvbi5RVUVSWSkge1xuICAgICAgICAgICAgY2xvbmVkUmVxdWVzdC5xdWVyeVtzaWduaW5nUHJvcGVydGllcy5uYW1lXSA9IGlkZW50aXR5LmFwaUtleTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChzaWduaW5nUHJvcGVydGllcy5pbiA9PT0gSHR0cEFwaUtleUF1dGhMb2NhdGlvbi5IRUFERVIpIHtcbiAgICAgICAgICAgIGNsb25lZFJlcXVlc3QuaGVhZGVyc1tzaWduaW5nUHJvcGVydGllcy5uYW1lXSA9IHNpZ25pbmdQcm9wZXJ0aWVzLnNjaGVtZVxuICAgICAgICAgICAgICAgID8gYCR7c2lnbmluZ1Byb3BlcnRpZXMuc2NoZW1lfSAke2lkZW50aXR5LmFwaUtleX1gXG4gICAgICAgICAgICAgICAgOiBpZGVudGl0eS5hcGlLZXk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJyZXF1ZXN0IGNhbiBvbmx5IGJlIHNpZ25lZCB3aXRoIGBhcGlLZXlgIGxvY2F0aW9ucyBgcXVlcnlgIG9yIGBoZWFkZXJgLCBcIiArXG4gICAgICAgICAgICAgICAgXCJidXQgZm91bmQ6IGBcIiArXG4gICAgICAgICAgICAgICAgc2lnbmluZ1Byb3BlcnRpZXMuaW4gK1xuICAgICAgICAgICAgICAgIFwiYFwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2xvbmVkUmVxdWVzdDtcbiAgICB9XG59XG4iXSwibmFtZXMiOlsiSHR0cFJlcXVlc3QiLCJIdHRwQXBpS2V5QXV0aExvY2F0aW9uIiwiSHR0cEFwaUtleUF1dGhTaWduZXIiLCJzaWduIiwiaHR0cFJlcXVlc3QiLCJpZGVudGl0eSIsInNpZ25pbmdQcm9wZXJ0aWVzIiwiRXJyb3IiLCJuYW1lIiwiaW4iLCJhcGlLZXkiLCJjbG9uZWRSZXF1ZXN0IiwiY2xvbmUiLCJRVUVSWSIsInF1ZXJ5IiwiSEVBREVSIiwiaGVhZGVycyIsInNjaGVtZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/core/dist-es/util-identity-and-auth/httpAuthSchemes/httpApiKeyAuth.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/core/dist-es/util-identity-and-auth/httpAuthSchemes/httpBearerAuth.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@smithy/core/dist-es/util-identity-and-auth/httpAuthSchemes/httpBearerAuth.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HttpBearerAuthSigner: () => (/* binding */ HttpBearerAuthSigner)\n/* harmony export */ });\n/* harmony import */ var _smithy_protocol_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/protocol-http */ \"(rsc)/./node_modules/@smithy/protocol-http/dist-cjs/index.js\");\n/* harmony import */ var _smithy_protocol_http__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_smithy_protocol_http__WEBPACK_IMPORTED_MODULE_0__);\n\nclass HttpBearerAuthSigner {\n    async sign(httpRequest, identity, signingProperties) {\n        const clonedRequest = _smithy_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest.clone(httpRequest);\n        if (!identity.token) {\n            throw new Error(\"request could not be signed with `token` since the `token` is not defined\");\n        }\n        clonedRequest.headers[\"Authorization\"] = `Bearer ${identity.token}`;\n        return clonedRequest;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9jb3JlL2Rpc3QtZXMvdXRpbC1pZGVudGl0eS1hbmQtYXV0aC9odHRwQXV0aFNjaGVtZXMvaHR0cEJlYXJlckF1dGguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQW9EO0FBQzdDLE1BQU1DO0lBQ1QsTUFBTUMsS0FBS0MsV0FBVyxFQUFFQyxRQUFRLEVBQUVDLGlCQUFpQixFQUFFO1FBQ2pELE1BQU1DLGdCQUFnQk4sOERBQVdBLENBQUNPLEtBQUssQ0FBQ0o7UUFDeEMsSUFBSSxDQUFDQyxTQUFTSSxLQUFLLEVBQUU7WUFDakIsTUFBTSxJQUFJQyxNQUFNO1FBQ3BCO1FBQ0FILGNBQWNJLE9BQU8sQ0FBQyxnQkFBZ0IsR0FBRyxDQUFDLE9BQU8sRUFBRU4sU0FBU0ksS0FBSyxDQUFDLENBQUM7UUFDbkUsT0FBT0Y7SUFDWDtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2xvdWRzaGlmdC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L2NvcmUvZGlzdC1lcy91dGlsLWlkZW50aXR5LWFuZC1hdXRoL2h0dHBBdXRoU2NoZW1lcy9odHRwQmVhcmVyQXV0aC5qcz9hNjQwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBSZXF1ZXN0IH0gZnJvbSBcIkBzbWl0aHkvcHJvdG9jb2wtaHR0cFwiO1xuZXhwb3J0IGNsYXNzIEh0dHBCZWFyZXJBdXRoU2lnbmVyIHtcbiAgICBhc3luYyBzaWduKGh0dHBSZXF1ZXN0LCBpZGVudGl0eSwgc2lnbmluZ1Byb3BlcnRpZXMpIHtcbiAgICAgICAgY29uc3QgY2xvbmVkUmVxdWVzdCA9IEh0dHBSZXF1ZXN0LmNsb25lKGh0dHBSZXF1ZXN0KTtcbiAgICAgICAgaWYgKCFpZGVudGl0eS50b2tlbikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwicmVxdWVzdCBjb3VsZCBub3QgYmUgc2lnbmVkIHdpdGggYHRva2VuYCBzaW5jZSB0aGUgYHRva2VuYCBpcyBub3QgZGVmaW5lZFwiKTtcbiAgICAgICAgfVxuICAgICAgICBjbG9uZWRSZXF1ZXN0LmhlYWRlcnNbXCJBdXRob3JpemF0aW9uXCJdID0gYEJlYXJlciAke2lkZW50aXR5LnRva2VufWA7XG4gICAgICAgIHJldHVybiBjbG9uZWRSZXF1ZXN0O1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJIdHRwUmVxdWVzdCIsIkh0dHBCZWFyZXJBdXRoU2lnbmVyIiwic2lnbiIsImh0dHBSZXF1ZXN0IiwiaWRlbnRpdHkiLCJzaWduaW5nUHJvcGVydGllcyIsImNsb25lZFJlcXVlc3QiLCJjbG9uZSIsInRva2VuIiwiRXJyb3IiLCJoZWFkZXJzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/core/dist-es/util-identity-and-auth/httpAuthSchemes/httpBearerAuth.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/core/dist-es/util-identity-and-auth/httpAuthSchemes/index.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@smithy/core/dist-es/util-identity-and-auth/httpAuthSchemes/index.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HttpApiKeyAuthSigner: () => (/* reexport safe */ _httpApiKeyAuth__WEBPACK_IMPORTED_MODULE_0__.HttpApiKeyAuthSigner),\n/* harmony export */   HttpBearerAuthSigner: () => (/* reexport safe */ _httpBearerAuth__WEBPACK_IMPORTED_MODULE_1__.HttpBearerAuthSigner),\n/* harmony export */   NoAuthSigner: () => (/* reexport safe */ _noAuth__WEBPACK_IMPORTED_MODULE_2__.NoAuthSigner)\n/* harmony export */ });\n/* harmony import */ var _httpApiKeyAuth__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./httpApiKeyAuth */ \"(rsc)/./node_modules/@smithy/core/dist-es/util-identity-and-auth/httpAuthSchemes/httpApiKeyAuth.js\");\n/* harmony import */ var _httpBearerAuth__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./httpBearerAuth */ \"(rsc)/./node_modules/@smithy/core/dist-es/util-identity-and-auth/httpAuthSchemes/httpBearerAuth.js\");\n/* harmony import */ var _noAuth__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./noAuth */ \"(rsc)/./node_modules/@smithy/core/dist-es/util-identity-and-auth/httpAuthSchemes/noAuth.js\");\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9jb3JlL2Rpc3QtZXMvdXRpbC1pZGVudGl0eS1hbmQtYXV0aC9odHRwQXV0aFNjaGVtZXMvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQWlDO0FBQ0E7QUFDUiIsInNvdXJjZXMiOlsid2VicGFjazovL2Nsb3Vkc2hpZnQvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9jb3JlL2Rpc3QtZXMvdXRpbC1pZGVudGl0eS1hbmQtYXV0aC9odHRwQXV0aFNjaGVtZXMvaW5kZXguanM/ZTQyYSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tIFwiLi9odHRwQXBpS2V5QXV0aFwiO1xuZXhwb3J0ICogZnJvbSBcIi4vaHR0cEJlYXJlckF1dGhcIjtcbmV4cG9ydCAqIGZyb20gXCIuL25vQXV0aFwiO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/core/dist-es/util-identity-and-auth/httpAuthSchemes/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/core/dist-es/util-identity-and-auth/httpAuthSchemes/noAuth.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@smithy/core/dist-es/util-identity-and-auth/httpAuthSchemes/noAuth.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NoAuthSigner: () => (/* binding */ NoAuthSigner)\n/* harmony export */ });\nclass NoAuthSigner {\n    async sign(httpRequest, identity, signingProperties) {\n        return httpRequest;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9jb3JlL2Rpc3QtZXMvdXRpbC1pZGVudGl0eS1hbmQtYXV0aC9odHRwQXV0aFNjaGVtZXMvbm9BdXRoLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTyxNQUFNQTtJQUNULE1BQU1DLEtBQUtDLFdBQVcsRUFBRUMsUUFBUSxFQUFFQyxpQkFBaUIsRUFBRTtRQUNqRCxPQUFPRjtJQUNYO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbG91ZHNoaWZ0Ly4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvY29yZS9kaXN0LWVzL3V0aWwtaWRlbnRpdHktYW5kLWF1dGgvaHR0cEF1dGhTY2hlbWVzL25vQXV0aC5qcz8wOWNkIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBOb0F1dGhTaWduZXIge1xuICAgIGFzeW5jIHNpZ24oaHR0cFJlcXVlc3QsIGlkZW50aXR5LCBzaWduaW5nUHJvcGVydGllcykge1xuICAgICAgICByZXR1cm4gaHR0cFJlcXVlc3Q7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbIk5vQXV0aFNpZ25lciIsInNpZ24iLCJodHRwUmVxdWVzdCIsImlkZW50aXR5Iiwic2lnbmluZ1Byb3BlcnRpZXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/core/dist-es/util-identity-and-auth/httpAuthSchemes/noAuth.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/core/dist-es/util-identity-and-auth/index.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@smithy/core/dist-es/util-identity-and-auth/index.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultIdentityProviderConfig: () => (/* reexport safe */ _DefaultIdentityProviderConfig__WEBPACK_IMPORTED_MODULE_0__.DefaultIdentityProviderConfig),\n/* harmony export */   EXPIRATION_MS: () => (/* reexport safe */ _memoizeIdentityProvider__WEBPACK_IMPORTED_MODULE_2__.EXPIRATION_MS),\n/* harmony export */   HttpApiKeyAuthSigner: () => (/* reexport safe */ _httpAuthSchemes__WEBPACK_IMPORTED_MODULE_1__.HttpApiKeyAuthSigner),\n/* harmony export */   HttpBearerAuthSigner: () => (/* reexport safe */ _httpAuthSchemes__WEBPACK_IMPORTED_MODULE_1__.HttpBearerAuthSigner),\n/* harmony export */   NoAuthSigner: () => (/* reexport safe */ _httpAuthSchemes__WEBPACK_IMPORTED_MODULE_1__.NoAuthSigner),\n/* harmony export */   createIsIdentityExpiredFunction: () => (/* reexport safe */ _memoizeIdentityProvider__WEBPACK_IMPORTED_MODULE_2__.createIsIdentityExpiredFunction),\n/* harmony export */   doesIdentityRequireRefresh: () => (/* reexport safe */ _memoizeIdentityProvider__WEBPACK_IMPORTED_MODULE_2__.doesIdentityRequireRefresh),\n/* harmony export */   isIdentityExpired: () => (/* reexport safe */ _memoizeIdentityProvider__WEBPACK_IMPORTED_MODULE_2__.isIdentityExpired),\n/* harmony export */   memoizeIdentityProvider: () => (/* reexport safe */ _memoizeIdentityProvider__WEBPACK_IMPORTED_MODULE_2__.memoizeIdentityProvider)\n/* harmony export */ });\n/* harmony import */ var _DefaultIdentityProviderConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./DefaultIdentityProviderConfig */ \"(rsc)/./node_modules/@smithy/core/dist-es/util-identity-and-auth/DefaultIdentityProviderConfig.js\");\n/* harmony import */ var _httpAuthSchemes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./httpAuthSchemes */ \"(rsc)/./node_modules/@smithy/core/dist-es/util-identity-and-auth/httpAuthSchemes/index.js\");\n/* harmony import */ var _memoizeIdentityProvider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./memoizeIdentityProvider */ \"(rsc)/./node_modules/@smithy/core/dist-es/util-identity-and-auth/memoizeIdentityProvider.js\");\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9jb3JlL2Rpc3QtZXMvdXRpbC1pZGVudGl0eS1hbmQtYXV0aC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBZ0Q7QUFDZDtBQUNRIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2xvdWRzaGlmdC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L2NvcmUvZGlzdC1lcy91dGlsLWlkZW50aXR5LWFuZC1hdXRoL2luZGV4LmpzP2E4MDUiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSBcIi4vRGVmYXVsdElkZW50aXR5UHJvdmlkZXJDb25maWdcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2h0dHBBdXRoU2NoZW1lc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vbWVtb2l6ZUlkZW50aXR5UHJvdmlkZXJcIjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/core/dist-es/util-identity-and-auth/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/core/dist-es/util-identity-and-auth/memoizeIdentityProvider.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@smithy/core/dist-es/util-identity-and-auth/memoizeIdentityProvider.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EXPIRATION_MS: () => (/* binding */ EXPIRATION_MS),\n/* harmony export */   createIsIdentityExpiredFunction: () => (/* binding */ createIsIdentityExpiredFunction),\n/* harmony export */   doesIdentityRequireRefresh: () => (/* binding */ doesIdentityRequireRefresh),\n/* harmony export */   isIdentityExpired: () => (/* binding */ isIdentityExpired),\n/* harmony export */   memoizeIdentityProvider: () => (/* binding */ memoizeIdentityProvider)\n/* harmony export */ });\nconst createIsIdentityExpiredFunction = (expirationMs)=>(identity)=>doesIdentityRequireRefresh(identity) && identity.expiration.getTime() - Date.now() < expirationMs;\nconst EXPIRATION_MS = 300000;\nconst isIdentityExpired = createIsIdentityExpiredFunction(EXPIRATION_MS);\nconst doesIdentityRequireRefresh = (identity)=>identity.expiration !== undefined;\nconst memoizeIdentityProvider = (provider, isExpired, requiresRefresh)=>{\n    if (provider === undefined) {\n        return undefined;\n    }\n    const normalizedProvider = typeof provider !== \"function\" ? async ()=>Promise.resolve(provider) : provider;\n    let resolved;\n    let pending;\n    let hasResult;\n    let isConstant = false;\n    const coalesceProvider = async (options)=>{\n        if (!pending) {\n            pending = normalizedProvider(options);\n        }\n        try {\n            resolved = await pending;\n            hasResult = true;\n            isConstant = false;\n        } finally{\n            pending = undefined;\n        }\n        return resolved;\n    };\n    if (isExpired === undefined) {\n        return async (options)=>{\n            if (!hasResult || options?.forceRefresh) {\n                resolved = await coalesceProvider(options);\n            }\n            return resolved;\n        };\n    }\n    return async (options)=>{\n        if (!hasResult || options?.forceRefresh) {\n            resolved = await coalesceProvider(options);\n        }\n        if (isConstant) {\n            return resolved;\n        }\n        if (!requiresRefresh(resolved)) {\n            isConstant = true;\n            return resolved;\n        }\n        if (isExpired(resolved)) {\n            await coalesceProvider(options);\n            return resolved;\n        }\n        return resolved;\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9jb3JlL2Rpc3QtZXMvdXRpbC1pZGVudGl0eS1hbmQtYXV0aC9tZW1vaXplSWRlbnRpdHlQcm92aWRlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFPLE1BQU1BLGtDQUFrQyxDQUFDQyxlQUFpQixDQUFDQyxXQUFhQywyQkFBMkJELGFBQWFBLFNBQVNFLFVBQVUsQ0FBQ0MsT0FBTyxLQUFLQyxLQUFLQyxHQUFHLEtBQUtOLGFBQWE7QUFDMUssTUFBTU8sZ0JBQWdCLE9BQU87QUFDN0IsTUFBTUMsb0JBQW9CVCxnQ0FBZ0NRLGVBQWU7QUFDekUsTUFBTUwsNkJBQTZCLENBQUNELFdBQWFBLFNBQVNFLFVBQVUsS0FBS00sVUFBVTtBQUNuRixNQUFNQywwQkFBMEIsQ0FBQ0MsVUFBVUMsV0FBV0M7SUFDekQsSUFBSUYsYUFBYUYsV0FBVztRQUN4QixPQUFPQTtJQUNYO0lBQ0EsTUFBTUsscUJBQXFCLE9BQU9ILGFBQWEsYUFBYSxVQUFZSSxRQUFRQyxPQUFPLENBQUNMLFlBQVlBO0lBQ3BHLElBQUlNO0lBQ0osSUFBSUM7SUFDSixJQUFJQztJQUNKLElBQUlDLGFBQWE7SUFDakIsTUFBTUMsbUJBQW1CLE9BQU9DO1FBQzVCLElBQUksQ0FBQ0osU0FBUztZQUNWQSxVQUFVSixtQkFBbUJRO1FBQ2pDO1FBQ0EsSUFBSTtZQUNBTCxXQUFXLE1BQU1DO1lBQ2pCQyxZQUFZO1lBQ1pDLGFBQWE7UUFDakIsU0FDUTtZQUNKRixVQUFVVDtRQUNkO1FBQ0EsT0FBT1E7SUFDWDtJQUNBLElBQUlMLGNBQWNILFdBQVc7UUFDekIsT0FBTyxPQUFPYTtZQUNWLElBQUksQ0FBQ0gsYUFBYUcsU0FBU0MsY0FBYztnQkFDckNOLFdBQVcsTUFBTUksaUJBQWlCQztZQUN0QztZQUNBLE9BQU9MO1FBQ1g7SUFDSjtJQUNBLE9BQU8sT0FBT0s7UUFDVixJQUFJLENBQUNILGFBQWFHLFNBQVNDLGNBQWM7WUFDckNOLFdBQVcsTUFBTUksaUJBQWlCQztRQUN0QztRQUNBLElBQUlGLFlBQVk7WUFDWixPQUFPSDtRQUNYO1FBQ0EsSUFBSSxDQUFDSixnQkFBZ0JJLFdBQVc7WUFDNUJHLGFBQWE7WUFDYixPQUFPSDtRQUNYO1FBQ0EsSUFBSUwsVUFBVUssV0FBVztZQUNyQixNQUFNSSxpQkFBaUJDO1lBQ3ZCLE9BQU9MO1FBQ1g7UUFDQSxPQUFPQTtJQUNYO0FBQ0osRUFBRSIsInNvdXJjZXMiOlsid2VicGFjazovL2Nsb3Vkc2hpZnQvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9jb3JlL2Rpc3QtZXMvdXRpbC1pZGVudGl0eS1hbmQtYXV0aC9tZW1vaXplSWRlbnRpdHlQcm92aWRlci5qcz8wZmVkIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBjcmVhdGVJc0lkZW50aXR5RXhwaXJlZEZ1bmN0aW9uID0gKGV4cGlyYXRpb25NcykgPT4gKGlkZW50aXR5KSA9PiBkb2VzSWRlbnRpdHlSZXF1aXJlUmVmcmVzaChpZGVudGl0eSkgJiYgaWRlbnRpdHkuZXhwaXJhdGlvbi5nZXRUaW1lKCkgLSBEYXRlLm5vdygpIDwgZXhwaXJhdGlvbk1zO1xuZXhwb3J0IGNvbnN0IEVYUElSQVRJT05fTVMgPSAzMDAwMDA7XG5leHBvcnQgY29uc3QgaXNJZGVudGl0eUV4cGlyZWQgPSBjcmVhdGVJc0lkZW50aXR5RXhwaXJlZEZ1bmN0aW9uKEVYUElSQVRJT05fTVMpO1xuZXhwb3J0IGNvbnN0IGRvZXNJZGVudGl0eVJlcXVpcmVSZWZyZXNoID0gKGlkZW50aXR5KSA9PiBpZGVudGl0eS5leHBpcmF0aW9uICE9PSB1bmRlZmluZWQ7XG5leHBvcnQgY29uc3QgbWVtb2l6ZUlkZW50aXR5UHJvdmlkZXIgPSAocHJvdmlkZXIsIGlzRXhwaXJlZCwgcmVxdWlyZXNSZWZyZXNoKSA9PiB7XG4gICAgaWYgKHByb3ZpZGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgY29uc3Qgbm9ybWFsaXplZFByb3ZpZGVyID0gdHlwZW9mIHByb3ZpZGVyICE9PSBcImZ1bmN0aW9uXCIgPyBhc3luYyAoKSA9PiBQcm9taXNlLnJlc29sdmUocHJvdmlkZXIpIDogcHJvdmlkZXI7XG4gICAgbGV0IHJlc29sdmVkO1xuICAgIGxldCBwZW5kaW5nO1xuICAgIGxldCBoYXNSZXN1bHQ7XG4gICAgbGV0IGlzQ29uc3RhbnQgPSBmYWxzZTtcbiAgICBjb25zdCBjb2FsZXNjZVByb3ZpZGVyID0gYXN5bmMgKG9wdGlvbnMpID0+IHtcbiAgICAgICAgaWYgKCFwZW5kaW5nKSB7XG4gICAgICAgICAgICBwZW5kaW5nID0gbm9ybWFsaXplZFByb3ZpZGVyKG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXNvbHZlZCA9IGF3YWl0IHBlbmRpbmc7XG4gICAgICAgICAgICBoYXNSZXN1bHQgPSB0cnVlO1xuICAgICAgICAgICAgaXNDb25zdGFudCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgcGVuZGluZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzb2x2ZWQ7XG4gICAgfTtcbiAgICBpZiAoaXNFeHBpcmVkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGFzeW5jIChvcHRpb25zKSA9PiB7XG4gICAgICAgICAgICBpZiAoIWhhc1Jlc3VsdCB8fCBvcHRpb25zPy5mb3JjZVJlZnJlc2gpIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlZCA9IGF3YWl0IGNvYWxlc2NlUHJvdmlkZXIob3B0aW9ucyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzb2x2ZWQ7XG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBhc3luYyAob3B0aW9ucykgPT4ge1xuICAgICAgICBpZiAoIWhhc1Jlc3VsdCB8fCBvcHRpb25zPy5mb3JjZVJlZnJlc2gpIHtcbiAgICAgICAgICAgIHJlc29sdmVkID0gYXdhaXQgY29hbGVzY2VQcm92aWRlcihvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNDb25zdGFudCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc29sdmVkO1xuICAgICAgICB9XG4gICAgICAgIGlmICghcmVxdWlyZXNSZWZyZXNoKHJlc29sdmVkKSkge1xuICAgICAgICAgICAgaXNDb25zdGFudCA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm4gcmVzb2x2ZWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzRXhwaXJlZChyZXNvbHZlZCkpIHtcbiAgICAgICAgICAgIGF3YWl0IGNvYWxlc2NlUHJvdmlkZXIob3B0aW9ucyk7XG4gICAgICAgICAgICByZXR1cm4gcmVzb2x2ZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc29sdmVkO1xuICAgIH07XG59O1xuIl0sIm5hbWVzIjpbImNyZWF0ZUlzSWRlbnRpdHlFeHBpcmVkRnVuY3Rpb24iLCJleHBpcmF0aW9uTXMiLCJpZGVudGl0eSIsImRvZXNJZGVudGl0eVJlcXVpcmVSZWZyZXNoIiwiZXhwaXJhdGlvbiIsImdldFRpbWUiLCJEYXRlIiwibm93IiwiRVhQSVJBVElPTl9NUyIsImlzSWRlbnRpdHlFeHBpcmVkIiwidW5kZWZpbmVkIiwibWVtb2l6ZUlkZW50aXR5UHJvdmlkZXIiLCJwcm92aWRlciIsImlzRXhwaXJlZCIsInJlcXVpcmVzUmVmcmVzaCIsIm5vcm1hbGl6ZWRQcm92aWRlciIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVzb2x2ZWQiLCJwZW5kaW5nIiwiaGFzUmVzdWx0IiwiaXNDb25zdGFudCIsImNvYWxlc2NlUHJvdmlkZXIiLCJvcHRpb25zIiwiZm9yY2VSZWZyZXNoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/core/dist-es/util-identity-and-auth/memoizeIdentityProvider.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/credential-provider-imds/dist-cjs/index.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@smithy/credential-provider-imds/dist-cjs/index.js ***!
  \*************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value)=>__defProp(target, \"name\", {\n        value,\n        configurable: true\n    });\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n    DEFAULT_MAX_RETRIES: ()=>DEFAULT_MAX_RETRIES,\n    DEFAULT_TIMEOUT: ()=>DEFAULT_TIMEOUT,\n    ENV_CMDS_AUTH_TOKEN: ()=>ENV_CMDS_AUTH_TOKEN,\n    ENV_CMDS_FULL_URI: ()=>ENV_CMDS_FULL_URI,\n    ENV_CMDS_RELATIVE_URI: ()=>ENV_CMDS_RELATIVE_URI,\n    Endpoint: ()=>Endpoint,\n    fromContainerMetadata: ()=>fromContainerMetadata,\n    fromInstanceMetadata: ()=>fromInstanceMetadata,\n    getInstanceMetadataEndpoint: ()=>getInstanceMetadataEndpoint,\n    httpRequest: ()=>httpRequest,\n    providerConfigFromInit: ()=>providerConfigFromInit\n});\nmodule.exports = __toCommonJS(src_exports);\n// src/fromContainerMetadata.ts\nvar import_url = __webpack_require__(/*! url */ \"url\");\n// src/remoteProvider/httpRequest.ts\nvar import_property_provider = __webpack_require__(/*! @smithy/property-provider */ \"(rsc)/./node_modules/@smithy/property-provider/dist-cjs/index.js\");\nvar import_buffer = __webpack_require__(/*! buffer */ \"buffer\");\nvar import_http = __webpack_require__(/*! http */ \"http\");\nfunction httpRequest(options) {\n    return new Promise((resolve, reject)=>{\n        const req = (0, import_http.request)({\n            method: \"GET\",\n            ...options,\n            // Node.js http module doesn't accept hostname with square brackets\n            // Refs: https://github.com/nodejs/node/issues/39738\n            hostname: options.hostname?.replace(/^\\[(.+)\\]$/, \"$1\")\n        });\n        req.on(\"error\", (err)=>{\n            reject(Object.assign(new import_property_provider.ProviderError(\"Unable to connect to instance metadata service\"), err));\n            req.destroy();\n        });\n        req.on(\"timeout\", ()=>{\n            reject(new import_property_provider.ProviderError(\"TimeoutError from instance metadata service\"));\n            req.destroy();\n        });\n        req.on(\"response\", (res)=>{\n            const { statusCode = 400 } = res;\n            if (statusCode < 200 || 300 <= statusCode) {\n                reject(Object.assign(new import_property_provider.ProviderError(\"Error response received from instance metadata service\"), {\n                    statusCode\n                }));\n                req.destroy();\n            }\n            const chunks = [];\n            res.on(\"data\", (chunk)=>{\n                chunks.push(chunk);\n            });\n            res.on(\"end\", ()=>{\n                resolve(import_buffer.Buffer.concat(chunks));\n                req.destroy();\n            });\n        });\n        req.end();\n    });\n}\n__name(httpRequest, \"httpRequest\");\n// src/remoteProvider/ImdsCredentials.ts\nvar isImdsCredentials = /* @__PURE__ */ __name((arg)=>Boolean(arg) && typeof arg === \"object\" && typeof arg.AccessKeyId === \"string\" && typeof arg.SecretAccessKey === \"string\" && typeof arg.Token === \"string\" && typeof arg.Expiration === \"string\", \"isImdsCredentials\");\nvar fromImdsCredentials = /* @__PURE__ */ __name((creds)=>({\n        accessKeyId: creds.AccessKeyId,\n        secretAccessKey: creds.SecretAccessKey,\n        sessionToken: creds.Token,\n        expiration: new Date(creds.Expiration),\n        ...creds.AccountId && {\n            accountId: creds.AccountId\n        }\n    }), \"fromImdsCredentials\");\n// src/remoteProvider/RemoteProviderInit.ts\nvar DEFAULT_TIMEOUT = 1e3;\nvar DEFAULT_MAX_RETRIES = 0;\nvar providerConfigFromInit = /* @__PURE__ */ __name(({ maxRetries = DEFAULT_MAX_RETRIES, timeout = DEFAULT_TIMEOUT })=>({\n        maxRetries,\n        timeout\n    }), \"providerConfigFromInit\");\n// src/remoteProvider/retry.ts\nvar retry = /* @__PURE__ */ __name((toRetry, maxRetries)=>{\n    let promise = toRetry();\n    for(let i = 0; i < maxRetries; i++){\n        promise = promise.catch(toRetry);\n    }\n    return promise;\n}, \"retry\");\n// src/fromContainerMetadata.ts\nvar ENV_CMDS_FULL_URI = \"AWS_CONTAINER_CREDENTIALS_FULL_URI\";\nvar ENV_CMDS_RELATIVE_URI = \"AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\";\nvar ENV_CMDS_AUTH_TOKEN = \"AWS_CONTAINER_AUTHORIZATION_TOKEN\";\nvar fromContainerMetadata = /* @__PURE__ */ __name((init = {})=>{\n    const { timeout, maxRetries } = providerConfigFromInit(init);\n    return ()=>retry(async ()=>{\n            const requestOptions = await getCmdsUri({\n                logger: init.logger\n            });\n            const credsResponse = JSON.parse(await requestFromEcsImds(timeout, requestOptions));\n            if (!isImdsCredentials(credsResponse)) {\n                throw new import_property_provider.CredentialsProviderError(\"Invalid response received from instance metadata service.\", {\n                    logger: init.logger\n                });\n            }\n            return fromImdsCredentials(credsResponse);\n        }, maxRetries);\n}, \"fromContainerMetadata\");\nvar requestFromEcsImds = /* @__PURE__ */ __name(async (timeout, options)=>{\n    if (process.env[ENV_CMDS_AUTH_TOKEN]) {\n        options.headers = {\n            ...options.headers,\n            Authorization: process.env[ENV_CMDS_AUTH_TOKEN]\n        };\n    }\n    const buffer = await httpRequest({\n        ...options,\n        timeout\n    });\n    return buffer.toString();\n}, \"requestFromEcsImds\");\nvar CMDS_IP = \"169.254.170.2\";\nvar GREENGRASS_HOSTS = {\n    localhost: true,\n    \"127.0.0.1\": true\n};\nvar GREENGRASS_PROTOCOLS = {\n    \"http:\": true,\n    \"https:\": true\n};\nvar getCmdsUri = /* @__PURE__ */ __name(async ({ logger })=>{\n    if (process.env[ENV_CMDS_RELATIVE_URI]) {\n        return {\n            hostname: CMDS_IP,\n            path: process.env[ENV_CMDS_RELATIVE_URI]\n        };\n    }\n    if (process.env[ENV_CMDS_FULL_URI]) {\n        const parsed = (0, import_url.parse)(process.env[ENV_CMDS_FULL_URI]);\n        if (!parsed.hostname || !(parsed.hostname in GREENGRASS_HOSTS)) {\n            throw new import_property_provider.CredentialsProviderError(`${parsed.hostname} is not a valid container metadata service hostname`, {\n                tryNextLink: false,\n                logger\n            });\n        }\n        if (!parsed.protocol || !(parsed.protocol in GREENGRASS_PROTOCOLS)) {\n            throw new import_property_provider.CredentialsProviderError(`${parsed.protocol} is not a valid container metadata service protocol`, {\n                tryNextLink: false,\n                logger\n            });\n        }\n        return {\n            ...parsed,\n            port: parsed.port ? parseInt(parsed.port, 10) : void 0\n        };\n    }\n    throw new import_property_provider.CredentialsProviderError(`The container metadata credential provider cannot be used unless the ${ENV_CMDS_RELATIVE_URI} or ${ENV_CMDS_FULL_URI} environment variable is set`, {\n        tryNextLink: false,\n        logger\n    });\n}, \"getCmdsUri\");\n// src/fromInstanceMetadata.ts\n// src/error/InstanceMetadataV1FallbackError.ts\nvar InstanceMetadataV1FallbackError = class _InstanceMetadataV1FallbackError extends import_property_provider.CredentialsProviderError {\n    constructor(message, tryNextLink = true){\n        super(message, tryNextLink);\n        this.tryNextLink = tryNextLink;\n        this.name = \"InstanceMetadataV1FallbackError\";\n        Object.setPrototypeOf(this, _InstanceMetadataV1FallbackError.prototype);\n    }\n    static{\n        __name(this, \"InstanceMetadataV1FallbackError\");\n    }\n};\n// src/utils/getInstanceMetadataEndpoint.ts\nvar import_node_config_provider = __webpack_require__(/*! @smithy/node-config-provider */ \"(rsc)/./node_modules/@smithy/node-config-provider/dist-cjs/index.js\");\nvar import_url_parser = __webpack_require__(/*! @smithy/url-parser */ \"(rsc)/./node_modules/@smithy/url-parser/dist-cjs/index.js\");\n// src/config/Endpoint.ts\nvar Endpoint = /* @__PURE__ */ ((Endpoint2)=>{\n    Endpoint2[\"IPv4\"] = \"http://169.254.169.254\";\n    Endpoint2[\"IPv6\"] = \"http://[fd00:ec2::254]\";\n    return Endpoint2;\n})(Endpoint || {});\n// src/config/EndpointConfigOptions.ts\nvar ENV_ENDPOINT_NAME = \"AWS_EC2_METADATA_SERVICE_ENDPOINT\";\nvar CONFIG_ENDPOINT_NAME = \"ec2_metadata_service_endpoint\";\nvar ENDPOINT_CONFIG_OPTIONS = {\n    environmentVariableSelector: (env)=>env[ENV_ENDPOINT_NAME],\n    configFileSelector: (profile)=>profile[CONFIG_ENDPOINT_NAME],\n    default: void 0\n};\n// src/config/EndpointMode.ts\nvar EndpointMode = /* @__PURE__ */ ((EndpointMode2)=>{\n    EndpointMode2[\"IPv4\"] = \"IPv4\";\n    EndpointMode2[\"IPv6\"] = \"IPv6\";\n    return EndpointMode2;\n})(EndpointMode || {});\n// src/config/EndpointModeConfigOptions.ts\nvar ENV_ENDPOINT_MODE_NAME = \"AWS_EC2_METADATA_SERVICE_ENDPOINT_MODE\";\nvar CONFIG_ENDPOINT_MODE_NAME = \"ec2_metadata_service_endpoint_mode\";\nvar ENDPOINT_MODE_CONFIG_OPTIONS = {\n    environmentVariableSelector: (env)=>env[ENV_ENDPOINT_MODE_NAME],\n    configFileSelector: (profile)=>profile[CONFIG_ENDPOINT_MODE_NAME],\n    default: \"IPv4\" /* IPv4 */ \n};\n// src/utils/getInstanceMetadataEndpoint.ts\nvar getInstanceMetadataEndpoint = /* @__PURE__ */ __name(async ()=>(0, import_url_parser.parseUrl)(await getFromEndpointConfig() || await getFromEndpointModeConfig()), \"getInstanceMetadataEndpoint\");\nvar getFromEndpointConfig = /* @__PURE__ */ __name(async ()=>(0, import_node_config_provider.loadConfig)(ENDPOINT_CONFIG_OPTIONS)(), \"getFromEndpointConfig\");\nvar getFromEndpointModeConfig = /* @__PURE__ */ __name(async ()=>{\n    const endpointMode = await (0, import_node_config_provider.loadConfig)(ENDPOINT_MODE_CONFIG_OPTIONS)();\n    switch(endpointMode){\n        case \"IPv4\" /* IPv4 */ :\n            return \"http://169.254.169.254\" /* IPv4 */ ;\n        case \"IPv6\" /* IPv6 */ :\n            return \"http://[fd00:ec2::254]\" /* IPv6 */ ;\n        default:\n            throw new Error(`Unsupported endpoint mode: ${endpointMode}. Select from ${Object.values(EndpointMode)}`);\n    }\n}, \"getFromEndpointModeConfig\");\n// src/utils/getExtendedInstanceMetadataCredentials.ts\nvar STATIC_STABILITY_REFRESH_INTERVAL_SECONDS = 5 * 60;\nvar STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS = 5 * 60;\nvar STATIC_STABILITY_DOC_URL = \"https://docs.aws.amazon.com/sdkref/latest/guide/feature-static-credentials.html\";\nvar getExtendedInstanceMetadataCredentials = /* @__PURE__ */ __name((credentials, logger)=>{\n    const refreshInterval = STATIC_STABILITY_REFRESH_INTERVAL_SECONDS + Math.floor(Math.random() * STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS);\n    const newExpiration = new Date(Date.now() + refreshInterval * 1e3);\n    logger.warn(`Attempting credential expiration extension due to a credential service availability issue. A refresh of these credentials will be attempted after ${new Date(newExpiration)}.\nFor more information, please visit: ` + STATIC_STABILITY_DOC_URL);\n    const originalExpiration = credentials.originalExpiration ?? credentials.expiration;\n    return {\n        ...credentials,\n        ...originalExpiration ? {\n            originalExpiration\n        } : {},\n        expiration: newExpiration\n    };\n}, \"getExtendedInstanceMetadataCredentials\");\n// src/utils/staticStabilityProvider.ts\nvar staticStabilityProvider = /* @__PURE__ */ __name((provider, options = {})=>{\n    const logger = options?.logger || console;\n    let pastCredentials;\n    return async ()=>{\n        let credentials;\n        try {\n            credentials = await provider();\n            if (credentials.expiration && credentials.expiration.getTime() < Date.now()) {\n                credentials = getExtendedInstanceMetadataCredentials(credentials, logger);\n            }\n        } catch (e) {\n            if (pastCredentials) {\n                logger.warn(\"Credential renew failed: \", e);\n                credentials = getExtendedInstanceMetadataCredentials(pastCredentials, logger);\n            } else {\n                throw e;\n            }\n        }\n        pastCredentials = credentials;\n        return credentials;\n    };\n}, \"staticStabilityProvider\");\n// src/fromInstanceMetadata.ts\nvar IMDS_PATH = \"/latest/meta-data/iam/security-credentials/\";\nvar IMDS_TOKEN_PATH = \"/latest/api/token\";\nvar AWS_EC2_METADATA_V1_DISABLED = \"AWS_EC2_METADATA_V1_DISABLED\";\nvar PROFILE_AWS_EC2_METADATA_V1_DISABLED = \"ec2_metadata_v1_disabled\";\nvar X_AWS_EC2_METADATA_TOKEN = \"x-aws-ec2-metadata-token\";\nvar fromInstanceMetadata = /* @__PURE__ */ __name((init = {})=>staticStabilityProvider(getInstanceMetadataProvider(init), {\n        logger: init.logger\n    }), \"fromInstanceMetadata\");\nvar getInstanceMetadataProvider = /* @__PURE__ */ __name((init = {})=>{\n    let disableFetchToken = false;\n    const { logger, profile } = init;\n    const { timeout, maxRetries } = providerConfigFromInit(init);\n    const getCredentials = /* @__PURE__ */ __name(async (maxRetries2, options)=>{\n        const isImdsV1Fallback = disableFetchToken || options.headers?.[X_AWS_EC2_METADATA_TOKEN] == null;\n        if (isImdsV1Fallback) {\n            let fallbackBlockedFromProfile = false;\n            let fallbackBlockedFromProcessEnv = false;\n            const configValue = await (0, import_node_config_provider.loadConfig)({\n                environmentVariableSelector: (env)=>{\n                    const envValue = env[AWS_EC2_METADATA_V1_DISABLED];\n                    fallbackBlockedFromProcessEnv = !!envValue && envValue !== \"false\";\n                    if (envValue === void 0) {\n                        throw new import_property_provider.CredentialsProviderError(`${AWS_EC2_METADATA_V1_DISABLED} not set in env, checking config file next.`, {\n                            logger: init.logger\n                        });\n                    }\n                    return fallbackBlockedFromProcessEnv;\n                },\n                configFileSelector: (profile2)=>{\n                    const profileValue = profile2[PROFILE_AWS_EC2_METADATA_V1_DISABLED];\n                    fallbackBlockedFromProfile = !!profileValue && profileValue !== \"false\";\n                    return fallbackBlockedFromProfile;\n                },\n                default: false\n            }, {\n                profile\n            })();\n            if (init.ec2MetadataV1Disabled || configValue) {\n                const causes = [];\n                if (init.ec2MetadataV1Disabled) causes.push(\"credential provider initialization (runtime option ec2MetadataV1Disabled)\");\n                if (fallbackBlockedFromProfile) causes.push(`config file profile (${PROFILE_AWS_EC2_METADATA_V1_DISABLED})`);\n                if (fallbackBlockedFromProcessEnv) causes.push(`process environment variable (${AWS_EC2_METADATA_V1_DISABLED})`);\n                throw new InstanceMetadataV1FallbackError(`AWS EC2 Metadata v1 fallback has been blocked by AWS SDK configuration in the following: [${causes.join(\", \")}].`);\n            }\n        }\n        const imdsProfile = (await retry(async ()=>{\n            let profile2;\n            try {\n                profile2 = await getProfile(options);\n            } catch (err) {\n                if (err.statusCode === 401) {\n                    disableFetchToken = false;\n                }\n                throw err;\n            }\n            return profile2;\n        }, maxRetries2)).trim();\n        return retry(async ()=>{\n            let creds;\n            try {\n                creds = await getCredentialsFromProfile(imdsProfile, options, init);\n            } catch (err) {\n                if (err.statusCode === 401) {\n                    disableFetchToken = false;\n                }\n                throw err;\n            }\n            return creds;\n        }, maxRetries2);\n    }, \"getCredentials\");\n    return async ()=>{\n        const endpoint = await getInstanceMetadataEndpoint();\n        if (disableFetchToken) {\n            logger?.debug(\"AWS SDK Instance Metadata\", \"using v1 fallback (no token fetch)\");\n            return getCredentials(maxRetries, {\n                ...endpoint,\n                timeout\n            });\n        } else {\n            let token;\n            try {\n                token = (await getMetadataToken({\n                    ...endpoint,\n                    timeout\n                })).toString();\n            } catch (error) {\n                if (error?.statusCode === 400) {\n                    throw Object.assign(error, {\n                        message: \"EC2 Metadata token request returned error\"\n                    });\n                } else if (error.message === \"TimeoutError\" || [\n                    403,\n                    404,\n                    405\n                ].includes(error.statusCode)) {\n                    disableFetchToken = true;\n                }\n                logger?.debug(\"AWS SDK Instance Metadata\", \"using v1 fallback (initial)\");\n                return getCredentials(maxRetries, {\n                    ...endpoint,\n                    timeout\n                });\n            }\n            return getCredentials(maxRetries, {\n                ...endpoint,\n                headers: {\n                    [X_AWS_EC2_METADATA_TOKEN]: token\n                },\n                timeout\n            });\n        }\n    };\n}, \"getInstanceMetadataProvider\");\nvar getMetadataToken = /* @__PURE__ */ __name(async (options)=>httpRequest({\n        ...options,\n        path: IMDS_TOKEN_PATH,\n        method: \"PUT\",\n        headers: {\n            \"x-aws-ec2-metadata-token-ttl-seconds\": \"21600\"\n        }\n    }), \"getMetadataToken\");\nvar getProfile = /* @__PURE__ */ __name(async (options)=>(await httpRequest({\n        ...options,\n        path: IMDS_PATH\n    })).toString(), \"getProfile\");\nvar getCredentialsFromProfile = /* @__PURE__ */ __name(async (profile, options, init)=>{\n    const credentialsResponse = JSON.parse((await httpRequest({\n        ...options,\n        path: IMDS_PATH + profile\n    })).toString());\n    if (!isImdsCredentials(credentialsResponse)) {\n        throw new import_property_provider.CredentialsProviderError(\"Invalid response received from instance metadata service.\", {\n            logger: init.logger\n        });\n    }\n    return fromImdsCredentials(credentialsResponse);\n}, \"getCredentialsFromProfile\");\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/credential-provider-imds/dist-cjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/fetch-http-handler/dist-cjs/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@smithy/fetch-http-handler/dist-cjs/index.js ***!
  \*******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value)=>__defProp(target, \"name\", {\n        value,\n        configurable: true\n    });\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n    FetchHttpHandler: ()=>FetchHttpHandler,\n    keepAliveSupport: ()=>keepAliveSupport,\n    streamCollector: ()=>streamCollector\n});\nmodule.exports = __toCommonJS(src_exports);\n// src/fetch-http-handler.ts\nvar import_protocol_http = __webpack_require__(/*! @smithy/protocol-http */ \"(rsc)/./node_modules/@smithy/protocol-http/dist-cjs/index.js\");\nvar import_querystring_builder = __webpack_require__(/*! @smithy/querystring-builder */ \"(rsc)/./node_modules/@smithy/querystring-builder/dist-cjs/index.js\");\n// src/create-request.ts\nfunction createRequest(url, requestOptions) {\n    return new Request(url, requestOptions);\n}\n__name(createRequest, \"createRequest\");\n// src/request-timeout.ts\nfunction requestTimeout(timeoutInMs = 0) {\n    return new Promise((resolve, reject)=>{\n        if (timeoutInMs) {\n            setTimeout(()=>{\n                const timeoutError = new Error(`Request did not complete within ${timeoutInMs} ms`);\n                timeoutError.name = \"TimeoutError\";\n                reject(timeoutError);\n            }, timeoutInMs);\n        }\n    });\n}\n__name(requestTimeout, \"requestTimeout\");\n// src/fetch-http-handler.ts\nvar keepAliveSupport = {\n    supported: void 0\n};\nvar FetchHttpHandler = class _FetchHttpHandler {\n    static{\n        __name(this, \"FetchHttpHandler\");\n    }\n    /**\n   * @returns the input if it is an HttpHandler of any class,\n   * or instantiates a new instance of this handler.\n   */ static create(instanceOrOptions) {\n        if (typeof instanceOrOptions?.handle === \"function\") {\n            return instanceOrOptions;\n        }\n        return new _FetchHttpHandler(instanceOrOptions);\n    }\n    constructor(options){\n        if (typeof options === \"function\") {\n            this.configProvider = options().then((opts)=>opts || {});\n        } else {\n            this.config = options ?? {};\n            this.configProvider = Promise.resolve(this.config);\n        }\n        if (keepAliveSupport.supported === void 0) {\n            keepAliveSupport.supported = Boolean(typeof Request !== \"undefined\" && \"keepalive\" in createRequest(\"https://[::1]\"));\n        }\n    }\n    destroy() {}\n    async handle(request, { abortSignal } = {}) {\n        if (!this.config) {\n            this.config = await this.configProvider;\n        }\n        const requestTimeoutInMs = this.config.requestTimeout;\n        const keepAlive = this.config.keepAlive === true;\n        const credentials = this.config.credentials;\n        if (abortSignal?.aborted) {\n            const abortError = new Error(\"Request aborted\");\n            abortError.name = \"AbortError\";\n            return Promise.reject(abortError);\n        }\n        let path = request.path;\n        const queryString = (0, import_querystring_builder.buildQueryString)(request.query || {});\n        if (queryString) {\n            path += `?${queryString}`;\n        }\n        if (request.fragment) {\n            path += `#${request.fragment}`;\n        }\n        let auth = \"\";\n        if (request.username != null || request.password != null) {\n            const username = request.username ?? \"\";\n            const password = request.password ?? \"\";\n            auth = `${username}:${password}@`;\n        }\n        const { port, method } = request;\n        const url = `${request.protocol}//${auth}${request.hostname}${port ? `:${port}` : \"\"}${path}`;\n        const body = method === \"GET\" || method === \"HEAD\" ? void 0 : request.body;\n        const requestOptions = {\n            body,\n            headers: new Headers(request.headers),\n            method,\n            credentials\n        };\n        if (this.config?.cache) {\n            requestOptions.cache = this.config.cache;\n        }\n        if (body) {\n            requestOptions.duplex = \"half\";\n        }\n        if (typeof AbortController !== \"undefined\") {\n            requestOptions.signal = abortSignal;\n        }\n        if (keepAliveSupport.supported) {\n            requestOptions.keepalive = keepAlive;\n        }\n        if (typeof this.config.requestInit === \"function\") {\n            Object.assign(requestOptions, this.config.requestInit(request));\n        }\n        let removeSignalEventListener = /* @__PURE__ */ __name(()=>{}, \"removeSignalEventListener\");\n        const fetchRequest = createRequest(url, requestOptions);\n        const raceOfPromises = [\n            fetch(fetchRequest).then((response)=>{\n                const fetchHeaders = response.headers;\n                const transformedHeaders = {};\n                for (const pair of fetchHeaders.entries()){\n                    transformedHeaders[pair[0]] = pair[1];\n                }\n                const hasReadableStream = response.body != void 0;\n                if (!hasReadableStream) {\n                    return response.blob().then((body2)=>({\n                            response: new import_protocol_http.HttpResponse({\n                                headers: transformedHeaders,\n                                reason: response.statusText,\n                                statusCode: response.status,\n                                body: body2\n                            })\n                        }));\n                }\n                return {\n                    response: new import_protocol_http.HttpResponse({\n                        headers: transformedHeaders,\n                        reason: response.statusText,\n                        statusCode: response.status,\n                        body: response.body\n                    })\n                };\n            }),\n            requestTimeout(requestTimeoutInMs)\n        ];\n        if (abortSignal) {\n            raceOfPromises.push(new Promise((resolve, reject)=>{\n                const onAbort = /* @__PURE__ */ __name(()=>{\n                    const abortError = new Error(\"Request aborted\");\n                    abortError.name = \"AbortError\";\n                    reject(abortError);\n                }, \"onAbort\");\n                if (typeof abortSignal.addEventListener === \"function\") {\n                    const signal = abortSignal;\n                    signal.addEventListener(\"abort\", onAbort, {\n                        once: true\n                    });\n                    removeSignalEventListener = /* @__PURE__ */ __name(()=>signal.removeEventListener(\"abort\", onAbort), \"removeSignalEventListener\");\n                } else {\n                    abortSignal.onabort = onAbort;\n                }\n            }));\n        }\n        return Promise.race(raceOfPromises).finally(removeSignalEventListener);\n    }\n    updateHttpClientConfig(key, value) {\n        this.config = void 0;\n        this.configProvider = this.configProvider.then((config)=>{\n            config[key] = value;\n            return config;\n        });\n    }\n    httpHandlerConfigs() {\n        return this.config ?? {};\n    }\n};\n// src/stream-collector.ts\nvar import_util_base64 = __webpack_require__(/*! @smithy/util-base64 */ \"(rsc)/./node_modules/@smithy/util-base64/dist-cjs/index.js\");\nvar streamCollector = /* @__PURE__ */ __name(async (stream)=>{\n    if (typeof Blob === \"function\" && stream instanceof Blob || stream.constructor?.name === \"Blob\") {\n        if (Blob.prototype.arrayBuffer !== void 0) {\n            return new Uint8Array(await stream.arrayBuffer());\n        }\n        return collectBlob(stream);\n    }\n    return collectStream(stream);\n}, \"streamCollector\");\nasync function collectBlob(blob) {\n    const base64 = await readToBase64(blob);\n    const arrayBuffer = (0, import_util_base64.fromBase64)(base64);\n    return new Uint8Array(arrayBuffer);\n}\n__name(collectBlob, \"collectBlob\");\nasync function collectStream(stream) {\n    const chunks = [];\n    const reader = stream.getReader();\n    let isDone = false;\n    let length = 0;\n    while(!isDone){\n        const { done, value } = await reader.read();\n        if (value) {\n            chunks.push(value);\n            length += value.length;\n        }\n        isDone = done;\n    }\n    const collected = new Uint8Array(length);\n    let offset = 0;\n    for (const chunk of chunks){\n        collected.set(chunk, offset);\n        offset += chunk.length;\n    }\n    return collected;\n}\n__name(collectStream, \"collectStream\");\nfunction readToBase64(blob) {\n    return new Promise((resolve, reject)=>{\n        const reader = new FileReader();\n        reader.onloadend = ()=>{\n            if (reader.readyState !== 2) {\n                return reject(new Error(\"Reader aborted too early\"));\n            }\n            const result = reader.result ?? \"\";\n            const commaIndex = result.indexOf(\",\");\n            const dataOffset = commaIndex > -1 ? commaIndex + 1 : result.length;\n            resolve(result.substring(dataOffset));\n        };\n        reader.onabort = ()=>reject(new Error(\"Read aborted\"));\n        reader.onerror = ()=>reject(reader.error);\n        reader.readAsDataURL(blob);\n    });\n}\n__name(readToBase64, \"readToBase64\");\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/fetch-http-handler/dist-cjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/hash-node/dist-cjs/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@smithy/hash-node/dist-cjs/index.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value)=>__defProp(target, \"name\", {\n        value,\n        configurable: true\n    });\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n    Hash: ()=>Hash\n});\nmodule.exports = __toCommonJS(src_exports);\nvar import_util_buffer_from = __webpack_require__(/*! @smithy/util-buffer-from */ \"(rsc)/./node_modules/@smithy/util-buffer-from/dist-cjs/index.js\");\nvar import_util_utf8 = __webpack_require__(/*! @smithy/util-utf8 */ \"(rsc)/./node_modules/@smithy/util-utf8/dist-cjs/index.js\");\nvar import_buffer = __webpack_require__(/*! buffer */ \"buffer\");\nvar import_crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar Hash = class {\n    static{\n        __name(this, \"Hash\");\n    }\n    constructor(algorithmIdentifier, secret){\n        this.algorithmIdentifier = algorithmIdentifier;\n        this.secret = secret;\n        this.reset();\n    }\n    update(toHash, encoding) {\n        this.hash.update((0, import_util_utf8.toUint8Array)(castSourceData(toHash, encoding)));\n    }\n    digest() {\n        return Promise.resolve(this.hash.digest());\n    }\n    reset() {\n        this.hash = this.secret ? (0, import_crypto.createHmac)(this.algorithmIdentifier, castSourceData(this.secret)) : (0, import_crypto.createHash)(this.algorithmIdentifier);\n    }\n};\nfunction castSourceData(toCast, encoding) {\n    if (import_buffer.Buffer.isBuffer(toCast)) {\n        return toCast;\n    }\n    if (typeof toCast === \"string\") {\n        return (0, import_util_buffer_from.fromString)(toCast, encoding);\n    }\n    if (ArrayBuffer.isView(toCast)) {\n        return (0, import_util_buffer_from.fromArrayBuffer)(toCast.buffer, toCast.byteOffset, toCast.byteLength);\n    }\n    return (0, import_util_buffer_from.fromArrayBuffer)(toCast);\n}\n__name(castSourceData, \"castSourceData\");\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9oYXNoLW5vZGUvZGlzdC1janMvaW5kZXguanMiLCJtYXBwaW5ncyI6IjtBQUFBLElBQUlBLFlBQVlDLE9BQU9DLGNBQWM7QUFDckMsSUFBSUMsbUJBQW1CRixPQUFPRyx3QkFBd0I7QUFDdEQsSUFBSUMsb0JBQW9CSixPQUFPSyxtQkFBbUI7QUFDbEQsSUFBSUMsZUFBZU4sT0FBT08sU0FBUyxDQUFDQyxjQUFjO0FBQ2xELElBQUlDLFNBQVMsQ0FBQ0MsUUFBUUMsUUFBVVosVUFBVVcsUUFBUSxRQUFRO1FBQUVDO1FBQU9DLGNBQWM7SUFBSztBQUN0RixJQUFJQyxXQUFXLENBQUNILFFBQVFJO0lBQ3RCLElBQUssSUFBSUMsUUFBUUQsSUFDZmYsVUFBVVcsUUFBUUssTUFBTTtRQUFFQyxLQUFLRixHQUFHLENBQUNDLEtBQUs7UUFBRUUsWUFBWTtJQUFLO0FBQy9EO0FBQ0EsSUFBSUMsY0FBYyxDQUFDQyxJQUFJQyxNQUFNQyxRQUFRQztJQUNuQyxJQUFJRixRQUFRLE9BQU9BLFNBQVMsWUFBWSxPQUFPQSxTQUFTLFlBQVk7UUFDbEUsS0FBSyxJQUFJRyxPQUFPbkIsa0JBQWtCZ0IsTUFDaEMsSUFBSSxDQUFDZCxhQUFha0IsSUFBSSxDQUFDTCxJQUFJSSxRQUFRQSxRQUFRRixRQUN6Q3RCLFVBQVVvQixJQUFJSSxLQUFLO1lBQUVQLEtBQUssSUFBTUksSUFBSSxDQUFDRyxJQUFJO1lBQUVOLFlBQVksQ0FBRUssQ0FBQUEsT0FBT3BCLGlCQUFpQmtCLE1BQU1HLElBQUcsS0FBTUQsS0FBS0wsVUFBVTtRQUFDO0lBQ3RIO0lBQ0EsT0FBT0U7QUFDVDtBQUNBLElBQUlNLGVBQWUsQ0FBQ0MsTUFBUVIsWUFBWW5CLFVBQVUsQ0FBQyxHQUFHLGNBQWM7UUFBRVksT0FBTztJQUFLLElBQUllO0FBRXRGLGVBQWU7QUFDZixJQUFJQyxjQUFjLENBQUM7QUFDbkJkLFNBQVNjLGFBQWE7SUFDcEJDLE1BQU0sSUFBTUE7QUFDZDtBQUNBQyxPQUFPQyxPQUFPLEdBQUdMLGFBQWFFO0FBQzlCLElBQUlJLDBCQUEwQkMsbUJBQU9BLENBQUMsaUdBQTBCO0FBQ2hFLElBQUlDLG1CQUFtQkQsbUJBQU9BLENBQUMsbUZBQW1CO0FBQ2xELElBQUlFLGdCQUFnQkYsbUJBQU9BLENBQUMsc0JBQVE7QUFDcEMsSUFBSUcsZ0JBQWdCSCxtQkFBT0EsQ0FBQyxzQkFBUTtBQUNwQyxJQUFJSixPQUFPO0lBQ1QsTUFBTztRQUNMbkIsT0FBTyxJQUFJLEVBQUU7SUFDZixDQUFDO0lBQ0QyQixZQUFZQyxtQkFBbUIsRUFBRUMsTUFBTSxDQUFFO1FBQ3ZDLElBQUksQ0FBQ0QsbUJBQW1CLEdBQUdBO1FBQzNCLElBQUksQ0FBQ0MsTUFBTSxHQUFHQTtRQUNkLElBQUksQ0FBQ0MsS0FBSztJQUNaO0lBQ0FDLE9BQU9DLE1BQU0sRUFBRUMsUUFBUSxFQUFFO1FBQ3ZCLElBQUksQ0FBQ0MsSUFBSSxDQUFDSCxNQUFNLENBQUMsQ0FBQyxHQUFHUCxpQkFBaUJXLFlBQVksRUFBRUMsZUFBZUosUUFBUUM7SUFDN0U7SUFDQUksU0FBUztRQUNQLE9BQU9DLFFBQVFDLE9BQU8sQ0FBQyxJQUFJLENBQUNMLElBQUksQ0FBQ0csTUFBTTtJQUN6QztJQUNBUCxRQUFRO1FBQ04sSUFBSSxDQUFDSSxJQUFJLEdBQUcsSUFBSSxDQUFDTCxNQUFNLEdBQUcsQ0FBQyxHQUFHSCxjQUFjYyxVQUFVLEVBQUUsSUFBSSxDQUFDWixtQkFBbUIsRUFBRVEsZUFBZSxJQUFJLENBQUNQLE1BQU0sS0FBSyxDQUFDLEdBQUdILGNBQWNlLFVBQVUsRUFBRSxJQUFJLENBQUNiLG1CQUFtQjtJQUN6SztBQUNGO0FBQ0EsU0FBU1EsZUFBZU0sTUFBTSxFQUFFVCxRQUFRO0lBQ3RDLElBQUlSLGNBQWNrQixNQUFNLENBQUNDLFFBQVEsQ0FBQ0YsU0FBUztRQUN6QyxPQUFPQTtJQUNUO0lBQ0EsSUFBSSxPQUFPQSxXQUFXLFVBQVU7UUFDOUIsT0FBTyxDQUFDLEdBQUdwQix3QkFBd0J1QixVQUFVLEVBQUVILFFBQVFUO0lBQ3pEO0lBQ0EsSUFBSWEsWUFBWUMsTUFBTSxDQUFDTCxTQUFTO1FBQzlCLE9BQU8sQ0FBQyxHQUFHcEIsd0JBQXdCMEIsZUFBZSxFQUFFTixPQUFPTyxNQUFNLEVBQUVQLE9BQU9RLFVBQVUsRUFBRVIsT0FBT1MsVUFBVTtJQUN6RztJQUNBLE9BQU8sQ0FBQyxHQUFHN0Isd0JBQXdCMEIsZUFBZSxFQUFFTjtBQUN0RDtBQUNBMUMsT0FBT29DLGdCQUFnQjtBQUN2Qiw2REFBNkQ7QUFFN0QsS0FBTWhCLENBQUFBLENBRU4iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbG91ZHNoaWZ0Ly4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvaGFzaC1ub2RlL2Rpc3QtY2pzL2luZGV4LmpzP2E3ODIiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19uYW1lID0gKHRhcmdldCwgdmFsdWUpID0+IF9fZGVmUHJvcCh0YXJnZXQsIFwibmFtZVwiLCB7IHZhbHVlLCBjb25maWd1cmFibGU6IHRydWUgfSk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcblxuLy8gc3JjL2luZGV4LnRzXG52YXIgc3JjX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KHNyY19leHBvcnRzLCB7XG4gIEhhc2g6ICgpID0+IEhhc2hcbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMoc3JjX2V4cG9ydHMpO1xudmFyIGltcG9ydF91dGlsX2J1ZmZlcl9mcm9tID0gcmVxdWlyZShcIkBzbWl0aHkvdXRpbC1idWZmZXItZnJvbVwiKTtcbnZhciBpbXBvcnRfdXRpbF91dGY4ID0gcmVxdWlyZShcIkBzbWl0aHkvdXRpbC11dGY4XCIpO1xudmFyIGltcG9ydF9idWZmZXIgPSByZXF1aXJlKFwiYnVmZmVyXCIpO1xudmFyIGltcG9ydF9jcnlwdG8gPSByZXF1aXJlKFwiY3J5cHRvXCIpO1xudmFyIEhhc2ggPSBjbGFzcyB7XG4gIHN0YXRpYyB7XG4gICAgX19uYW1lKHRoaXMsIFwiSGFzaFwiKTtcbiAgfVxuICBjb25zdHJ1Y3RvcihhbGdvcml0aG1JZGVudGlmaWVyLCBzZWNyZXQpIHtcbiAgICB0aGlzLmFsZ29yaXRobUlkZW50aWZpZXIgPSBhbGdvcml0aG1JZGVudGlmaWVyO1xuICAgIHRoaXMuc2VjcmV0ID0gc2VjcmV0O1xuICAgIHRoaXMucmVzZXQoKTtcbiAgfVxuICB1cGRhdGUodG9IYXNoLCBlbmNvZGluZykge1xuICAgIHRoaXMuaGFzaC51cGRhdGUoKDAsIGltcG9ydF91dGlsX3V0ZjgudG9VaW50OEFycmF5KShjYXN0U291cmNlRGF0YSh0b0hhc2gsIGVuY29kaW5nKSkpO1xuICB9XG4gIGRpZ2VzdCgpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuaGFzaC5kaWdlc3QoKSk7XG4gIH1cbiAgcmVzZXQoKSB7XG4gICAgdGhpcy5oYXNoID0gdGhpcy5zZWNyZXQgPyAoMCwgaW1wb3J0X2NyeXB0by5jcmVhdGVIbWFjKSh0aGlzLmFsZ29yaXRobUlkZW50aWZpZXIsIGNhc3RTb3VyY2VEYXRhKHRoaXMuc2VjcmV0KSkgOiAoMCwgaW1wb3J0X2NyeXB0by5jcmVhdGVIYXNoKSh0aGlzLmFsZ29yaXRobUlkZW50aWZpZXIpO1xuICB9XG59O1xuZnVuY3Rpb24gY2FzdFNvdXJjZURhdGEodG9DYXN0LCBlbmNvZGluZykge1xuICBpZiAoaW1wb3J0X2J1ZmZlci5CdWZmZXIuaXNCdWZmZXIodG9DYXN0KSkge1xuICAgIHJldHVybiB0b0Nhc3Q7XG4gIH1cbiAgaWYgKHR5cGVvZiB0b0Nhc3QgPT09IFwic3RyaW5nXCIpIHtcbiAgICByZXR1cm4gKDAsIGltcG9ydF91dGlsX2J1ZmZlcl9mcm9tLmZyb21TdHJpbmcpKHRvQ2FzdCwgZW5jb2RpbmcpO1xuICB9XG4gIGlmIChBcnJheUJ1ZmZlci5pc1ZpZXcodG9DYXN0KSkge1xuICAgIHJldHVybiAoMCwgaW1wb3J0X3V0aWxfYnVmZmVyX2Zyb20uZnJvbUFycmF5QnVmZmVyKSh0b0Nhc3QuYnVmZmVyLCB0b0Nhc3QuYnl0ZU9mZnNldCwgdG9DYXN0LmJ5dGVMZW5ndGgpO1xuICB9XG4gIHJldHVybiAoMCwgaW1wb3J0X3V0aWxfYnVmZmVyX2Zyb20uZnJvbUFycmF5QnVmZmVyKSh0b0Nhc3QpO1xufVxuX19uYW1lKGNhc3RTb3VyY2VEYXRhLCBcImNhc3RTb3VyY2VEYXRhXCIpO1xuLy8gQW5ub3RhdGUgdGhlIENvbW1vbkpTIGV4cG9ydCBuYW1lcyBmb3IgRVNNIGltcG9ydCBpbiBub2RlOlxuXG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgSGFzaFxufSk7XG5cbiJdLCJuYW1lcyI6WyJfX2RlZlByb3AiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsIl9fZ2V0T3duUHJvcERlc2MiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJfX2dldE93blByb3BOYW1lcyIsImdldE93blByb3BlcnR5TmFtZXMiLCJfX2hhc093blByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsIl9fbmFtZSIsInRhcmdldCIsInZhbHVlIiwiY29uZmlndXJhYmxlIiwiX19leHBvcnQiLCJhbGwiLCJuYW1lIiwiZ2V0IiwiZW51bWVyYWJsZSIsIl9fY29weVByb3BzIiwidG8iLCJmcm9tIiwiZXhjZXB0IiwiZGVzYyIsImtleSIsImNhbGwiLCJfX3RvQ29tbW9uSlMiLCJtb2QiLCJzcmNfZXhwb3J0cyIsIkhhc2giLCJtb2R1bGUiLCJleHBvcnRzIiwiaW1wb3J0X3V0aWxfYnVmZmVyX2Zyb20iLCJyZXF1aXJlIiwiaW1wb3J0X3V0aWxfdXRmOCIsImltcG9ydF9idWZmZXIiLCJpbXBvcnRfY3J5cHRvIiwiY29uc3RydWN0b3IiLCJhbGdvcml0aG1JZGVudGlmaWVyIiwic2VjcmV0IiwicmVzZXQiLCJ1cGRhdGUiLCJ0b0hhc2giLCJlbmNvZGluZyIsImhhc2giLCJ0b1VpbnQ4QXJyYXkiLCJjYXN0U291cmNlRGF0YSIsImRpZ2VzdCIsIlByb21pc2UiLCJyZXNvbHZlIiwiY3JlYXRlSG1hYyIsImNyZWF0ZUhhc2giLCJ0b0Nhc3QiLCJCdWZmZXIiLCJpc0J1ZmZlciIsImZyb21TdHJpbmciLCJBcnJheUJ1ZmZlciIsImlzVmlldyIsImZyb21BcnJheUJ1ZmZlciIsImJ1ZmZlciIsImJ5dGVPZmZzZXQiLCJieXRlTGVuZ3RoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/hash-node/dist-cjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/is-array-buffer/dist-cjs/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@smithy/is-array-buffer/dist-cjs/index.js ***!
  \****************************************************************/
/***/ ((module) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value)=>__defProp(target, \"name\", {\n        value,\n        configurable: true\n    });\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n    isArrayBuffer: ()=>isArrayBuffer\n});\nmodule.exports = __toCommonJS(src_exports);\nvar isArrayBuffer = /* @__PURE__ */ __name((arg)=>typeof ArrayBuffer === \"function\" && arg instanceof ArrayBuffer || Object.prototype.toString.call(arg) === \"[object ArrayBuffer]\", \"isArrayBuffer\");\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9pcy1hcnJheS1idWZmZXIvZGlzdC1janMvaW5kZXguanMiLCJtYXBwaW5ncyI6IjtBQUFBLElBQUlBLFlBQVlDLE9BQU9DLGNBQWM7QUFDckMsSUFBSUMsbUJBQW1CRixPQUFPRyx3QkFBd0I7QUFDdEQsSUFBSUMsb0JBQW9CSixPQUFPSyxtQkFBbUI7QUFDbEQsSUFBSUMsZUFBZU4sT0FBT08sU0FBUyxDQUFDQyxjQUFjO0FBQ2xELElBQUlDLFNBQVMsQ0FBQ0MsUUFBUUMsUUFBVVosVUFBVVcsUUFBUSxRQUFRO1FBQUVDO1FBQU9DLGNBQWM7SUFBSztBQUN0RixJQUFJQyxXQUFXLENBQUNILFFBQVFJO0lBQ3RCLElBQUssSUFBSUMsUUFBUUQsSUFDZmYsVUFBVVcsUUFBUUssTUFBTTtRQUFFQyxLQUFLRixHQUFHLENBQUNDLEtBQUs7UUFBRUUsWUFBWTtJQUFLO0FBQy9EO0FBQ0EsSUFBSUMsY0FBYyxDQUFDQyxJQUFJQyxNQUFNQyxRQUFRQztJQUNuQyxJQUFJRixRQUFRLE9BQU9BLFNBQVMsWUFBWSxPQUFPQSxTQUFTLFlBQVk7UUFDbEUsS0FBSyxJQUFJRyxPQUFPbkIsa0JBQWtCZ0IsTUFDaEMsSUFBSSxDQUFDZCxhQUFha0IsSUFBSSxDQUFDTCxJQUFJSSxRQUFRQSxRQUFRRixRQUN6Q3RCLFVBQVVvQixJQUFJSSxLQUFLO1lBQUVQLEtBQUssSUFBTUksSUFBSSxDQUFDRyxJQUFJO1lBQUVOLFlBQVksQ0FBRUssQ0FBQUEsT0FBT3BCLGlCQUFpQmtCLE1BQU1HLElBQUcsS0FBTUQsS0FBS0wsVUFBVTtRQUFDO0lBQ3RIO0lBQ0EsT0FBT0U7QUFDVDtBQUNBLElBQUlNLGVBQWUsQ0FBQ0MsTUFBUVIsWUFBWW5CLFVBQVUsQ0FBQyxHQUFHLGNBQWM7UUFBRVksT0FBTztJQUFLLElBQUllO0FBRXRGLGVBQWU7QUFDZixJQUFJQyxjQUFjLENBQUM7QUFDbkJkLFNBQVNjLGFBQWE7SUFDcEJDLGVBQWUsSUFBTUE7QUFDdkI7QUFDQUMsT0FBT0MsT0FBTyxHQUFHTCxhQUFhRTtBQUM5QixJQUFJQyxnQkFBZ0IsYUFBYSxHQUFHbkIsT0FBTyxDQUFDc0IsTUFBUSxPQUFPQyxnQkFBZ0IsY0FBY0QsZUFBZUMsZUFBZWhDLE9BQU9PLFNBQVMsQ0FBQzBCLFFBQVEsQ0FBQ1QsSUFBSSxDQUFDTyxTQUFTLHdCQUF3QjtBQUN2TCw2REFBNkQ7QUFFN0QsS0FBTUYsQ0FBQUEsQ0FFTiIsInNvdXJjZXMiOlsid2VicGFjazovL2Nsb3Vkc2hpZnQvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9pcy1hcnJheS1idWZmZXIvZGlzdC1janMvaW5kZXguanM/NzM1ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX25hbWUgPSAodGFyZ2V0LCB2YWx1ZSkgPT4gX19kZWZQcm9wKHRhcmdldCwgXCJuYW1lXCIsIHsgdmFsdWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9KTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xuXG4vLyBzcmMvaW5kZXgudHNcbnZhciBzcmNfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQoc3JjX2V4cG9ydHMsIHtcbiAgaXNBcnJheUJ1ZmZlcjogKCkgPT4gaXNBcnJheUJ1ZmZlclxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhzcmNfZXhwb3J0cyk7XG52YXIgaXNBcnJheUJ1ZmZlciA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGFyZykgPT4gdHlwZW9mIEFycmF5QnVmZmVyID09PSBcImZ1bmN0aW9uXCIgJiYgYXJnIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIgfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFyZykgPT09IFwiW29iamVjdCBBcnJheUJ1ZmZlcl1cIiwgXCJpc0FycmF5QnVmZmVyXCIpO1xuLy8gQW5ub3RhdGUgdGhlIENvbW1vbkpTIGV4cG9ydCBuYW1lcyBmb3IgRVNNIGltcG9ydCBpbiBub2RlOlxuXG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNBcnJheUJ1ZmZlclxufSk7XG5cbiJdLCJuYW1lcyI6WyJfX2RlZlByb3AiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsIl9fZ2V0T3duUHJvcERlc2MiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJfX2dldE93blByb3BOYW1lcyIsImdldE93blByb3BlcnR5TmFtZXMiLCJfX2hhc093blByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsIl9fbmFtZSIsInRhcmdldCIsInZhbHVlIiwiY29uZmlndXJhYmxlIiwiX19leHBvcnQiLCJhbGwiLCJuYW1lIiwiZ2V0IiwiZW51bWVyYWJsZSIsIl9fY29weVByb3BzIiwidG8iLCJmcm9tIiwiZXhjZXB0IiwiZGVzYyIsImtleSIsImNhbGwiLCJfX3RvQ29tbW9uSlMiLCJtb2QiLCJzcmNfZXhwb3J0cyIsImlzQXJyYXlCdWZmZXIiLCJtb2R1bGUiLCJleHBvcnRzIiwiYXJnIiwiQXJyYXlCdWZmZXIiLCJ0b1N0cmluZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/is-array-buffer/dist-cjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/middleware-content-length/dist-cjs/index.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@smithy/middleware-content-length/dist-cjs/index.js ***!
  \**************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value)=>__defProp(target, \"name\", {\n        value,\n        configurable: true\n    });\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n    contentLengthMiddleware: ()=>contentLengthMiddleware,\n    contentLengthMiddlewareOptions: ()=>contentLengthMiddlewareOptions,\n    getContentLengthPlugin: ()=>getContentLengthPlugin\n});\nmodule.exports = __toCommonJS(src_exports);\nvar import_protocol_http = __webpack_require__(/*! @smithy/protocol-http */ \"(rsc)/./node_modules/@smithy/protocol-http/dist-cjs/index.js\");\nvar CONTENT_LENGTH_HEADER = \"content-length\";\nfunction contentLengthMiddleware(bodyLengthChecker) {\n    return (next)=>async (args)=>{\n            const request = args.request;\n            if (import_protocol_http.HttpRequest.isInstance(request)) {\n                const { body, headers } = request;\n                if (body && Object.keys(headers).map((str)=>str.toLowerCase()).indexOf(CONTENT_LENGTH_HEADER) === -1) {\n                    try {\n                        const length = bodyLengthChecker(body);\n                        request.headers = {\n                            ...request.headers,\n                            [CONTENT_LENGTH_HEADER]: String(length)\n                        };\n                    } catch (error) {}\n                }\n            }\n            return next({\n                ...args,\n                request\n            });\n        };\n}\n__name(contentLengthMiddleware, \"contentLengthMiddleware\");\nvar contentLengthMiddlewareOptions = {\n    step: \"build\",\n    tags: [\n        \"SET_CONTENT_LENGTH\",\n        \"CONTENT_LENGTH\"\n    ],\n    name: \"contentLengthMiddleware\",\n    override: true\n};\nvar getContentLengthPlugin = /* @__PURE__ */ __name((options)=>({\n        applyToStack: (clientStack)=>{\n            clientStack.add(contentLengthMiddleware(options.bodyLengthChecker), contentLengthMiddlewareOptions);\n        }\n    }), \"getContentLengthPlugin\");\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9taWRkbGV3YXJlLWNvbnRlbnQtbGVuZ3RoL2Rpc3QtY2pzL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7QUFBQSxJQUFJQSxZQUFZQyxPQUFPQyxjQUFjO0FBQ3JDLElBQUlDLG1CQUFtQkYsT0FBT0csd0JBQXdCO0FBQ3RELElBQUlDLG9CQUFvQkosT0FBT0ssbUJBQW1CO0FBQ2xELElBQUlDLGVBQWVOLE9BQU9PLFNBQVMsQ0FBQ0MsY0FBYztBQUNsRCxJQUFJQyxTQUFTLENBQUNDLFFBQVFDLFFBQVVaLFVBQVVXLFFBQVEsUUFBUTtRQUFFQztRQUFPQyxjQUFjO0lBQUs7QUFDdEYsSUFBSUMsV0FBVyxDQUFDSCxRQUFRSTtJQUN0QixJQUFLLElBQUlDLFFBQVFELElBQ2ZmLFVBQVVXLFFBQVFLLE1BQU07UUFBRUMsS0FBS0YsR0FBRyxDQUFDQyxLQUFLO1FBQUVFLFlBQVk7SUFBSztBQUMvRDtBQUNBLElBQUlDLGNBQWMsQ0FBQ0MsSUFBSUMsTUFBTUMsUUFBUUM7SUFDbkMsSUFBSUYsUUFBUSxPQUFPQSxTQUFTLFlBQVksT0FBT0EsU0FBUyxZQUFZO1FBQ2xFLEtBQUssSUFBSUcsT0FBT25CLGtCQUFrQmdCLE1BQ2hDLElBQUksQ0FBQ2QsYUFBYWtCLElBQUksQ0FBQ0wsSUFBSUksUUFBUUEsUUFBUUYsUUFDekN0QixVQUFVb0IsSUFBSUksS0FBSztZQUFFUCxLQUFLLElBQU1JLElBQUksQ0FBQ0csSUFBSTtZQUFFTixZQUFZLENBQUVLLENBQUFBLE9BQU9wQixpQkFBaUJrQixNQUFNRyxJQUFHLEtBQU1ELEtBQUtMLFVBQVU7UUFBQztJQUN0SDtJQUNBLE9BQU9FO0FBQ1Q7QUFDQSxJQUFJTSxlQUFlLENBQUNDLE1BQVFSLFlBQVluQixVQUFVLENBQUMsR0FBRyxjQUFjO1FBQUVZLE9BQU87SUFBSyxJQUFJZTtBQUV0RixlQUFlO0FBQ2YsSUFBSUMsY0FBYyxDQUFDO0FBQ25CZCxTQUFTYyxhQUFhO0lBQ3BCQyx5QkFBeUIsSUFBTUE7SUFDL0JDLGdDQUFnQyxJQUFNQTtJQUN0Q0Msd0JBQXdCLElBQU1BO0FBQ2hDO0FBQ0FDLE9BQU9DLE9BQU8sR0FBR1AsYUFBYUU7QUFDOUIsSUFBSU0sdUJBQXVCQyxtQkFBT0EsQ0FBQywyRkFBdUI7QUFDMUQsSUFBSUMsd0JBQXdCO0FBQzVCLFNBQVNQLHdCQUF3QlEsaUJBQWlCO0lBQ2hELE9BQU8sQ0FBQ0MsT0FBUyxPQUFPQztZQUN0QixNQUFNQyxVQUFVRCxLQUFLQyxPQUFPO1lBQzVCLElBQUlOLHFCQUFxQk8sV0FBVyxDQUFDQyxVQUFVLENBQUNGLFVBQVU7Z0JBQ3hELE1BQU0sRUFBRUcsSUFBSSxFQUFFQyxPQUFPLEVBQUUsR0FBR0o7Z0JBQzFCLElBQUlHLFFBQVExQyxPQUFPNEMsSUFBSSxDQUFDRCxTQUFTRSxHQUFHLENBQUMsQ0FBQ0MsTUFBUUEsSUFBSUMsV0FBVyxJQUFJQyxPQUFPLENBQUNiLDJCQUEyQixDQUFDLEdBQUc7b0JBQ3RHLElBQUk7d0JBQ0YsTUFBTWMsU0FBU2Isa0JBQWtCTTt3QkFDakNILFFBQVFJLE9BQU8sR0FBRzs0QkFDaEIsR0FBR0osUUFBUUksT0FBTzs0QkFDbEIsQ0FBQ1Isc0JBQXNCLEVBQUVlLE9BQU9EO3dCQUNsQztvQkFDRixFQUFFLE9BQU9FLE9BQU8sQ0FDaEI7Z0JBQ0Y7WUFDRjtZQUNBLE9BQU9kLEtBQUs7Z0JBQ1YsR0FBR0MsSUFBSTtnQkFDUEM7WUFDRjtRQUNGO0FBQ0Y7QUFDQTlCLE9BQU9tQix5QkFBeUI7QUFDaEMsSUFBSUMsaUNBQWlDO0lBQ25DdUIsTUFBTTtJQUNOQyxNQUFNO1FBQUM7UUFBc0I7S0FBaUI7SUFDOUN0QyxNQUFNO0lBQ051QyxVQUFVO0FBQ1o7QUFDQSxJQUFJeEIseUJBQXlCLGFBQWEsR0FBR3JCLE9BQU8sQ0FBQzhDLFVBQWE7UUFDaEVDLGNBQWMsQ0FBQ0M7WUFDYkEsWUFBWUMsR0FBRyxDQUFDOUIsd0JBQXdCMkIsUUFBUW5CLGlCQUFpQixHQUFHUDtRQUN0RTtJQUNGLElBQUk7QUFDSiw2REFBNkQ7QUFFN0QsS0FBTUUsQ0FBQUEsQ0FJTiIsInNvdXJjZXMiOlsid2VicGFjazovL2Nsb3Vkc2hpZnQvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9taWRkbGV3YXJlLWNvbnRlbnQtbGVuZ3RoL2Rpc3QtY2pzL2luZGV4LmpzPzljZjkiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19uYW1lID0gKHRhcmdldCwgdmFsdWUpID0+IF9fZGVmUHJvcCh0YXJnZXQsIFwibmFtZVwiLCB7IHZhbHVlLCBjb25maWd1cmFibGU6IHRydWUgfSk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcblxuLy8gc3JjL2luZGV4LnRzXG52YXIgc3JjX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KHNyY19leHBvcnRzLCB7XG4gIGNvbnRlbnRMZW5ndGhNaWRkbGV3YXJlOiAoKSA9PiBjb250ZW50TGVuZ3RoTWlkZGxld2FyZSxcbiAgY29udGVudExlbmd0aE1pZGRsZXdhcmVPcHRpb25zOiAoKSA9PiBjb250ZW50TGVuZ3RoTWlkZGxld2FyZU9wdGlvbnMsXG4gIGdldENvbnRlbnRMZW5ndGhQbHVnaW46ICgpID0+IGdldENvbnRlbnRMZW5ndGhQbHVnaW5cbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMoc3JjX2V4cG9ydHMpO1xudmFyIGltcG9ydF9wcm90b2NvbF9odHRwID0gcmVxdWlyZShcIkBzbWl0aHkvcHJvdG9jb2wtaHR0cFwiKTtcbnZhciBDT05URU5UX0xFTkdUSF9IRUFERVIgPSBcImNvbnRlbnQtbGVuZ3RoXCI7XG5mdW5jdGlvbiBjb250ZW50TGVuZ3RoTWlkZGxld2FyZShib2R5TGVuZ3RoQ2hlY2tlcikge1xuICByZXR1cm4gKG5leHQpID0+IGFzeW5jIChhcmdzKSA9PiB7XG4gICAgY29uc3QgcmVxdWVzdCA9IGFyZ3MucmVxdWVzdDtcbiAgICBpZiAoaW1wb3J0X3Byb3RvY29sX2h0dHAuSHR0cFJlcXVlc3QuaXNJbnN0YW5jZShyZXF1ZXN0KSkge1xuICAgICAgY29uc3QgeyBib2R5LCBoZWFkZXJzIH0gPSByZXF1ZXN0O1xuICAgICAgaWYgKGJvZHkgJiYgT2JqZWN0LmtleXMoaGVhZGVycykubWFwKChzdHIpID0+IHN0ci50b0xvd2VyQ2FzZSgpKS5pbmRleE9mKENPTlRFTlRfTEVOR1RIX0hFQURFUikgPT09IC0xKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY29uc3QgbGVuZ3RoID0gYm9keUxlbmd0aENoZWNrZXIoYm9keSk7XG4gICAgICAgICAgcmVxdWVzdC5oZWFkZXJzID0ge1xuICAgICAgICAgICAgLi4ucmVxdWVzdC5oZWFkZXJzLFxuICAgICAgICAgICAgW0NPTlRFTlRfTEVOR1RIX0hFQURFUl06IFN0cmluZyhsZW5ndGgpXG4gICAgICAgICAgfTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbmV4dCh7XG4gICAgICAuLi5hcmdzLFxuICAgICAgcmVxdWVzdFxuICAgIH0pO1xuICB9O1xufVxuX19uYW1lKGNvbnRlbnRMZW5ndGhNaWRkbGV3YXJlLCBcImNvbnRlbnRMZW5ndGhNaWRkbGV3YXJlXCIpO1xudmFyIGNvbnRlbnRMZW5ndGhNaWRkbGV3YXJlT3B0aW9ucyA9IHtcbiAgc3RlcDogXCJidWlsZFwiLFxuICB0YWdzOiBbXCJTRVRfQ09OVEVOVF9MRU5HVEhcIiwgXCJDT05URU5UX0xFTkdUSFwiXSxcbiAgbmFtZTogXCJjb250ZW50TGVuZ3RoTWlkZGxld2FyZVwiLFxuICBvdmVycmlkZTogdHJ1ZVxufTtcbnZhciBnZXRDb250ZW50TGVuZ3RoUGx1Z2luID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgob3B0aW9ucykgPT4gKHtcbiAgYXBwbHlUb1N0YWNrOiAoY2xpZW50U3RhY2spID0+IHtcbiAgICBjbGllbnRTdGFjay5hZGQoY29udGVudExlbmd0aE1pZGRsZXdhcmUob3B0aW9ucy5ib2R5TGVuZ3RoQ2hlY2tlciksIGNvbnRlbnRMZW5ndGhNaWRkbGV3YXJlT3B0aW9ucyk7XG4gIH1cbn0pLCBcImdldENvbnRlbnRMZW5ndGhQbHVnaW5cIik7XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG5cbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBjb250ZW50TGVuZ3RoTWlkZGxld2FyZSxcbiAgY29udGVudExlbmd0aE1pZGRsZXdhcmVPcHRpb25zLFxuICBnZXRDb250ZW50TGVuZ3RoUGx1Z2luXG59KTtcblxuIl0sIm5hbWVzIjpbIl9fZGVmUHJvcCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiX19nZXRPd25Qcm9wRGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9fZ2V0T3duUHJvcE5hbWVzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIl9faGFzT3duUHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiX19uYW1lIiwidGFyZ2V0IiwidmFsdWUiLCJjb25maWd1cmFibGUiLCJfX2V4cG9ydCIsImFsbCIsIm5hbWUiLCJnZXQiLCJlbnVtZXJhYmxlIiwiX19jb3B5UHJvcHMiLCJ0byIsImZyb20iLCJleGNlcHQiLCJkZXNjIiwia2V5IiwiY2FsbCIsIl9fdG9Db21tb25KUyIsIm1vZCIsInNyY19leHBvcnRzIiwiY29udGVudExlbmd0aE1pZGRsZXdhcmUiLCJjb250ZW50TGVuZ3RoTWlkZGxld2FyZU9wdGlvbnMiLCJnZXRDb250ZW50TGVuZ3RoUGx1Z2luIiwibW9kdWxlIiwiZXhwb3J0cyIsImltcG9ydF9wcm90b2NvbF9odHRwIiwicmVxdWlyZSIsIkNPTlRFTlRfTEVOR1RIX0hFQURFUiIsImJvZHlMZW5ndGhDaGVja2VyIiwibmV4dCIsImFyZ3MiLCJyZXF1ZXN0IiwiSHR0cFJlcXVlc3QiLCJpc0luc3RhbmNlIiwiYm9keSIsImhlYWRlcnMiLCJrZXlzIiwibWFwIiwic3RyIiwidG9Mb3dlckNhc2UiLCJpbmRleE9mIiwibGVuZ3RoIiwiU3RyaW5nIiwiZXJyb3IiLCJzdGVwIiwidGFncyIsIm92ZXJyaWRlIiwib3B0aW9ucyIsImFwcGx5VG9TdGFjayIsImNsaWVudFN0YWNrIiwiYWRkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/middleware-content-length/dist-cjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/middleware-endpoint/dist-cjs/adaptors/getEndpointFromConfig.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@smithy/middleware-endpoint/dist-cjs/adaptors/getEndpointFromConfig.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getEndpointFromConfig = void 0;\nconst node_config_provider_1 = __webpack_require__(/*! @smithy/node-config-provider */ \"(rsc)/./node_modules/@smithy/node-config-provider/dist-cjs/index.js\");\nconst getEndpointUrlConfig_1 = __webpack_require__(/*! ./getEndpointUrlConfig */ \"(rsc)/./node_modules/@smithy/middleware-endpoint/dist-cjs/adaptors/getEndpointUrlConfig.js\");\nconst getEndpointFromConfig = async (serviceId)=>(0, node_config_provider_1.loadConfig)((0, getEndpointUrlConfig_1.getEndpointUrlConfig)(serviceId !== null && serviceId !== void 0 ? serviceId : \"\"))();\nexports.getEndpointFromConfig = getEndpointFromConfig;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9taWRkbGV3YXJlLWVuZHBvaW50L2Rpc3QtY2pzL2FkYXB0b3JzL2dldEVuZHBvaW50RnJvbUNvbmZpZy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsNkJBQTZCLEdBQUcsS0FBSztBQUNyQyxNQUFNRyx5QkFBeUJDLG1CQUFPQSxDQUFDLHlHQUE4QjtBQUNyRSxNQUFNQyx5QkFBeUJELG1CQUFPQSxDQUFDLDBIQUF3QjtBQUMvRCxNQUFNRix3QkFBd0IsT0FBT0ksWUFBYyxDQUFDLEdBQUdILHVCQUF1QkksVUFBVSxFQUFFLENBQUMsR0FBR0YsdUJBQXVCRyxvQkFBb0IsRUFBRUYsY0FBYyxRQUFRQSxjQUFjLEtBQUssSUFBSUEsWUFBWTtBQUNwTU4sNkJBQTZCLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2xvdWRzaGlmdC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L21pZGRsZXdhcmUtZW5kcG9pbnQvZGlzdC1janMvYWRhcHRvcnMvZ2V0RW5kcG9pbnRGcm9tQ29uZmlnLmpzPzFjMzMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdldEVuZHBvaW50RnJvbUNvbmZpZyA9IHZvaWQgMDtcbmNvbnN0IG5vZGVfY29uZmlnX3Byb3ZpZGVyXzEgPSByZXF1aXJlKFwiQHNtaXRoeS9ub2RlLWNvbmZpZy1wcm92aWRlclwiKTtcbmNvbnN0IGdldEVuZHBvaW50VXJsQ29uZmlnXzEgPSByZXF1aXJlKFwiLi9nZXRFbmRwb2ludFVybENvbmZpZ1wiKTtcbmNvbnN0IGdldEVuZHBvaW50RnJvbUNvbmZpZyA9IGFzeW5jIChzZXJ2aWNlSWQpID0+ICgwLCBub2RlX2NvbmZpZ19wcm92aWRlcl8xLmxvYWRDb25maWcpKCgwLCBnZXRFbmRwb2ludFVybENvbmZpZ18xLmdldEVuZHBvaW50VXJsQ29uZmlnKShzZXJ2aWNlSWQgIT09IG51bGwgJiYgc2VydmljZUlkICE9PSB2b2lkIDAgPyBzZXJ2aWNlSWQgOiBcIlwiKSkoKTtcbmV4cG9ydHMuZ2V0RW5kcG9pbnRGcm9tQ29uZmlnID0gZ2V0RW5kcG9pbnRGcm9tQ29uZmlnO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZ2V0RW5kcG9pbnRGcm9tQ29uZmlnIiwibm9kZV9jb25maWdfcHJvdmlkZXJfMSIsInJlcXVpcmUiLCJnZXRFbmRwb2ludFVybENvbmZpZ18xIiwic2VydmljZUlkIiwibG9hZENvbmZpZyIsImdldEVuZHBvaW50VXJsQ29uZmlnIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/middleware-endpoint/dist-cjs/adaptors/getEndpointFromConfig.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/middleware-endpoint/dist-cjs/adaptors/getEndpointUrlConfig.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@smithy/middleware-endpoint/dist-cjs/adaptors/getEndpointUrlConfig.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getEndpointUrlConfig = void 0;\nconst shared_ini_file_loader_1 = __webpack_require__(/*! @smithy/shared-ini-file-loader */ \"(rsc)/./node_modules/@smithy/shared-ini-file-loader/dist-cjs/index.js\");\nconst ENV_ENDPOINT_URL = \"AWS_ENDPOINT_URL\";\nconst CONFIG_ENDPOINT_URL = \"endpoint_url\";\nconst getEndpointUrlConfig = (serviceId)=>({\n        environmentVariableSelector: (env)=>{\n            const serviceSuffixParts = serviceId.split(\" \").map((w)=>w.toUpperCase());\n            const serviceEndpointUrl = env[[\n                ENV_ENDPOINT_URL,\n                ...serviceSuffixParts\n            ].join(\"_\")];\n            if (serviceEndpointUrl) return serviceEndpointUrl;\n            const endpointUrl = env[ENV_ENDPOINT_URL];\n            if (endpointUrl) return endpointUrl;\n            return undefined;\n        },\n        configFileSelector: (profile, config)=>{\n            if (config && profile.services) {\n                const servicesSection = config[[\n                    \"services\",\n                    profile.services\n                ].join(shared_ini_file_loader_1.CONFIG_PREFIX_SEPARATOR)];\n                if (servicesSection) {\n                    const servicePrefixParts = serviceId.split(\" \").map((w)=>w.toLowerCase());\n                    const endpointUrl = servicesSection[[\n                        servicePrefixParts.join(\"_\"),\n                        CONFIG_ENDPOINT_URL\n                    ].join(shared_ini_file_loader_1.CONFIG_PREFIX_SEPARATOR)];\n                    if (endpointUrl) return endpointUrl;\n                }\n            }\n            const endpointUrl = profile[CONFIG_ENDPOINT_URL];\n            if (endpointUrl) return endpointUrl;\n            return undefined;\n        },\n        default: undefined\n    });\nexports.getEndpointUrlConfig = getEndpointUrlConfig;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9taWRkbGV3YXJlLWVuZHBvaW50L2Rpc3QtY2pzL2FkYXB0b3JzL2dldEVuZHBvaW50VXJsQ29uZmlnLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCw0QkFBNEIsR0FBRyxLQUFLO0FBQ3BDLE1BQU1HLDJCQUEyQkMsbUJBQU9BLENBQUMsNkdBQWdDO0FBQ3pFLE1BQU1DLG1CQUFtQjtBQUN6QixNQUFNQyxzQkFBc0I7QUFDNUIsTUFBTUosdUJBQXVCLENBQUNLLFlBQWU7UUFDekNDLDZCQUE2QixDQUFDQztZQUMxQixNQUFNQyxxQkFBcUJILFVBQVVJLEtBQUssQ0FBQyxLQUFLQyxHQUFHLENBQUMsQ0FBQ0MsSUFBTUEsRUFBRUMsV0FBVztZQUN4RSxNQUFNQyxxQkFBcUJOLEdBQUcsQ0FBQztnQkFBQ0o7bUJBQXFCSzthQUFtQixDQUFDTSxJQUFJLENBQUMsS0FBSztZQUNuRixJQUFJRCxvQkFDQSxPQUFPQTtZQUNYLE1BQU1FLGNBQWNSLEdBQUcsQ0FBQ0osaUJBQWlCO1lBQ3pDLElBQUlZLGFBQ0EsT0FBT0E7WUFDWCxPQUFPQztRQUNYO1FBQ0FDLG9CQUFvQixDQUFDQyxTQUFTQztZQUMxQixJQUFJQSxVQUFVRCxRQUFRRSxRQUFRLEVBQUU7Z0JBQzVCLE1BQU1DLGtCQUFrQkYsTUFBTSxDQUFDO29CQUFDO29CQUFZRCxRQUFRRSxRQUFRO2lCQUFDLENBQUNOLElBQUksQ0FBQ2IseUJBQXlCcUIsdUJBQXVCLEVBQUU7Z0JBQ3JILElBQUlELGlCQUFpQjtvQkFDakIsTUFBTUUscUJBQXFCbEIsVUFBVUksS0FBSyxDQUFDLEtBQUtDLEdBQUcsQ0FBQyxDQUFDQyxJQUFNQSxFQUFFYSxXQUFXO29CQUN4RSxNQUFNVCxjQUFjTSxlQUFlLENBQUM7d0JBQUNFLG1CQUFtQlQsSUFBSSxDQUFDO3dCQUFNVjtxQkFBb0IsQ0FBQ1UsSUFBSSxDQUFDYix5QkFBeUJxQix1QkFBdUIsRUFBRTtvQkFDL0ksSUFBSVAsYUFDQSxPQUFPQTtnQkFDZjtZQUNKO1lBQ0EsTUFBTUEsY0FBY0csT0FBTyxDQUFDZCxvQkFBb0I7WUFDaEQsSUFBSVcsYUFDQSxPQUFPQTtZQUNYLE9BQU9DO1FBQ1g7UUFDQVMsU0FBU1Q7SUFDYjtBQUNBbEIsNEJBQTRCLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2xvdWRzaGlmdC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L21pZGRsZXdhcmUtZW5kcG9pbnQvZGlzdC1janMvYWRhcHRvcnMvZ2V0RW5kcG9pbnRVcmxDb25maWcuanM/ZDhhMiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0RW5kcG9pbnRVcmxDb25maWcgPSB2b2lkIDA7XG5jb25zdCBzaGFyZWRfaW5pX2ZpbGVfbG9hZGVyXzEgPSByZXF1aXJlKFwiQHNtaXRoeS9zaGFyZWQtaW5pLWZpbGUtbG9hZGVyXCIpO1xuY29uc3QgRU5WX0VORFBPSU5UX1VSTCA9IFwiQVdTX0VORFBPSU5UX1VSTFwiO1xuY29uc3QgQ09ORklHX0VORFBPSU5UX1VSTCA9IFwiZW5kcG9pbnRfdXJsXCI7XG5jb25zdCBnZXRFbmRwb2ludFVybENvbmZpZyA9IChzZXJ2aWNlSWQpID0+ICh7XG4gICAgZW52aXJvbm1lbnRWYXJpYWJsZVNlbGVjdG9yOiAoZW52KSA9PiB7XG4gICAgICAgIGNvbnN0IHNlcnZpY2VTdWZmaXhQYXJ0cyA9IHNlcnZpY2VJZC5zcGxpdChcIiBcIikubWFwKCh3KSA9PiB3LnRvVXBwZXJDYXNlKCkpO1xuICAgICAgICBjb25zdCBzZXJ2aWNlRW5kcG9pbnRVcmwgPSBlbnZbW0VOVl9FTkRQT0lOVF9VUkwsIC4uLnNlcnZpY2VTdWZmaXhQYXJ0c10uam9pbihcIl9cIildO1xuICAgICAgICBpZiAoc2VydmljZUVuZHBvaW50VXJsKVxuICAgICAgICAgICAgcmV0dXJuIHNlcnZpY2VFbmRwb2ludFVybDtcbiAgICAgICAgY29uc3QgZW5kcG9pbnRVcmwgPSBlbnZbRU5WX0VORFBPSU5UX1VSTF07XG4gICAgICAgIGlmIChlbmRwb2ludFVybClcbiAgICAgICAgICAgIHJldHVybiBlbmRwb2ludFVybDtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9LFxuICAgIGNvbmZpZ0ZpbGVTZWxlY3RvcjogKHByb2ZpbGUsIGNvbmZpZykgPT4ge1xuICAgICAgICBpZiAoY29uZmlnICYmIHByb2ZpbGUuc2VydmljZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IHNlcnZpY2VzU2VjdGlvbiA9IGNvbmZpZ1tbXCJzZXJ2aWNlc1wiLCBwcm9maWxlLnNlcnZpY2VzXS5qb2luKHNoYXJlZF9pbmlfZmlsZV9sb2FkZXJfMS5DT05GSUdfUFJFRklYX1NFUEFSQVRPUildO1xuICAgICAgICAgICAgaWYgKHNlcnZpY2VzU2VjdGlvbikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNlcnZpY2VQcmVmaXhQYXJ0cyA9IHNlcnZpY2VJZC5zcGxpdChcIiBcIikubWFwKCh3KSA9PiB3LnRvTG93ZXJDYXNlKCkpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGVuZHBvaW50VXJsID0gc2VydmljZXNTZWN0aW9uW1tzZXJ2aWNlUHJlZml4UGFydHMuam9pbihcIl9cIiksIENPTkZJR19FTkRQT0lOVF9VUkxdLmpvaW4oc2hhcmVkX2luaV9maWxlX2xvYWRlcl8xLkNPTkZJR19QUkVGSVhfU0VQQVJBVE9SKV07XG4gICAgICAgICAgICAgICAgaWYgKGVuZHBvaW50VXJsKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZW5kcG9pbnRVcmw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZW5kcG9pbnRVcmwgPSBwcm9maWxlW0NPTkZJR19FTkRQT0lOVF9VUkxdO1xuICAgICAgICBpZiAoZW5kcG9pbnRVcmwpXG4gICAgICAgICAgICByZXR1cm4gZW5kcG9pbnRVcmw7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfSxcbiAgICBkZWZhdWx0OiB1bmRlZmluZWQsXG59KTtcbmV4cG9ydHMuZ2V0RW5kcG9pbnRVcmxDb25maWcgPSBnZXRFbmRwb2ludFVybENvbmZpZztcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImdldEVuZHBvaW50VXJsQ29uZmlnIiwic2hhcmVkX2luaV9maWxlX2xvYWRlcl8xIiwicmVxdWlyZSIsIkVOVl9FTkRQT0lOVF9VUkwiLCJDT05GSUdfRU5EUE9JTlRfVVJMIiwic2VydmljZUlkIiwiZW52aXJvbm1lbnRWYXJpYWJsZVNlbGVjdG9yIiwiZW52Iiwic2VydmljZVN1ZmZpeFBhcnRzIiwic3BsaXQiLCJtYXAiLCJ3IiwidG9VcHBlckNhc2UiLCJzZXJ2aWNlRW5kcG9pbnRVcmwiLCJqb2luIiwiZW5kcG9pbnRVcmwiLCJ1bmRlZmluZWQiLCJjb25maWdGaWxlU2VsZWN0b3IiLCJwcm9maWxlIiwiY29uZmlnIiwic2VydmljZXMiLCJzZXJ2aWNlc1NlY3Rpb24iLCJDT05GSUdfUFJFRklYX1NFUEFSQVRPUiIsInNlcnZpY2VQcmVmaXhQYXJ0cyIsInRvTG93ZXJDYXNlIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/middleware-endpoint/dist-cjs/adaptors/getEndpointUrlConfig.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/middleware-endpoint/dist-cjs/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/@smithy/middleware-endpoint/dist-cjs/index.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value)=>__defProp(target, \"name\", {\n        value,\n        configurable: true\n    });\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n    endpointMiddleware: ()=>endpointMiddleware,\n    endpointMiddlewareOptions: ()=>endpointMiddlewareOptions,\n    getEndpointFromInstructions: ()=>getEndpointFromInstructions,\n    getEndpointPlugin: ()=>getEndpointPlugin,\n    resolveEndpointConfig: ()=>resolveEndpointConfig,\n    resolveParams: ()=>resolveParams,\n    toEndpointV1: ()=>toEndpointV1\n});\nmodule.exports = __toCommonJS(src_exports);\n// src/service-customizations/s3.ts\nvar resolveParamsForS3 = /* @__PURE__ */ __name(async (endpointParams)=>{\n    const bucket = endpointParams?.Bucket || \"\";\n    if (typeof endpointParams.Bucket === \"string\") {\n        endpointParams.Bucket = bucket.replace(/#/g, encodeURIComponent(\"#\")).replace(/\\?/g, encodeURIComponent(\"?\"));\n    }\n    if (isArnBucketName(bucket)) {\n        if (endpointParams.ForcePathStyle === true) {\n            throw new Error(\"Path-style addressing cannot be used with ARN buckets\");\n        }\n    } else if (!isDnsCompatibleBucketName(bucket) || bucket.indexOf(\".\") !== -1 && !String(endpointParams.Endpoint).startsWith(\"http:\") || bucket.toLowerCase() !== bucket || bucket.length < 3) {\n        endpointParams.ForcePathStyle = true;\n    }\n    if (endpointParams.DisableMultiRegionAccessPoints) {\n        endpointParams.disableMultiRegionAccessPoints = true;\n        endpointParams.DisableMRAP = true;\n    }\n    return endpointParams;\n}, \"resolveParamsForS3\");\nvar DOMAIN_PATTERN = /^[a-z0-9][a-z0-9\\.\\-]{1,61}[a-z0-9]$/;\nvar IP_ADDRESS_PATTERN = /(\\d+\\.){3}\\d+/;\nvar DOTS_PATTERN = /\\.\\./;\nvar isDnsCompatibleBucketName = /* @__PURE__ */ __name((bucketName)=>DOMAIN_PATTERN.test(bucketName) && !IP_ADDRESS_PATTERN.test(bucketName) && !DOTS_PATTERN.test(bucketName), \"isDnsCompatibleBucketName\");\nvar isArnBucketName = /* @__PURE__ */ __name((bucketName)=>{\n    const [arn, partition, service, , , bucket] = bucketName.split(\":\");\n    const isArn = arn === \"arn\" && bucketName.split(\":\").length >= 6;\n    const isValidArn = Boolean(isArn && partition && service && bucket);\n    if (isArn && !isValidArn) {\n        throw new Error(`Invalid ARN: ${bucketName} was an invalid ARN.`);\n    }\n    return isValidArn;\n}, \"isArnBucketName\");\n// src/adaptors/createConfigValueProvider.ts\nvar createConfigValueProvider = /* @__PURE__ */ __name((configKey, canonicalEndpointParamKey, config)=>{\n    const configProvider = /* @__PURE__ */ __name(async ()=>{\n        const configValue = config[configKey] ?? config[canonicalEndpointParamKey];\n        if (typeof configValue === \"function\") {\n            return configValue();\n        }\n        return configValue;\n    }, \"configProvider\");\n    if (configKey === \"credentialScope\" || canonicalEndpointParamKey === \"CredentialScope\") {\n        return async ()=>{\n            const credentials = typeof config.credentials === \"function\" ? await config.credentials() : config.credentials;\n            const configValue = credentials?.credentialScope ?? credentials?.CredentialScope;\n            return configValue;\n        };\n    }\n    if (configKey === \"accountId\" || canonicalEndpointParamKey === \"AccountId\") {\n        return async ()=>{\n            const credentials = typeof config.credentials === \"function\" ? await config.credentials() : config.credentials;\n            const configValue = credentials?.accountId ?? credentials?.AccountId;\n            return configValue;\n        };\n    }\n    if (configKey === \"endpoint\" || canonicalEndpointParamKey === \"endpoint\") {\n        return async ()=>{\n            const endpoint = await configProvider();\n            if (endpoint && typeof endpoint === \"object\") {\n                if (\"url\" in endpoint) {\n                    return endpoint.url.href;\n                }\n                if (\"hostname\" in endpoint) {\n                    const { protocol, hostname, port, path } = endpoint;\n                    return `${protocol}//${hostname}${port ? \":\" + port : \"\"}${path}`;\n                }\n            }\n            return endpoint;\n        };\n    }\n    return configProvider;\n}, \"createConfigValueProvider\");\n// src/adaptors/getEndpointFromInstructions.ts\nvar import_getEndpointFromConfig = __webpack_require__(/*! ./adaptors/getEndpointFromConfig */ \"(rsc)/./node_modules/@smithy/middleware-endpoint/dist-cjs/adaptors/getEndpointFromConfig.js\");\n// src/adaptors/toEndpointV1.ts\nvar import_url_parser = __webpack_require__(/*! @smithy/url-parser */ \"(rsc)/./node_modules/@smithy/url-parser/dist-cjs/index.js\");\nvar toEndpointV1 = /* @__PURE__ */ __name((endpoint)=>{\n    if (typeof endpoint === \"object\") {\n        if (\"url\" in endpoint) {\n            return (0, import_url_parser.parseUrl)(endpoint.url);\n        }\n        return endpoint;\n    }\n    return (0, import_url_parser.parseUrl)(endpoint);\n}, \"toEndpointV1\");\n// src/adaptors/getEndpointFromInstructions.ts\nvar getEndpointFromInstructions = /* @__PURE__ */ __name(async (commandInput, instructionsSupplier, clientConfig, context)=>{\n    if (!clientConfig.endpoint) {\n        let endpointFromConfig;\n        if (clientConfig.serviceConfiguredEndpoint) {\n            endpointFromConfig = await clientConfig.serviceConfiguredEndpoint();\n        } else {\n            endpointFromConfig = await (0, import_getEndpointFromConfig.getEndpointFromConfig)(clientConfig.serviceId);\n        }\n        if (endpointFromConfig) {\n            clientConfig.endpoint = ()=>Promise.resolve(toEndpointV1(endpointFromConfig));\n        }\n    }\n    const endpointParams = await resolveParams(commandInput, instructionsSupplier, clientConfig);\n    if (typeof clientConfig.endpointProvider !== \"function\") {\n        throw new Error(\"config.endpointProvider is not set.\");\n    }\n    const endpoint = clientConfig.endpointProvider(endpointParams, context);\n    return endpoint;\n}, \"getEndpointFromInstructions\");\nvar resolveParams = /* @__PURE__ */ __name(async (commandInput, instructionsSupplier, clientConfig)=>{\n    const endpointParams = {};\n    const instructions = instructionsSupplier?.getEndpointParameterInstructions?.() || {};\n    for (const [name, instruction] of Object.entries(instructions)){\n        switch(instruction.type){\n            case \"staticContextParams\":\n                endpointParams[name] = instruction.value;\n                break;\n            case \"contextParams\":\n                endpointParams[name] = commandInput[instruction.name];\n                break;\n            case \"clientContextParams\":\n            case \"builtInParams\":\n                endpointParams[name] = await createConfigValueProvider(instruction.name, name, clientConfig)();\n                break;\n            case \"operationContextParams\":\n                endpointParams[name] = instruction.get(commandInput);\n                break;\n            default:\n                throw new Error(\"Unrecognized endpoint parameter instruction: \" + JSON.stringify(instruction));\n        }\n    }\n    if (Object.keys(instructions).length === 0) {\n        Object.assign(endpointParams, clientConfig);\n    }\n    if (String(clientConfig.serviceId).toLowerCase() === \"s3\") {\n        await resolveParamsForS3(endpointParams);\n    }\n    return endpointParams;\n}, \"resolveParams\");\n// src/endpointMiddleware.ts\nvar import_core = __webpack_require__(/*! @smithy/core */ \"(rsc)/./node_modules/@smithy/core/dist-es/index.js\");\nvar import_util_middleware = __webpack_require__(/*! @smithy/util-middleware */ \"(rsc)/./node_modules/@smithy/util-middleware/dist-cjs/index.js\");\nvar endpointMiddleware = /* @__PURE__ */ __name(({ config, instructions })=>{\n    return (next, context)=>async (args)=>{\n            if (config.endpoint) {\n                (0, import_core.setFeature)(context, \"ENDPOINT_OVERRIDE\", \"N\");\n            }\n            const endpoint = await getEndpointFromInstructions(args.input, {\n                getEndpointParameterInstructions () {\n                    return instructions;\n                }\n            }, {\n                ...config\n            }, context);\n            context.endpointV2 = endpoint;\n            context.authSchemes = endpoint.properties?.authSchemes;\n            const authScheme = context.authSchemes?.[0];\n            if (authScheme) {\n                context[\"signing_region\"] = authScheme.signingRegion;\n                context[\"signing_service\"] = authScheme.signingName;\n                const smithyContext = (0, import_util_middleware.getSmithyContext)(context);\n                const httpAuthOption = smithyContext?.selectedHttpAuthScheme?.httpAuthOption;\n                if (httpAuthOption) {\n                    httpAuthOption.signingProperties = Object.assign(httpAuthOption.signingProperties || {}, {\n                        signing_region: authScheme.signingRegion,\n                        signingRegion: authScheme.signingRegion,\n                        signing_service: authScheme.signingName,\n                        signingName: authScheme.signingName,\n                        signingRegionSet: authScheme.signingRegionSet\n                    }, authScheme.properties);\n                }\n            }\n            return next({\n                ...args\n            });\n        };\n}, \"endpointMiddleware\");\n// src/getEndpointPlugin.ts\nvar import_middleware_serde = __webpack_require__(/*! @smithy/middleware-serde */ \"(rsc)/./node_modules/@smithy/middleware-serde/dist-cjs/index.js\");\nvar endpointMiddlewareOptions = {\n    step: \"serialize\",\n    tags: [\n        \"ENDPOINT_PARAMETERS\",\n        \"ENDPOINT_V2\",\n        \"ENDPOINT\"\n    ],\n    name: \"endpointV2Middleware\",\n    override: true,\n    relation: \"before\",\n    toMiddleware: import_middleware_serde.serializerMiddlewareOption.name\n};\nvar getEndpointPlugin = /* @__PURE__ */ __name((config, instructions)=>({\n        applyToStack: (clientStack)=>{\n            clientStack.addRelativeTo(endpointMiddleware({\n                config,\n                instructions\n            }), endpointMiddlewareOptions);\n        }\n    }), \"getEndpointPlugin\");\n// src/resolveEndpointConfig.ts\nvar import_getEndpointFromConfig2 = __webpack_require__(/*! ./adaptors/getEndpointFromConfig */ \"(rsc)/./node_modules/@smithy/middleware-endpoint/dist-cjs/adaptors/getEndpointFromConfig.js\");\nvar resolveEndpointConfig = /* @__PURE__ */ __name((input)=>{\n    const tls = input.tls ?? true;\n    const { endpoint, useDualstackEndpoint, useFipsEndpoint } = input;\n    const customEndpointProvider = endpoint != null ? async ()=>toEndpointV1(await (0, import_util_middleware.normalizeProvider)(endpoint)()) : void 0;\n    const isCustomEndpoint = !!endpoint;\n    const resolvedConfig = Object.assign(input, {\n        endpoint: customEndpointProvider,\n        tls,\n        isCustomEndpoint,\n        useDualstackEndpoint: (0, import_util_middleware.normalizeProvider)(useDualstackEndpoint ?? false),\n        useFipsEndpoint: (0, import_util_middleware.normalizeProvider)(useFipsEndpoint ?? false)\n    });\n    let configuredEndpointPromise = void 0;\n    resolvedConfig.serviceConfiguredEndpoint = async ()=>{\n        if (input.serviceId && !configuredEndpointPromise) {\n            configuredEndpointPromise = (0, import_getEndpointFromConfig2.getEndpointFromConfig)(input.serviceId);\n        }\n        return configuredEndpointPromise;\n    };\n    return resolvedConfig;\n}, \"resolveEndpointConfig\");\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/middleware-endpoint/dist-cjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/middleware-retry/dist-cjs/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@smithy/middleware-retry/dist-cjs/index.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value)=>__defProp(target, \"name\", {\n        value,\n        configurable: true\n    });\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n    AdaptiveRetryStrategy: ()=>AdaptiveRetryStrategy,\n    CONFIG_MAX_ATTEMPTS: ()=>CONFIG_MAX_ATTEMPTS,\n    CONFIG_RETRY_MODE: ()=>CONFIG_RETRY_MODE,\n    ENV_MAX_ATTEMPTS: ()=>ENV_MAX_ATTEMPTS,\n    ENV_RETRY_MODE: ()=>ENV_RETRY_MODE,\n    NODE_MAX_ATTEMPT_CONFIG_OPTIONS: ()=>NODE_MAX_ATTEMPT_CONFIG_OPTIONS,\n    NODE_RETRY_MODE_CONFIG_OPTIONS: ()=>NODE_RETRY_MODE_CONFIG_OPTIONS,\n    StandardRetryStrategy: ()=>StandardRetryStrategy,\n    defaultDelayDecider: ()=>defaultDelayDecider,\n    defaultRetryDecider: ()=>defaultRetryDecider,\n    getOmitRetryHeadersPlugin: ()=>getOmitRetryHeadersPlugin,\n    getRetryAfterHint: ()=>getRetryAfterHint,\n    getRetryPlugin: ()=>getRetryPlugin,\n    omitRetryHeadersMiddleware: ()=>omitRetryHeadersMiddleware,\n    omitRetryHeadersMiddlewareOptions: ()=>omitRetryHeadersMiddlewareOptions,\n    resolveRetryConfig: ()=>resolveRetryConfig,\n    retryMiddleware: ()=>retryMiddleware,\n    retryMiddlewareOptions: ()=>retryMiddlewareOptions\n});\nmodule.exports = __toCommonJS(src_exports);\n// src/AdaptiveRetryStrategy.ts\n// src/StandardRetryStrategy.ts\nvar import_protocol_http = __webpack_require__(/*! @smithy/protocol-http */ \"(rsc)/./node_modules/@smithy/protocol-http/dist-cjs/index.js\");\nvar import_uuid = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/uuid/dist/esm-node/index.js\");\n// src/defaultRetryQuota.ts\nvar import_util_retry = __webpack_require__(/*! @smithy/util-retry */ \"(rsc)/./node_modules/@smithy/util-retry/dist-cjs/index.js\");\nvar getDefaultRetryQuota = /* @__PURE__ */ __name((initialRetryTokens, options)=>{\n    const MAX_CAPACITY = initialRetryTokens;\n    const noRetryIncrement = options?.noRetryIncrement ?? import_util_retry.NO_RETRY_INCREMENT;\n    const retryCost = options?.retryCost ?? import_util_retry.RETRY_COST;\n    const timeoutRetryCost = options?.timeoutRetryCost ?? import_util_retry.TIMEOUT_RETRY_COST;\n    let availableCapacity = initialRetryTokens;\n    const getCapacityAmount = /* @__PURE__ */ __name((error)=>error.name === \"TimeoutError\" ? timeoutRetryCost : retryCost, \"getCapacityAmount\");\n    const hasRetryTokens = /* @__PURE__ */ __name((error)=>getCapacityAmount(error) <= availableCapacity, \"hasRetryTokens\");\n    const retrieveRetryTokens = /* @__PURE__ */ __name((error)=>{\n        if (!hasRetryTokens(error)) {\n            throw new Error(\"No retry token available\");\n        }\n        const capacityAmount = getCapacityAmount(error);\n        availableCapacity -= capacityAmount;\n        return capacityAmount;\n    }, \"retrieveRetryTokens\");\n    const releaseRetryTokens = /* @__PURE__ */ __name((capacityReleaseAmount)=>{\n        availableCapacity += capacityReleaseAmount ?? noRetryIncrement;\n        availableCapacity = Math.min(availableCapacity, MAX_CAPACITY);\n    }, \"releaseRetryTokens\");\n    return Object.freeze({\n        hasRetryTokens,\n        retrieveRetryTokens,\n        releaseRetryTokens\n    });\n}, \"getDefaultRetryQuota\");\n// src/delayDecider.ts\nvar defaultDelayDecider = /* @__PURE__ */ __name((delayBase, attempts)=>Math.floor(Math.min(import_util_retry.MAXIMUM_RETRY_DELAY, Math.random() * 2 ** attempts * delayBase)), \"defaultDelayDecider\");\n// src/retryDecider.ts\nvar import_service_error_classification = __webpack_require__(/*! @smithy/service-error-classification */ \"(rsc)/./node_modules/@smithy/service-error-classification/dist-cjs/index.js\");\nvar defaultRetryDecider = /* @__PURE__ */ __name((error)=>{\n    if (!error) {\n        return false;\n    }\n    return (0, import_service_error_classification.isRetryableByTrait)(error) || (0, import_service_error_classification.isClockSkewError)(error) || (0, import_service_error_classification.isThrottlingError)(error) || (0, import_service_error_classification.isTransientError)(error);\n}, \"defaultRetryDecider\");\n// src/util.ts\nvar asSdkError = /* @__PURE__ */ __name((error)=>{\n    if (error instanceof Error) return error;\n    if (error instanceof Object) return Object.assign(new Error(), error);\n    if (typeof error === \"string\") return new Error(error);\n    return new Error(`AWS SDK error wrapper for ${error}`);\n}, \"asSdkError\");\n// src/StandardRetryStrategy.ts\nvar StandardRetryStrategy = class {\n    constructor(maxAttemptsProvider, options){\n        this.maxAttemptsProvider = maxAttemptsProvider;\n        this.mode = import_util_retry.RETRY_MODES.STANDARD;\n        this.retryDecider = options?.retryDecider ?? defaultRetryDecider;\n        this.delayDecider = options?.delayDecider ?? defaultDelayDecider;\n        this.retryQuota = options?.retryQuota ?? getDefaultRetryQuota(import_util_retry.INITIAL_RETRY_TOKENS);\n    }\n    static{\n        __name(this, \"StandardRetryStrategy\");\n    }\n    shouldRetry(error, attempts, maxAttempts) {\n        return attempts < maxAttempts && this.retryDecider(error) && this.retryQuota.hasRetryTokens(error);\n    }\n    async getMaxAttempts() {\n        let maxAttempts;\n        try {\n            maxAttempts = await this.maxAttemptsProvider();\n        } catch (error) {\n            maxAttempts = import_util_retry.DEFAULT_MAX_ATTEMPTS;\n        }\n        return maxAttempts;\n    }\n    async retry(next, args, options) {\n        let retryTokenAmount;\n        let attempts = 0;\n        let totalDelay = 0;\n        const maxAttempts = await this.getMaxAttempts();\n        const { request } = args;\n        if (import_protocol_http.HttpRequest.isInstance(request)) {\n            request.headers[import_util_retry.INVOCATION_ID_HEADER] = (0, import_uuid.v4)();\n        }\n        while(true){\n            try {\n                if (import_protocol_http.HttpRequest.isInstance(request)) {\n                    request.headers[import_util_retry.REQUEST_HEADER] = `attempt=${attempts + 1}; max=${maxAttempts}`;\n                }\n                if (options?.beforeRequest) {\n                    await options.beforeRequest();\n                }\n                const { response, output } = await next(args);\n                if (options?.afterRequest) {\n                    options.afterRequest(response);\n                }\n                this.retryQuota.releaseRetryTokens(retryTokenAmount);\n                output.$metadata.attempts = attempts + 1;\n                output.$metadata.totalRetryDelay = totalDelay;\n                return {\n                    response,\n                    output\n                };\n            } catch (e) {\n                const err = asSdkError(e);\n                attempts++;\n                if (this.shouldRetry(err, attempts, maxAttempts)) {\n                    retryTokenAmount = this.retryQuota.retrieveRetryTokens(err);\n                    const delayFromDecider = this.delayDecider((0, import_service_error_classification.isThrottlingError)(err) ? import_util_retry.THROTTLING_RETRY_DELAY_BASE : import_util_retry.DEFAULT_RETRY_DELAY_BASE, attempts);\n                    const delayFromResponse = getDelayFromRetryAfterHeader(err.$response);\n                    const delay = Math.max(delayFromResponse || 0, delayFromDecider);\n                    totalDelay += delay;\n                    await new Promise((resolve)=>setTimeout(resolve, delay));\n                    continue;\n                }\n                if (!err.$metadata) {\n                    err.$metadata = {};\n                }\n                err.$metadata.attempts = attempts;\n                err.$metadata.totalRetryDelay = totalDelay;\n                throw err;\n            }\n        }\n    }\n};\nvar getDelayFromRetryAfterHeader = /* @__PURE__ */ __name((response)=>{\n    if (!import_protocol_http.HttpResponse.isInstance(response)) return;\n    const retryAfterHeaderName = Object.keys(response.headers).find((key)=>key.toLowerCase() === \"retry-after\");\n    if (!retryAfterHeaderName) return;\n    const retryAfter = response.headers[retryAfterHeaderName];\n    const retryAfterSeconds = Number(retryAfter);\n    if (!Number.isNaN(retryAfterSeconds)) return retryAfterSeconds * 1e3;\n    const retryAfterDate = new Date(retryAfter);\n    return retryAfterDate.getTime() - Date.now();\n}, \"getDelayFromRetryAfterHeader\");\n// src/AdaptiveRetryStrategy.ts\nvar AdaptiveRetryStrategy = class extends StandardRetryStrategy {\n    static{\n        __name(this, \"AdaptiveRetryStrategy\");\n    }\n    constructor(maxAttemptsProvider, options){\n        const { rateLimiter, ...superOptions } = options ?? {};\n        super(maxAttemptsProvider, superOptions);\n        this.rateLimiter = rateLimiter ?? new import_util_retry.DefaultRateLimiter();\n        this.mode = import_util_retry.RETRY_MODES.ADAPTIVE;\n    }\n    async retry(next, args) {\n        return super.retry(next, args, {\n            beforeRequest: async ()=>{\n                return this.rateLimiter.getSendToken();\n            },\n            afterRequest: (response)=>{\n                this.rateLimiter.updateClientSendingRate(response);\n            }\n        });\n    }\n};\n// src/configurations.ts\nvar import_util_middleware = __webpack_require__(/*! @smithy/util-middleware */ \"(rsc)/./node_modules/@smithy/util-middleware/dist-cjs/index.js\");\nvar ENV_MAX_ATTEMPTS = \"AWS_MAX_ATTEMPTS\";\nvar CONFIG_MAX_ATTEMPTS = \"max_attempts\";\nvar NODE_MAX_ATTEMPT_CONFIG_OPTIONS = {\n    environmentVariableSelector: (env)=>{\n        const value = env[ENV_MAX_ATTEMPTS];\n        if (!value) return void 0;\n        const maxAttempt = parseInt(value);\n        if (Number.isNaN(maxAttempt)) {\n            throw new Error(`Environment variable ${ENV_MAX_ATTEMPTS} mast be a number, got \"${value}\"`);\n        }\n        return maxAttempt;\n    },\n    configFileSelector: (profile)=>{\n        const value = profile[CONFIG_MAX_ATTEMPTS];\n        if (!value) return void 0;\n        const maxAttempt = parseInt(value);\n        if (Number.isNaN(maxAttempt)) {\n            throw new Error(`Shared config file entry ${CONFIG_MAX_ATTEMPTS} mast be a number, got \"${value}\"`);\n        }\n        return maxAttempt;\n    },\n    default: import_util_retry.DEFAULT_MAX_ATTEMPTS\n};\nvar resolveRetryConfig = /* @__PURE__ */ __name((input)=>{\n    const { retryStrategy, retryMode: _retryMode, maxAttempts: _maxAttempts } = input;\n    const maxAttempts = (0, import_util_middleware.normalizeProvider)(_maxAttempts ?? import_util_retry.DEFAULT_MAX_ATTEMPTS);\n    return Object.assign(input, {\n        maxAttempts,\n        retryStrategy: async ()=>{\n            if (retryStrategy) {\n                return retryStrategy;\n            }\n            const retryMode = await (0, import_util_middleware.normalizeProvider)(_retryMode)();\n            if (retryMode === import_util_retry.RETRY_MODES.ADAPTIVE) {\n                return new import_util_retry.AdaptiveRetryStrategy(maxAttempts);\n            }\n            return new import_util_retry.StandardRetryStrategy(maxAttempts);\n        }\n    });\n}, \"resolveRetryConfig\");\nvar ENV_RETRY_MODE = \"AWS_RETRY_MODE\";\nvar CONFIG_RETRY_MODE = \"retry_mode\";\nvar NODE_RETRY_MODE_CONFIG_OPTIONS = {\n    environmentVariableSelector: (env)=>env[ENV_RETRY_MODE],\n    configFileSelector: (profile)=>profile[CONFIG_RETRY_MODE],\n    default: import_util_retry.DEFAULT_RETRY_MODE\n};\n// src/omitRetryHeadersMiddleware.ts\nvar omitRetryHeadersMiddleware = /* @__PURE__ */ __name(()=>(next)=>async (args)=>{\n            const { request } = args;\n            if (import_protocol_http.HttpRequest.isInstance(request)) {\n                delete request.headers[import_util_retry.INVOCATION_ID_HEADER];\n                delete request.headers[import_util_retry.REQUEST_HEADER];\n            }\n            return next(args);\n        }, \"omitRetryHeadersMiddleware\");\nvar omitRetryHeadersMiddlewareOptions = {\n    name: \"omitRetryHeadersMiddleware\",\n    tags: [\n        \"RETRY\",\n        \"HEADERS\",\n        \"OMIT_RETRY_HEADERS\"\n    ],\n    relation: \"before\",\n    toMiddleware: \"awsAuthMiddleware\",\n    override: true\n};\nvar getOmitRetryHeadersPlugin = /* @__PURE__ */ __name((options)=>({\n        applyToStack: (clientStack)=>{\n            clientStack.addRelativeTo(omitRetryHeadersMiddleware(), omitRetryHeadersMiddlewareOptions);\n        }\n    }), \"getOmitRetryHeadersPlugin\");\n// src/retryMiddleware.ts\nvar import_smithy_client = __webpack_require__(/*! @smithy/smithy-client */ \"(rsc)/./node_modules/@smithy/smithy-client/dist-cjs/index.js\");\nvar import_isStreamingPayload = __webpack_require__(/*! ./isStreamingPayload/isStreamingPayload */ \"(rsc)/./node_modules/@smithy/middleware-retry/dist-cjs/isStreamingPayload/isStreamingPayload.js\");\nvar retryMiddleware = /* @__PURE__ */ __name((options)=>(next, context)=>async (args)=>{\n            let retryStrategy = await options.retryStrategy();\n            const maxAttempts = await options.maxAttempts();\n            if (isRetryStrategyV2(retryStrategy)) {\n                retryStrategy = retryStrategy;\n                let retryToken = await retryStrategy.acquireInitialRetryToken(context[\"partition_id\"]);\n                let lastError = new Error();\n                let attempts = 0;\n                let totalRetryDelay = 0;\n                const { request } = args;\n                const isRequest = import_protocol_http.HttpRequest.isInstance(request);\n                if (isRequest) {\n                    request.headers[import_util_retry.INVOCATION_ID_HEADER] = (0, import_uuid.v4)();\n                }\n                while(true){\n                    try {\n                        if (isRequest) {\n                            request.headers[import_util_retry.REQUEST_HEADER] = `attempt=${attempts + 1}; max=${maxAttempts}`;\n                        }\n                        const { response, output } = await next(args);\n                        retryStrategy.recordSuccess(retryToken);\n                        output.$metadata.attempts = attempts + 1;\n                        output.$metadata.totalRetryDelay = totalRetryDelay;\n                        return {\n                            response,\n                            output\n                        };\n                    } catch (e) {\n                        const retryErrorInfo = getRetryErrorInfo(e);\n                        lastError = asSdkError(e);\n                        if (isRequest && (0, import_isStreamingPayload.isStreamingPayload)(request)) {\n                            (context.logger instanceof import_smithy_client.NoOpLogger ? console : context.logger)?.warn(\"An error was encountered in a non-retryable streaming request.\");\n                            throw lastError;\n                        }\n                        try {\n                            retryToken = await retryStrategy.refreshRetryTokenForRetry(retryToken, retryErrorInfo);\n                        } catch (refreshError) {\n                            if (!lastError.$metadata) {\n                                lastError.$metadata = {};\n                            }\n                            lastError.$metadata.attempts = attempts + 1;\n                            lastError.$metadata.totalRetryDelay = totalRetryDelay;\n                            throw lastError;\n                        }\n                        attempts = retryToken.getRetryCount();\n                        const delay = retryToken.getRetryDelay();\n                        totalRetryDelay += delay;\n                        await new Promise((resolve)=>setTimeout(resolve, delay));\n                    }\n                }\n            } else {\n                retryStrategy = retryStrategy;\n                if (retryStrategy?.mode) context.userAgent = [\n                    ...context.userAgent || [],\n                    [\n                        \"cfg/retry-mode\",\n                        retryStrategy.mode\n                    ]\n                ];\n                return retryStrategy.retry(next, args);\n            }\n        }, \"retryMiddleware\");\nvar isRetryStrategyV2 = /* @__PURE__ */ __name((retryStrategy)=>typeof retryStrategy.acquireInitialRetryToken !== \"undefined\" && typeof retryStrategy.refreshRetryTokenForRetry !== \"undefined\" && typeof retryStrategy.recordSuccess !== \"undefined\", \"isRetryStrategyV2\");\nvar getRetryErrorInfo = /* @__PURE__ */ __name((error)=>{\n    const errorInfo = {\n        error,\n        errorType: getRetryErrorType(error)\n    };\n    const retryAfterHint = getRetryAfterHint(error.$response);\n    if (retryAfterHint) {\n        errorInfo.retryAfterHint = retryAfterHint;\n    }\n    return errorInfo;\n}, \"getRetryErrorInfo\");\nvar getRetryErrorType = /* @__PURE__ */ __name((error)=>{\n    if ((0, import_service_error_classification.isThrottlingError)(error)) return \"THROTTLING\";\n    if ((0, import_service_error_classification.isTransientError)(error)) return \"TRANSIENT\";\n    if ((0, import_service_error_classification.isServerError)(error)) return \"SERVER_ERROR\";\n    return \"CLIENT_ERROR\";\n}, \"getRetryErrorType\");\nvar retryMiddlewareOptions = {\n    name: \"retryMiddleware\",\n    tags: [\n        \"RETRY\"\n    ],\n    step: \"finalizeRequest\",\n    priority: \"high\",\n    override: true\n};\nvar getRetryPlugin = /* @__PURE__ */ __name((options)=>({\n        applyToStack: (clientStack)=>{\n            clientStack.add(retryMiddleware(options), retryMiddlewareOptions);\n        }\n    }), \"getRetryPlugin\");\nvar getRetryAfterHint = /* @__PURE__ */ __name((response)=>{\n    if (!import_protocol_http.HttpResponse.isInstance(response)) return;\n    const retryAfterHeaderName = Object.keys(response.headers).find((key)=>key.toLowerCase() === \"retry-after\");\n    if (!retryAfterHeaderName) return;\n    const retryAfter = response.headers[retryAfterHeaderName];\n    const retryAfterSeconds = Number(retryAfter);\n    if (!Number.isNaN(retryAfterSeconds)) return new Date(retryAfterSeconds * 1e3);\n    const retryAfterDate = new Date(retryAfter);\n    return retryAfterDate;\n}, \"getRetryAfterHint\");\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/middleware-retry/dist-cjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/middleware-retry/dist-cjs/isStreamingPayload/isStreamingPayload.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@smithy/middleware-retry/dist-cjs/isStreamingPayload/isStreamingPayload.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.isStreamingPayload = void 0;\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\nconst isStreamingPayload = (request)=>(request === null || request === void 0 ? void 0 : request.body) instanceof stream_1.Readable || typeof ReadableStream !== \"undefined\" && (request === null || request === void 0 ? void 0 : request.body) instanceof ReadableStream;\nexports.isStreamingPayload = isStreamingPayload;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9taWRkbGV3YXJlLXJldHJ5L2Rpc3QtY2pzL2lzU3RyZWFtaW5nUGF5bG9hZC9pc1N0cmVhbWluZ1BheWxvYWQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELDBCQUEwQixHQUFHLEtBQUs7QUFDbEMsTUFBTUcsV0FBV0MsbUJBQU9BLENBQUMsc0JBQVE7QUFDakMsTUFBTUYscUJBQXFCLENBQUNHLFVBQVksQ0FBQ0EsWUFBWSxRQUFRQSxZQUFZLEtBQUssSUFBSSxLQUFLLElBQUlBLFFBQVFDLElBQUksYUFBYUgsU0FBU0ksUUFBUSxJQUNoSSxPQUFPQyxtQkFBbUIsZUFBZSxDQUFDSCxZQUFZLFFBQVFBLFlBQVksS0FBSyxJQUFJLEtBQUssSUFBSUEsUUFBUUMsSUFBSSxhQUFhRTtBQUMxSFIsMEJBQTBCLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2xvdWRzaGlmdC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L21pZGRsZXdhcmUtcmV0cnkvZGlzdC1janMvaXNTdHJlYW1pbmdQYXlsb2FkL2lzU3RyZWFtaW5nUGF5bG9hZC5qcz9mYWJhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5pc1N0cmVhbWluZ1BheWxvYWQgPSB2b2lkIDA7XG5jb25zdCBzdHJlYW1fMSA9IHJlcXVpcmUoXCJzdHJlYW1cIik7XG5jb25zdCBpc1N0cmVhbWluZ1BheWxvYWQgPSAocmVxdWVzdCkgPT4gKHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5ib2R5KSBpbnN0YW5jZW9mIHN0cmVhbV8xLlJlYWRhYmxlIHx8XG4gICAgKHR5cGVvZiBSZWFkYWJsZVN0cmVhbSAhPT0gXCJ1bmRlZmluZWRcIiAmJiAocmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmJvZHkpIGluc3RhbmNlb2YgUmVhZGFibGVTdHJlYW0pO1xuZXhwb3J0cy5pc1N0cmVhbWluZ1BheWxvYWQgPSBpc1N0cmVhbWluZ1BheWxvYWQ7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJpc1N0cmVhbWluZ1BheWxvYWQiLCJzdHJlYW1fMSIsInJlcXVpcmUiLCJyZXF1ZXN0IiwiYm9keSIsIlJlYWRhYmxlIiwiUmVhZGFibGVTdHJlYW0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/middleware-retry/dist-cjs/isStreamingPayload/isStreamingPayload.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/middleware-serde/dist-cjs/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@smithy/middleware-serde/dist-cjs/index.js ***!
  \*****************************************************************/
/***/ ((module) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value)=>__defProp(target, \"name\", {\n        value,\n        configurable: true\n    });\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n    deserializerMiddleware: ()=>deserializerMiddleware,\n    deserializerMiddlewareOption: ()=>deserializerMiddlewareOption,\n    getSerdePlugin: ()=>getSerdePlugin,\n    serializerMiddleware: ()=>serializerMiddleware,\n    serializerMiddlewareOption: ()=>serializerMiddlewareOption\n});\nmodule.exports = __toCommonJS(src_exports);\n// src/deserializerMiddleware.ts\nvar deserializerMiddleware = /* @__PURE__ */ __name((options, deserializer)=>(next, context)=>async (args)=>{\n            const { response } = await next(args);\n            try {\n                const parsed = await deserializer(response, options);\n                return {\n                    response,\n                    output: parsed\n                };\n            } catch (error) {\n                Object.defineProperty(error, \"$response\", {\n                    value: response\n                });\n                if (!(\"$metadata\" in error)) {\n                    const hint = `Deserialization error: to see the raw response, inspect the hidden field {error}.$response on this object.`;\n                    try {\n                        error.message += \"\\n  \" + hint;\n                    } catch (e) {\n                        if (!context.logger || context.logger?.constructor?.name === \"NoOpLogger\") {\n                            console.warn(hint);\n                        } else {\n                            context.logger?.warn?.(hint);\n                        }\n                    }\n                    if (typeof error.$responseBodyText !== \"undefined\") {\n                        if (error.$response) {\n                            error.$response.body = error.$responseBodyText;\n                        }\n                    }\n                }\n                throw error;\n            }\n        }, \"deserializerMiddleware\");\n// src/serializerMiddleware.ts\nvar serializerMiddleware = /* @__PURE__ */ __name((options, serializer)=>(next, context)=>async (args)=>{\n            const endpoint = context.endpointV2?.url && options.urlParser ? async ()=>options.urlParser(context.endpointV2.url) : options.endpoint;\n            if (!endpoint) {\n                throw new Error(\"No valid endpoint provider available.\");\n            }\n            const request = await serializer(args.input, {\n                ...options,\n                endpoint\n            });\n            return next({\n                ...args,\n                request\n            });\n        }, \"serializerMiddleware\");\n// src/serdePlugin.ts\nvar deserializerMiddlewareOption = {\n    name: \"deserializerMiddleware\",\n    step: \"deserialize\",\n    tags: [\n        \"DESERIALIZER\"\n    ],\n    override: true\n};\nvar serializerMiddlewareOption = {\n    name: \"serializerMiddleware\",\n    step: \"serialize\",\n    tags: [\n        \"SERIALIZER\"\n    ],\n    override: true\n};\nfunction getSerdePlugin(config, serializer, deserializer) {\n    return {\n        applyToStack: (commandStack)=>{\n            commandStack.add(deserializerMiddleware(config, deserializer), deserializerMiddlewareOption);\n            commandStack.add(serializerMiddleware(config, serializer), serializerMiddlewareOption);\n        }\n    };\n}\n__name(getSerdePlugin, \"getSerdePlugin\");\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/middleware-serde/dist-cjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/middleware-stack/dist-cjs/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@smithy/middleware-stack/dist-cjs/index.js ***!
  \*****************************************************************/
/***/ ((module) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value)=>__defProp(target, \"name\", {\n        value,\n        configurable: true\n    });\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n    constructStack: ()=>constructStack\n});\nmodule.exports = __toCommonJS(src_exports);\n// src/MiddlewareStack.ts\nvar getAllAliases = /* @__PURE__ */ __name((name, aliases)=>{\n    const _aliases = [];\n    if (name) {\n        _aliases.push(name);\n    }\n    if (aliases) {\n        for (const alias of aliases){\n            _aliases.push(alias);\n        }\n    }\n    return _aliases;\n}, \"getAllAliases\");\nvar getMiddlewareNameWithAliases = /* @__PURE__ */ __name((name, aliases)=>{\n    return `${name || \"anonymous\"}${aliases && aliases.length > 0 ? ` (a.k.a. ${aliases.join(\",\")})` : \"\"}`;\n}, \"getMiddlewareNameWithAliases\");\nvar constructStack = /* @__PURE__ */ __name(()=>{\n    let absoluteEntries = [];\n    let relativeEntries = [];\n    let identifyOnResolve = false;\n    const entriesNameSet = /* @__PURE__ */ new Set();\n    const sort = /* @__PURE__ */ __name((entries)=>entries.sort((a, b)=>stepWeights[b.step] - stepWeights[a.step] || priorityWeights[b.priority || \"normal\"] - priorityWeights[a.priority || \"normal\"]), \"sort\");\n    const removeByName = /* @__PURE__ */ __name((toRemove)=>{\n        let isRemoved = false;\n        const filterCb = /* @__PURE__ */ __name((entry)=>{\n            const aliases = getAllAliases(entry.name, entry.aliases);\n            if (aliases.includes(toRemove)) {\n                isRemoved = true;\n                for (const alias of aliases){\n                    entriesNameSet.delete(alias);\n                }\n                return false;\n            }\n            return true;\n        }, \"filterCb\");\n        absoluteEntries = absoluteEntries.filter(filterCb);\n        relativeEntries = relativeEntries.filter(filterCb);\n        return isRemoved;\n    }, \"removeByName\");\n    const removeByReference = /* @__PURE__ */ __name((toRemove)=>{\n        let isRemoved = false;\n        const filterCb = /* @__PURE__ */ __name((entry)=>{\n            if (entry.middleware === toRemove) {\n                isRemoved = true;\n                for (const alias of getAllAliases(entry.name, entry.aliases)){\n                    entriesNameSet.delete(alias);\n                }\n                return false;\n            }\n            return true;\n        }, \"filterCb\");\n        absoluteEntries = absoluteEntries.filter(filterCb);\n        relativeEntries = relativeEntries.filter(filterCb);\n        return isRemoved;\n    }, \"removeByReference\");\n    const cloneTo = /* @__PURE__ */ __name((toStack)=>{\n        absoluteEntries.forEach((entry)=>{\n            toStack.add(entry.middleware, {\n                ...entry\n            });\n        });\n        relativeEntries.forEach((entry)=>{\n            toStack.addRelativeTo(entry.middleware, {\n                ...entry\n            });\n        });\n        toStack.identifyOnResolve?.(stack.identifyOnResolve());\n        return toStack;\n    }, \"cloneTo\");\n    const expandRelativeMiddlewareList = /* @__PURE__ */ __name((from)=>{\n        const expandedMiddlewareList = [];\n        from.before.forEach((entry)=>{\n            if (entry.before.length === 0 && entry.after.length === 0) {\n                expandedMiddlewareList.push(entry);\n            } else {\n                expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));\n            }\n        });\n        expandedMiddlewareList.push(from);\n        from.after.reverse().forEach((entry)=>{\n            if (entry.before.length === 0 && entry.after.length === 0) {\n                expandedMiddlewareList.push(entry);\n            } else {\n                expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));\n            }\n        });\n        return expandedMiddlewareList;\n    }, \"expandRelativeMiddlewareList\");\n    const getMiddlewareList = /* @__PURE__ */ __name((debug = false)=>{\n        const normalizedAbsoluteEntries = [];\n        const normalizedRelativeEntries = [];\n        const normalizedEntriesNameMap = {};\n        absoluteEntries.forEach((entry)=>{\n            const normalizedEntry = {\n                ...entry,\n                before: [],\n                after: []\n            };\n            for (const alias of getAllAliases(normalizedEntry.name, normalizedEntry.aliases)){\n                normalizedEntriesNameMap[alias] = normalizedEntry;\n            }\n            normalizedAbsoluteEntries.push(normalizedEntry);\n        });\n        relativeEntries.forEach((entry)=>{\n            const normalizedEntry = {\n                ...entry,\n                before: [],\n                after: []\n            };\n            for (const alias of getAllAliases(normalizedEntry.name, normalizedEntry.aliases)){\n                normalizedEntriesNameMap[alias] = normalizedEntry;\n            }\n            normalizedRelativeEntries.push(normalizedEntry);\n        });\n        normalizedRelativeEntries.forEach((entry)=>{\n            if (entry.toMiddleware) {\n                const toMiddleware = normalizedEntriesNameMap[entry.toMiddleware];\n                if (toMiddleware === void 0) {\n                    if (debug) {\n                        return;\n                    }\n                    throw new Error(`${entry.toMiddleware} is not found when adding ${getMiddlewareNameWithAliases(entry.name, entry.aliases)} middleware ${entry.relation} ${entry.toMiddleware}`);\n                }\n                if (entry.relation === \"after\") {\n                    toMiddleware.after.push(entry);\n                }\n                if (entry.relation === \"before\") {\n                    toMiddleware.before.push(entry);\n                }\n            }\n        });\n        const mainChain = sort(normalizedAbsoluteEntries).map(expandRelativeMiddlewareList).reduce((wholeList, expandedMiddlewareList)=>{\n            wholeList.push(...expandedMiddlewareList);\n            return wholeList;\n        }, []);\n        return mainChain;\n    }, \"getMiddlewareList\");\n    const stack = {\n        add: (middleware, options = {})=>{\n            const { name, override, aliases: _aliases } = options;\n            const entry = {\n                step: \"initialize\",\n                priority: \"normal\",\n                middleware,\n                ...options\n            };\n            const aliases = getAllAliases(name, _aliases);\n            if (aliases.length > 0) {\n                if (aliases.some((alias)=>entriesNameSet.has(alias))) {\n                    if (!override) throw new Error(`Duplicate middleware name '${getMiddlewareNameWithAliases(name, _aliases)}'`);\n                    for (const alias of aliases){\n                        const toOverrideIndex = absoluteEntries.findIndex((entry2)=>entry2.name === alias || entry2.aliases?.some((a)=>a === alias));\n                        if (toOverrideIndex === -1) {\n                            continue;\n                        }\n                        const toOverride = absoluteEntries[toOverrideIndex];\n                        if (toOverride.step !== entry.step || entry.priority !== toOverride.priority) {\n                            throw new Error(`\"${getMiddlewareNameWithAliases(toOverride.name, toOverride.aliases)}\" middleware with ${toOverride.priority} priority in ${toOverride.step} step cannot be overridden by \"${getMiddlewareNameWithAliases(name, _aliases)}\" middleware with ${entry.priority} priority in ${entry.step} step.`);\n                        }\n                        absoluteEntries.splice(toOverrideIndex, 1);\n                    }\n                }\n                for (const alias of aliases){\n                    entriesNameSet.add(alias);\n                }\n            }\n            absoluteEntries.push(entry);\n        },\n        addRelativeTo: (middleware, options)=>{\n            const { name, override, aliases: _aliases } = options;\n            const entry = {\n                middleware,\n                ...options\n            };\n            const aliases = getAllAliases(name, _aliases);\n            if (aliases.length > 0) {\n                if (aliases.some((alias)=>entriesNameSet.has(alias))) {\n                    if (!override) throw new Error(`Duplicate middleware name '${getMiddlewareNameWithAliases(name, _aliases)}'`);\n                    for (const alias of aliases){\n                        const toOverrideIndex = relativeEntries.findIndex((entry2)=>entry2.name === alias || entry2.aliases?.some((a)=>a === alias));\n                        if (toOverrideIndex === -1) {\n                            continue;\n                        }\n                        const toOverride = relativeEntries[toOverrideIndex];\n                        if (toOverride.toMiddleware !== entry.toMiddleware || toOverride.relation !== entry.relation) {\n                            throw new Error(`\"${getMiddlewareNameWithAliases(toOverride.name, toOverride.aliases)}\" middleware ${toOverride.relation} \"${toOverride.toMiddleware}\" middleware cannot be overridden by \"${getMiddlewareNameWithAliases(name, _aliases)}\" middleware ${entry.relation} \"${entry.toMiddleware}\" middleware.`);\n                        }\n                        relativeEntries.splice(toOverrideIndex, 1);\n                    }\n                }\n                for (const alias of aliases){\n                    entriesNameSet.add(alias);\n                }\n            }\n            relativeEntries.push(entry);\n        },\n        clone: ()=>cloneTo(constructStack()),\n        use: (plugin)=>{\n            plugin.applyToStack(stack);\n        },\n        remove: (toRemove)=>{\n            if (typeof toRemove === \"string\") return removeByName(toRemove);\n            else return removeByReference(toRemove);\n        },\n        removeByTag: (toRemove)=>{\n            let isRemoved = false;\n            const filterCb = /* @__PURE__ */ __name((entry)=>{\n                const { tags, name, aliases: _aliases } = entry;\n                if (tags && tags.includes(toRemove)) {\n                    const aliases = getAllAliases(name, _aliases);\n                    for (const alias of aliases){\n                        entriesNameSet.delete(alias);\n                    }\n                    isRemoved = true;\n                    return false;\n                }\n                return true;\n            }, \"filterCb\");\n            absoluteEntries = absoluteEntries.filter(filterCb);\n            relativeEntries = relativeEntries.filter(filterCb);\n            return isRemoved;\n        },\n        concat: (from)=>{\n            const cloned = cloneTo(constructStack());\n            cloned.use(from);\n            cloned.identifyOnResolve(identifyOnResolve || cloned.identifyOnResolve() || (from.identifyOnResolve?.() ?? false));\n            return cloned;\n        },\n        applyToStack: cloneTo,\n        identify: ()=>{\n            return getMiddlewareList(true).map((mw)=>{\n                const step = mw.step ?? mw.relation + \" \" + mw.toMiddleware;\n                return getMiddlewareNameWithAliases(mw.name, mw.aliases) + \" - \" + step;\n            });\n        },\n        identifyOnResolve (toggle) {\n            if (typeof toggle === \"boolean\") identifyOnResolve = toggle;\n            return identifyOnResolve;\n        },\n        resolve: (handler, context)=>{\n            for (const middleware of getMiddlewareList().map((entry)=>entry.middleware).reverse()){\n                handler = middleware(handler, context);\n            }\n            if (identifyOnResolve) {\n                console.log(stack.identify());\n            }\n            return handler;\n        }\n    };\n    return stack;\n}, \"constructStack\");\nvar stepWeights = {\n    initialize: 5,\n    serialize: 4,\n    build: 3,\n    finalizeRequest: 2,\n    deserialize: 1\n};\nvar priorityWeights = {\n    high: 3,\n    normal: 2,\n    low: 1\n};\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/middleware-stack/dist-cjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/node-config-provider/dist-cjs/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@smithy/node-config-provider/dist-cjs/index.js ***!
  \*********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value)=>__defProp(target, \"name\", {\n        value,\n        configurable: true\n    });\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n    loadConfig: ()=>loadConfig\n});\nmodule.exports = __toCommonJS(src_exports);\n// src/configLoader.ts\n// src/fromEnv.ts\nvar import_property_provider = __webpack_require__(/*! @smithy/property-provider */ \"(rsc)/./node_modules/@smithy/property-provider/dist-cjs/index.js\");\n// src/getSelectorName.ts\nfunction getSelectorName(functionString) {\n    try {\n        const constants = new Set(Array.from(functionString.match(/([A-Z_]){3,}/g) ?? []));\n        constants.delete(\"CONFIG\");\n        constants.delete(\"CONFIG_PREFIX_SEPARATOR\");\n        constants.delete(\"ENV\");\n        return [\n            ...constants\n        ].join(\", \");\n    } catch (e) {\n        return functionString;\n    }\n}\n__name(getSelectorName, \"getSelectorName\");\n// src/fromEnv.ts\nvar fromEnv = /* @__PURE__ */ __name((envVarSelector, logger)=>async ()=>{\n        try {\n            const config = envVarSelector(process.env);\n            if (config === void 0) {\n                throw new Error();\n            }\n            return config;\n        } catch (e) {\n            throw new import_property_provider.CredentialsProviderError(e.message || `Not found in ENV: ${getSelectorName(envVarSelector.toString())}`, {\n                logger\n            });\n        }\n    }, \"fromEnv\");\n// src/fromSharedConfigFiles.ts\nvar import_shared_ini_file_loader = __webpack_require__(/*! @smithy/shared-ini-file-loader */ \"(rsc)/./node_modules/@smithy/shared-ini-file-loader/dist-cjs/index.js\");\nvar fromSharedConfigFiles = /* @__PURE__ */ __name((configSelector, { preferredFile = \"config\", ...init } = {})=>async ()=>{\n        const profile = (0, import_shared_ini_file_loader.getProfileName)(init);\n        const { configFile, credentialsFile } = await (0, import_shared_ini_file_loader.loadSharedConfigFiles)(init);\n        const profileFromCredentials = credentialsFile[profile] || {};\n        const profileFromConfig = configFile[profile] || {};\n        const mergedProfile = preferredFile === \"config\" ? {\n            ...profileFromCredentials,\n            ...profileFromConfig\n        } : {\n            ...profileFromConfig,\n            ...profileFromCredentials\n        };\n        try {\n            const cfgFile = preferredFile === \"config\" ? configFile : credentialsFile;\n            const configValue = configSelector(mergedProfile, cfgFile);\n            if (configValue === void 0) {\n                throw new Error();\n            }\n            return configValue;\n        } catch (e) {\n            throw new import_property_provider.CredentialsProviderError(e.message || `Not found in config files w/ profile [${profile}]: ${getSelectorName(configSelector.toString())}`, {\n                logger: init.logger\n            });\n        }\n    }, \"fromSharedConfigFiles\");\n// src/fromStatic.ts\nvar isFunction = /* @__PURE__ */ __name((func)=>typeof func === \"function\", \"isFunction\");\nvar fromStatic = /* @__PURE__ */ __name((defaultValue)=>isFunction(defaultValue) ? async ()=>await defaultValue() : (0, import_property_provider.fromStatic)(defaultValue), \"fromStatic\");\n// src/configLoader.ts\nvar loadConfig = /* @__PURE__ */ __name(({ environmentVariableSelector, configFileSelector, default: defaultValue }, configuration = {})=>(0, import_property_provider.memoize)((0, import_property_provider.chain)(fromEnv(environmentVariableSelector), fromSharedConfigFiles(configFileSelector, configuration), fromStatic(defaultValue))), \"loadConfig\");\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/node-config-provider/dist-cjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/node-http-handler/dist-cjs/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@smithy/node-http-handler/dist-cjs/index.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value)=>__defProp(target, \"name\", {\n        value,\n        configurable: true\n    });\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(// If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n        value: mod,\n        enumerable: true\n    }) : target, mod));\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n    DEFAULT_REQUEST_TIMEOUT: ()=>DEFAULT_REQUEST_TIMEOUT,\n    NodeHttp2Handler: ()=>NodeHttp2Handler,\n    NodeHttpHandler: ()=>NodeHttpHandler,\n    streamCollector: ()=>streamCollector\n});\nmodule.exports = __toCommonJS(src_exports);\n// src/node-http-handler.ts\nvar import_protocol_http = __webpack_require__(/*! @smithy/protocol-http */ \"(rsc)/./node_modules/@smithy/protocol-http/dist-cjs/index.js\");\nvar import_querystring_builder = __webpack_require__(/*! @smithy/querystring-builder */ \"(rsc)/./node_modules/@smithy/querystring-builder/dist-cjs/index.js\");\nvar import_http = __webpack_require__(/*! http */ \"http\");\nvar import_https = __webpack_require__(/*! https */ \"https\");\n// src/constants.ts\nvar NODEJS_TIMEOUT_ERROR_CODES = [\n    \"ECONNRESET\",\n    \"EPIPE\",\n    \"ETIMEDOUT\"\n];\n// src/get-transformed-headers.ts\nvar getTransformedHeaders = /* @__PURE__ */ __name((headers)=>{\n    const transformedHeaders = {};\n    for (const name of Object.keys(headers)){\n        const headerValues = headers[name];\n        transformedHeaders[name] = Array.isArray(headerValues) ? headerValues.join(\",\") : headerValues;\n    }\n    return transformedHeaders;\n}, \"getTransformedHeaders\");\n// src/timing.ts\nvar timing = {\n    setTimeout: (cb, ms)=>setTimeout(cb, ms),\n    clearTimeout: (timeoutId)=>clearTimeout(timeoutId)\n};\n// src/set-connection-timeout.ts\nvar DEFER_EVENT_LISTENER_TIME = 1e3;\nvar setConnectionTimeout = /* @__PURE__ */ __name((request, reject, timeoutInMs = 0)=>{\n    if (!timeoutInMs) {\n        return -1;\n    }\n    const registerTimeout = /* @__PURE__ */ __name((offset)=>{\n        const timeoutId = timing.setTimeout(()=>{\n            request.destroy();\n            reject(Object.assign(new Error(`Socket timed out without establishing a connection within ${timeoutInMs} ms`), {\n                name: \"TimeoutError\"\n            }));\n        }, timeoutInMs - offset);\n        const doWithSocket = /* @__PURE__ */ __name((socket)=>{\n            if (socket?.connecting) {\n                socket.on(\"connect\", ()=>{\n                    timing.clearTimeout(timeoutId);\n                });\n            } else {\n                timing.clearTimeout(timeoutId);\n            }\n        }, \"doWithSocket\");\n        if (request.socket) {\n            doWithSocket(request.socket);\n        } else {\n            request.on(\"socket\", doWithSocket);\n        }\n    }, \"registerTimeout\");\n    if (timeoutInMs < 2e3) {\n        registerTimeout(0);\n        return 0;\n    }\n    return timing.setTimeout(registerTimeout.bind(null, DEFER_EVENT_LISTENER_TIME), DEFER_EVENT_LISTENER_TIME);\n}, \"setConnectionTimeout\");\n// src/set-socket-keep-alive.ts\nvar DEFER_EVENT_LISTENER_TIME2 = 3e3;\nvar setSocketKeepAlive = /* @__PURE__ */ __name((request, { keepAlive, keepAliveMsecs }, deferTimeMs = DEFER_EVENT_LISTENER_TIME2)=>{\n    if (keepAlive !== true) {\n        return -1;\n    }\n    const registerListener = /* @__PURE__ */ __name(()=>{\n        if (request.socket) {\n            request.socket.setKeepAlive(keepAlive, keepAliveMsecs || 0);\n        } else {\n            request.on(\"socket\", (socket)=>{\n                socket.setKeepAlive(keepAlive, keepAliveMsecs || 0);\n            });\n        }\n    }, \"registerListener\");\n    if (deferTimeMs === 0) {\n        registerListener();\n        return 0;\n    }\n    return timing.setTimeout(registerListener, deferTimeMs);\n}, \"setSocketKeepAlive\");\n// src/set-socket-timeout.ts\nvar DEFER_EVENT_LISTENER_TIME3 = 3e3;\nvar setSocketTimeout = /* @__PURE__ */ __name((request, reject, timeoutInMs = DEFAULT_REQUEST_TIMEOUT)=>{\n    const registerTimeout = /* @__PURE__ */ __name((offset)=>{\n        const timeout = timeoutInMs - offset;\n        const onTimeout = /* @__PURE__ */ __name(()=>{\n            request.destroy();\n            reject(Object.assign(new Error(`Connection timed out after ${timeoutInMs} ms`), {\n                name: \"TimeoutError\"\n            }));\n        }, \"onTimeout\");\n        if (request.socket) {\n            request.socket.setTimeout(timeout, onTimeout);\n            request.on(\"close\", ()=>request.socket?.removeListener(\"timeout\", onTimeout));\n        } else {\n            request.setTimeout(timeout, onTimeout);\n        }\n    }, \"registerTimeout\");\n    if (0 < timeoutInMs && timeoutInMs < 6e3) {\n        registerTimeout(0);\n        return 0;\n    }\n    return timing.setTimeout(registerTimeout.bind(null, timeoutInMs === 0 ? 0 : DEFER_EVENT_LISTENER_TIME3), DEFER_EVENT_LISTENER_TIME3);\n}, \"setSocketTimeout\");\n// src/write-request-body.ts\nvar import_stream = __webpack_require__(/*! stream */ \"stream\");\nvar MIN_WAIT_TIME = 6e3;\nasync function writeRequestBody(httpRequest, request, maxContinueTimeoutMs = MIN_WAIT_TIME) {\n    const headers = request.headers ?? {};\n    const expect = headers[\"Expect\"] || headers[\"expect\"];\n    let timeoutId = -1;\n    let sendBody = true;\n    if (expect === \"100-continue\") {\n        sendBody = await Promise.race([\n            new Promise((resolve)=>{\n                timeoutId = Number(timing.setTimeout(()=>resolve(true), Math.max(MIN_WAIT_TIME, maxContinueTimeoutMs)));\n            }),\n            new Promise((resolve)=>{\n                httpRequest.on(\"continue\", ()=>{\n                    timing.clearTimeout(timeoutId);\n                    resolve(true);\n                });\n                httpRequest.on(\"response\", ()=>{\n                    timing.clearTimeout(timeoutId);\n                    resolve(false);\n                });\n                httpRequest.on(\"error\", ()=>{\n                    timing.clearTimeout(timeoutId);\n                    resolve(false);\n                });\n            })\n        ]);\n    }\n    if (sendBody) {\n        writeBody(httpRequest, request.body);\n    }\n}\n__name(writeRequestBody, \"writeRequestBody\");\nfunction writeBody(httpRequest, body) {\n    if (body instanceof import_stream.Readable) {\n        body.pipe(httpRequest);\n        return;\n    }\n    if (body) {\n        if (Buffer.isBuffer(body) || typeof body === \"string\") {\n            httpRequest.end(body);\n            return;\n        }\n        const uint8 = body;\n        if (typeof uint8 === \"object\" && uint8.buffer && typeof uint8.byteOffset === \"number\" && typeof uint8.byteLength === \"number\") {\n            httpRequest.end(Buffer.from(uint8.buffer, uint8.byteOffset, uint8.byteLength));\n            return;\n        }\n        httpRequest.end(Buffer.from(body));\n        return;\n    }\n    httpRequest.end();\n}\n__name(writeBody, \"writeBody\");\n// src/node-http-handler.ts\nvar DEFAULT_REQUEST_TIMEOUT = 0;\nvar NodeHttpHandler = class _NodeHttpHandler {\n    constructor(options){\n        this.socketWarningTimestamp = 0;\n        // Node http handler is hard-coded to http/1.1: https://github.com/nodejs/node/blob/ff5664b83b89c55e4ab5d5f60068fb457f1f5872/lib/_http_server.js#L286\n        this.metadata = {\n            handlerProtocol: \"http/1.1\"\n        };\n        this.configProvider = new Promise((resolve, reject)=>{\n            if (typeof options === \"function\") {\n                options().then((_options)=>{\n                    resolve(this.resolveDefaultConfig(_options));\n                }).catch(reject);\n            } else {\n                resolve(this.resolveDefaultConfig(options));\n            }\n        });\n    }\n    static{\n        __name(this, \"NodeHttpHandler\");\n    }\n    /**\n   * @returns the input if it is an HttpHandler of any class,\n   * or instantiates a new instance of this handler.\n   */ static create(instanceOrOptions) {\n        if (typeof instanceOrOptions?.handle === \"function\") {\n            return instanceOrOptions;\n        }\n        return new _NodeHttpHandler(instanceOrOptions);\n    }\n    /**\n   * @internal\n   *\n   * @param agent - http(s) agent in use by the NodeHttpHandler instance.\n   * @param socketWarningTimestamp - last socket usage check timestamp.\n   * @param logger - channel for the warning.\n   * @returns timestamp of last emitted warning.\n   */ static checkSocketUsage(agent, socketWarningTimestamp, logger = console) {\n        const { sockets, requests, maxSockets } = agent;\n        if (typeof maxSockets !== \"number\" || maxSockets === Infinity) {\n            return socketWarningTimestamp;\n        }\n        const interval = 15e3;\n        if (Date.now() - interval < socketWarningTimestamp) {\n            return socketWarningTimestamp;\n        }\n        if (sockets && requests) {\n            for(const origin in sockets){\n                const socketsInUse = sockets[origin]?.length ?? 0;\n                const requestsEnqueued = requests[origin]?.length ?? 0;\n                if (socketsInUse >= maxSockets && requestsEnqueued >= 2 * maxSockets) {\n                    logger?.warn?.(`@smithy/node-http-handler:WARN - socket usage at capacity=${socketsInUse} and ${requestsEnqueued} additional requests are enqueued.\nSee https://docs.aws.amazon.com/sdk-for-javascript/v3/developer-guide/node-configuring-maxsockets.html\nor increase socketAcquisitionWarningTimeout=(millis) in the NodeHttpHandler config.`);\n                    return Date.now();\n                }\n            }\n        }\n        return socketWarningTimestamp;\n    }\n    resolveDefaultConfig(options) {\n        const { requestTimeout, connectionTimeout, socketTimeout, socketAcquisitionWarningTimeout, httpAgent, httpsAgent } = options || {};\n        const keepAlive = true;\n        const maxSockets = 50;\n        return {\n            connectionTimeout,\n            requestTimeout: requestTimeout ?? socketTimeout,\n            socketAcquisitionWarningTimeout,\n            httpAgent: (()=>{\n                if (httpAgent instanceof import_http.Agent || typeof httpAgent?.destroy === \"function\") {\n                    return httpAgent;\n                }\n                return new import_http.Agent({\n                    keepAlive,\n                    maxSockets,\n                    ...httpAgent\n                });\n            })(),\n            httpsAgent: (()=>{\n                if (httpsAgent instanceof import_https.Agent || typeof httpsAgent?.destroy === \"function\") {\n                    return httpsAgent;\n                }\n                return new import_https.Agent({\n                    keepAlive,\n                    maxSockets,\n                    ...httpsAgent\n                });\n            })(),\n            logger: console\n        };\n    }\n    destroy() {\n        this.config?.httpAgent?.destroy();\n        this.config?.httpsAgent?.destroy();\n    }\n    async handle(request, { abortSignal } = {}) {\n        if (!this.config) {\n            this.config = await this.configProvider;\n        }\n        return new Promise((_resolve, _reject)=>{\n            let writeRequestBodyPromise = void 0;\n            const timeouts = [];\n            const resolve = /* @__PURE__ */ __name(async (arg)=>{\n                await writeRequestBodyPromise;\n                timeouts.forEach(timing.clearTimeout);\n                _resolve(arg);\n            }, \"resolve\");\n            const reject = /* @__PURE__ */ __name(async (arg)=>{\n                await writeRequestBodyPromise;\n                timeouts.forEach(timing.clearTimeout);\n                _reject(arg);\n            }, \"reject\");\n            if (!this.config) {\n                throw new Error(\"Node HTTP request handler config is not resolved\");\n            }\n            if (abortSignal?.aborted) {\n                const abortError = new Error(\"Request aborted\");\n                abortError.name = \"AbortError\";\n                reject(abortError);\n                return;\n            }\n            const isSSL = request.protocol === \"https:\";\n            const agent = isSSL ? this.config.httpsAgent : this.config.httpAgent;\n            timeouts.push(timing.setTimeout(()=>{\n                this.socketWarningTimestamp = _NodeHttpHandler.checkSocketUsage(agent, this.socketWarningTimestamp, this.config.logger);\n            }, this.config.socketAcquisitionWarningTimeout ?? (this.config.requestTimeout ?? 2e3) + (this.config.connectionTimeout ?? 1e3)));\n            const queryString = (0, import_querystring_builder.buildQueryString)(request.query || {});\n            let auth = void 0;\n            if (request.username != null || request.password != null) {\n                const username = request.username ?? \"\";\n                const password = request.password ?? \"\";\n                auth = `${username}:${password}`;\n            }\n            let path = request.path;\n            if (queryString) {\n                path += `?${queryString}`;\n            }\n            if (request.fragment) {\n                path += `#${request.fragment}`;\n            }\n            let hostname = request.hostname ?? \"\";\n            if (hostname[0] === \"[\" && hostname.endsWith(\"]\")) {\n                hostname = request.hostname.slice(1, -1);\n            } else {\n                hostname = request.hostname;\n            }\n            const nodeHttpsOptions = {\n                headers: request.headers,\n                host: hostname,\n                method: request.method,\n                path,\n                port: request.port,\n                agent,\n                auth\n            };\n            const requestFunc = isSSL ? import_https.request : import_http.request;\n            const req = requestFunc(nodeHttpsOptions, (res)=>{\n                const httpResponse = new import_protocol_http.HttpResponse({\n                    statusCode: res.statusCode || -1,\n                    reason: res.statusMessage,\n                    headers: getTransformedHeaders(res.headers),\n                    body: res\n                });\n                resolve({\n                    response: httpResponse\n                });\n            });\n            req.on(\"error\", (err)=>{\n                if (NODEJS_TIMEOUT_ERROR_CODES.includes(err.code)) {\n                    reject(Object.assign(err, {\n                        name: \"TimeoutError\"\n                    }));\n                } else {\n                    reject(err);\n                }\n            });\n            if (abortSignal) {\n                const onAbort = /* @__PURE__ */ __name(()=>{\n                    req.destroy();\n                    const abortError = new Error(\"Request aborted\");\n                    abortError.name = \"AbortError\";\n                    reject(abortError);\n                }, \"onAbort\");\n                if (typeof abortSignal.addEventListener === \"function\") {\n                    const signal = abortSignal;\n                    signal.addEventListener(\"abort\", onAbort, {\n                        once: true\n                    });\n                    req.once(\"close\", ()=>signal.removeEventListener(\"abort\", onAbort));\n                } else {\n                    abortSignal.onabort = onAbort;\n                }\n            }\n            timeouts.push(setConnectionTimeout(req, reject, this.config.connectionTimeout));\n            timeouts.push(setSocketTimeout(req, reject, this.config.requestTimeout));\n            const httpAgent = nodeHttpsOptions.agent;\n            if (typeof httpAgent === \"object\" && \"keepAlive\" in httpAgent) {\n                timeouts.push(setSocketKeepAlive(req, {\n                    // @ts-expect-error keepAlive is not public on httpAgent.\n                    keepAlive: httpAgent.keepAlive,\n                    // @ts-expect-error keepAliveMsecs is not public on httpAgent.\n                    keepAliveMsecs: httpAgent.keepAliveMsecs\n                }));\n            }\n            writeRequestBodyPromise = writeRequestBody(req, request, this.config.requestTimeout).catch((e)=>{\n                timeouts.forEach(timing.clearTimeout);\n                return _reject(e);\n            });\n        });\n    }\n    updateHttpClientConfig(key, value) {\n        this.config = void 0;\n        this.configProvider = this.configProvider.then((config)=>{\n            return {\n                ...config,\n                [key]: value\n            };\n        });\n    }\n    httpHandlerConfigs() {\n        return this.config ?? {};\n    }\n};\n// src/node-http2-handler.ts\nvar import_http22 = __webpack_require__(/*! http2 */ \"http2\");\n// src/node-http2-connection-manager.ts\nvar import_http2 = __toESM(__webpack_require__(/*! http2 */ \"http2\"));\n// src/node-http2-connection-pool.ts\nvar NodeHttp2ConnectionPool = class {\n    constructor(sessions){\n        this.sessions = [];\n        this.sessions = sessions ?? [];\n    }\n    static{\n        __name(this, \"NodeHttp2ConnectionPool\");\n    }\n    poll() {\n        if (this.sessions.length > 0) {\n            return this.sessions.shift();\n        }\n    }\n    offerLast(session) {\n        this.sessions.push(session);\n    }\n    contains(session) {\n        return this.sessions.includes(session);\n    }\n    remove(session) {\n        this.sessions = this.sessions.filter((s)=>s !== session);\n    }\n    [Symbol.iterator]() {\n        return this.sessions[Symbol.iterator]();\n    }\n    destroy(connection) {\n        for (const session of this.sessions){\n            if (session === connection) {\n                if (!session.destroyed) {\n                    session.destroy();\n                }\n            }\n        }\n    }\n};\n// src/node-http2-connection-manager.ts\nvar NodeHttp2ConnectionManager = class {\n    constructor(config){\n        this.sessionCache = /* @__PURE__ */ new Map();\n        this.config = config;\n        if (this.config.maxConcurrency && this.config.maxConcurrency <= 0) {\n            throw new RangeError(\"maxConcurrency must be greater than zero.\");\n        }\n    }\n    static{\n        __name(this, \"NodeHttp2ConnectionManager\");\n    }\n    lease(requestContext, connectionConfiguration) {\n        const url = this.getUrlString(requestContext);\n        const existingPool = this.sessionCache.get(url);\n        if (existingPool) {\n            const existingSession = existingPool.poll();\n            if (existingSession && !this.config.disableConcurrency) {\n                return existingSession;\n            }\n        }\n        const session = import_http2.default.connect(url);\n        if (this.config.maxConcurrency) {\n            session.settings({\n                maxConcurrentStreams: this.config.maxConcurrency\n            }, (err)=>{\n                if (err) {\n                    throw new Error(\"Fail to set maxConcurrentStreams to \" + this.config.maxConcurrency + \"when creating new session for \" + requestContext.destination.toString());\n                }\n            });\n        }\n        session.unref();\n        const destroySessionCb = /* @__PURE__ */ __name(()=>{\n            session.destroy();\n            this.deleteSession(url, session);\n        }, \"destroySessionCb\");\n        session.on(\"goaway\", destroySessionCb);\n        session.on(\"error\", destroySessionCb);\n        session.on(\"frameError\", destroySessionCb);\n        session.on(\"close\", ()=>this.deleteSession(url, session));\n        if (connectionConfiguration.requestTimeout) {\n            session.setTimeout(connectionConfiguration.requestTimeout, destroySessionCb);\n        }\n        const connectionPool = this.sessionCache.get(url) || new NodeHttp2ConnectionPool();\n        connectionPool.offerLast(session);\n        this.sessionCache.set(url, connectionPool);\n        return session;\n    }\n    /**\n   * Delete a session from the connection pool.\n   * @param authority The authority of the session to delete.\n   * @param session The session to delete.\n   */ deleteSession(authority, session) {\n        const existingConnectionPool = this.sessionCache.get(authority);\n        if (!existingConnectionPool) {\n            return;\n        }\n        if (!existingConnectionPool.contains(session)) {\n            return;\n        }\n        existingConnectionPool.remove(session);\n        this.sessionCache.set(authority, existingConnectionPool);\n    }\n    release(requestContext, session) {\n        const cacheKey = this.getUrlString(requestContext);\n        this.sessionCache.get(cacheKey)?.offerLast(session);\n    }\n    destroy() {\n        for (const [key, connectionPool] of this.sessionCache){\n            for (const session of connectionPool){\n                if (!session.destroyed) {\n                    session.destroy();\n                }\n                connectionPool.remove(session);\n            }\n            this.sessionCache.delete(key);\n        }\n    }\n    setMaxConcurrentStreams(maxConcurrentStreams) {\n        if (maxConcurrentStreams && maxConcurrentStreams <= 0) {\n            throw new RangeError(\"maxConcurrentStreams must be greater than zero.\");\n        }\n        this.config.maxConcurrency = maxConcurrentStreams;\n    }\n    setDisableConcurrentStreams(disableConcurrentStreams) {\n        this.config.disableConcurrency = disableConcurrentStreams;\n    }\n    getUrlString(request) {\n        return request.destination.toString();\n    }\n};\n// src/node-http2-handler.ts\nvar NodeHttp2Handler = class _NodeHttp2Handler {\n    constructor(options){\n        this.metadata = {\n            handlerProtocol: \"h2\"\n        };\n        this.connectionManager = new NodeHttp2ConnectionManager({});\n        this.configProvider = new Promise((resolve, reject)=>{\n            if (typeof options === \"function\") {\n                options().then((opts)=>{\n                    resolve(opts || {});\n                }).catch(reject);\n            } else {\n                resolve(options || {});\n            }\n        });\n    }\n    static{\n        __name(this, \"NodeHttp2Handler\");\n    }\n    /**\n   * @returns the input if it is an HttpHandler of any class,\n   * or instantiates a new instance of this handler.\n   */ static create(instanceOrOptions) {\n        if (typeof instanceOrOptions?.handle === \"function\") {\n            return instanceOrOptions;\n        }\n        return new _NodeHttp2Handler(instanceOrOptions);\n    }\n    destroy() {\n        this.connectionManager.destroy();\n    }\n    async handle(request, { abortSignal } = {}) {\n        if (!this.config) {\n            this.config = await this.configProvider;\n            this.connectionManager.setDisableConcurrentStreams(this.config.disableConcurrentStreams || false);\n            if (this.config.maxConcurrentStreams) {\n                this.connectionManager.setMaxConcurrentStreams(this.config.maxConcurrentStreams);\n            }\n        }\n        const { requestTimeout, disableConcurrentStreams } = this.config;\n        return new Promise((_resolve, _reject)=>{\n            let fulfilled = false;\n            let writeRequestBodyPromise = void 0;\n            const resolve = /* @__PURE__ */ __name(async (arg)=>{\n                await writeRequestBodyPromise;\n                _resolve(arg);\n            }, \"resolve\");\n            const reject = /* @__PURE__ */ __name(async (arg)=>{\n                await writeRequestBodyPromise;\n                _reject(arg);\n            }, \"reject\");\n            if (abortSignal?.aborted) {\n                fulfilled = true;\n                const abortError = new Error(\"Request aborted\");\n                abortError.name = \"AbortError\";\n                reject(abortError);\n                return;\n            }\n            const { hostname, method, port, protocol, query } = request;\n            let auth = \"\";\n            if (request.username != null || request.password != null) {\n                const username = request.username ?? \"\";\n                const password = request.password ?? \"\";\n                auth = `${username}:${password}@`;\n            }\n            const authority = `${protocol}//${auth}${hostname}${port ? `:${port}` : \"\"}`;\n            const requestContext = {\n                destination: new URL(authority)\n            };\n            const session = this.connectionManager.lease(requestContext, {\n                requestTimeout: this.config?.sessionTimeout,\n                disableConcurrentStreams: disableConcurrentStreams || false\n            });\n            const rejectWithDestroy = /* @__PURE__ */ __name((err)=>{\n                if (disableConcurrentStreams) {\n                    this.destroySession(session);\n                }\n                fulfilled = true;\n                reject(err);\n            }, \"rejectWithDestroy\");\n            const queryString = (0, import_querystring_builder.buildQueryString)(query || {});\n            let path = request.path;\n            if (queryString) {\n                path += `?${queryString}`;\n            }\n            if (request.fragment) {\n                path += `#${request.fragment}`;\n            }\n            const req = session.request({\n                ...request.headers,\n                [import_http22.constants.HTTP2_HEADER_PATH]: path,\n                [import_http22.constants.HTTP2_HEADER_METHOD]: method\n            });\n            session.ref();\n            req.on(\"response\", (headers)=>{\n                const httpResponse = new import_protocol_http.HttpResponse({\n                    statusCode: headers[\":status\"] || -1,\n                    headers: getTransformedHeaders(headers),\n                    body: req\n                });\n                fulfilled = true;\n                resolve({\n                    response: httpResponse\n                });\n                if (disableConcurrentStreams) {\n                    session.close();\n                    this.connectionManager.deleteSession(authority, session);\n                }\n            });\n            if (requestTimeout) {\n                req.setTimeout(requestTimeout, ()=>{\n                    req.close();\n                    const timeoutError = new Error(`Stream timed out because of no activity for ${requestTimeout} ms`);\n                    timeoutError.name = \"TimeoutError\";\n                    rejectWithDestroy(timeoutError);\n                });\n            }\n            if (abortSignal) {\n                const onAbort = /* @__PURE__ */ __name(()=>{\n                    req.close();\n                    const abortError = new Error(\"Request aborted\");\n                    abortError.name = \"AbortError\";\n                    rejectWithDestroy(abortError);\n                }, \"onAbort\");\n                if (typeof abortSignal.addEventListener === \"function\") {\n                    const signal = abortSignal;\n                    signal.addEventListener(\"abort\", onAbort, {\n                        once: true\n                    });\n                    req.once(\"close\", ()=>signal.removeEventListener(\"abort\", onAbort));\n                } else {\n                    abortSignal.onabort = onAbort;\n                }\n            }\n            req.on(\"frameError\", (type, code, id)=>{\n                rejectWithDestroy(new Error(`Frame type id ${type} in stream id ${id} has failed with code ${code}.`));\n            });\n            req.on(\"error\", rejectWithDestroy);\n            req.on(\"aborted\", ()=>{\n                rejectWithDestroy(new Error(`HTTP/2 stream is abnormally aborted in mid-communication with result code ${req.rstCode}.`));\n            });\n            req.on(\"close\", ()=>{\n                session.unref();\n                if (disableConcurrentStreams) {\n                    session.destroy();\n                }\n                if (!fulfilled) {\n                    rejectWithDestroy(new Error(\"Unexpected error: http2 request did not get a response\"));\n                }\n            });\n            writeRequestBodyPromise = writeRequestBody(req, request, requestTimeout);\n        });\n    }\n    updateHttpClientConfig(key, value) {\n        this.config = void 0;\n        this.configProvider = this.configProvider.then((config)=>{\n            return {\n                ...config,\n                [key]: value\n            };\n        });\n    }\n    httpHandlerConfigs() {\n        return this.config ?? {};\n    }\n    /**\n   * Destroys a session.\n   * @param session - the session to destroy.\n   */ destroySession(session) {\n        if (!session.destroyed) {\n            session.destroy();\n        }\n    }\n};\n// src/stream-collector/collector.ts\nvar Collector = class extends import_stream.Writable {\n    constructor(){\n        super(...arguments);\n        this.bufferedBytes = [];\n    }\n    static{\n        __name(this, \"Collector\");\n    }\n    _write(chunk, encoding, callback) {\n        this.bufferedBytes.push(chunk);\n        callback();\n    }\n};\n// src/stream-collector/index.ts\nvar streamCollector = /* @__PURE__ */ __name((stream)=>{\n    if (isReadableStreamInstance(stream)) {\n        return collectReadableStream(stream);\n    }\n    return new Promise((resolve, reject)=>{\n        const collector = new Collector();\n        stream.pipe(collector);\n        stream.on(\"error\", (err)=>{\n            collector.end();\n            reject(err);\n        });\n        collector.on(\"error\", reject);\n        collector.on(\"finish\", function() {\n            const bytes = new Uint8Array(Buffer.concat(this.bufferedBytes));\n            resolve(bytes);\n        });\n    });\n}, \"streamCollector\");\nvar isReadableStreamInstance = /* @__PURE__ */ __name((stream)=>typeof ReadableStream === \"function\" && stream instanceof ReadableStream, \"isReadableStreamInstance\");\nasync function collectReadableStream(stream) {\n    const chunks = [];\n    const reader = stream.getReader();\n    let isDone = false;\n    let length = 0;\n    while(!isDone){\n        const { done, value } = await reader.read();\n        if (value) {\n            chunks.push(value);\n            length += value.length;\n        }\n        isDone = done;\n    }\n    const collected = new Uint8Array(length);\n    let offset = 0;\n    for (const chunk of chunks){\n        collected.set(chunk, offset);\n        offset += chunk.length;\n    }\n    return collected;\n}\n__name(collectReadableStream, \"collectReadableStream\");\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/node-http-handler/dist-cjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/property-provider/dist-cjs/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@smithy/property-provider/dist-cjs/index.js ***!
  \******************************************************************/
/***/ ((module) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value)=>__defProp(target, \"name\", {\n        value,\n        configurable: true\n    });\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n    CredentialsProviderError: ()=>CredentialsProviderError,\n    ProviderError: ()=>ProviderError,\n    TokenProviderError: ()=>TokenProviderError,\n    chain: ()=>chain,\n    fromStatic: ()=>fromStatic,\n    memoize: ()=>memoize\n});\nmodule.exports = __toCommonJS(src_exports);\n// src/ProviderError.ts\nvar ProviderError = class _ProviderError extends Error {\n    constructor(message, options = true){\n        let logger;\n        let tryNextLink = true;\n        if (typeof options === \"boolean\") {\n            logger = void 0;\n            tryNextLink = options;\n        } else if (options != null && typeof options === \"object\") {\n            logger = options.logger;\n            tryNextLink = options.tryNextLink ?? true;\n        }\n        super(message);\n        this.name = \"ProviderError\";\n        this.tryNextLink = tryNextLink;\n        Object.setPrototypeOf(this, _ProviderError.prototype);\n        logger?.debug?.(`@smithy/property-provider ${tryNextLink ? \"->\" : \"(!)\"} ${message}`);\n    }\n    static{\n        __name(this, \"ProviderError\");\n    }\n    /**\n   * @deprecated use new operator.\n   */ static from(error, options = true) {\n        return Object.assign(new this(error.message, options), error);\n    }\n};\n// src/CredentialsProviderError.ts\nvar CredentialsProviderError = class _CredentialsProviderError extends ProviderError {\n    /**\n   * @override\n   */ constructor(message, options = true){\n        super(message, options);\n        this.name = \"CredentialsProviderError\";\n        Object.setPrototypeOf(this, _CredentialsProviderError.prototype);\n    }\n    static{\n        __name(this, \"CredentialsProviderError\");\n    }\n};\n// src/TokenProviderError.ts\nvar TokenProviderError = class _TokenProviderError extends ProviderError {\n    /**\n   * @override\n   */ constructor(message, options = true){\n        super(message, options);\n        this.name = \"TokenProviderError\";\n        Object.setPrototypeOf(this, _TokenProviderError.prototype);\n    }\n    static{\n        __name(this, \"TokenProviderError\");\n    }\n};\n// src/chain.ts\nvar chain = /* @__PURE__ */ __name((...providers)=>async ()=>{\n        if (providers.length === 0) {\n            throw new ProviderError(\"No providers in chain\");\n        }\n        let lastProviderError;\n        for (const provider of providers){\n            try {\n                const credentials = await provider();\n                return credentials;\n            } catch (err) {\n                lastProviderError = err;\n                if (err?.tryNextLink) {\n                    continue;\n                }\n                throw err;\n            }\n        }\n        throw lastProviderError;\n    }, \"chain\");\n// src/fromStatic.ts\nvar fromStatic = /* @__PURE__ */ __name((staticValue)=>()=>Promise.resolve(staticValue), \"fromStatic\");\n// src/memoize.ts\nvar memoize = /* @__PURE__ */ __name((provider, isExpired, requiresRefresh)=>{\n    let resolved;\n    let pending;\n    let hasResult;\n    let isConstant = false;\n    const coalesceProvider = /* @__PURE__ */ __name(async ()=>{\n        if (!pending) {\n            pending = provider();\n        }\n        try {\n            resolved = await pending;\n            hasResult = true;\n            isConstant = false;\n        } finally{\n            pending = void 0;\n        }\n        return resolved;\n    }, \"coalesceProvider\");\n    if (isExpired === void 0) {\n        return async (options)=>{\n            if (!hasResult || options?.forceRefresh) {\n                resolved = await coalesceProvider();\n            }\n            return resolved;\n        };\n    }\n    return async (options)=>{\n        if (!hasResult || options?.forceRefresh) {\n            resolved = await coalesceProvider();\n        }\n        if (isConstant) {\n            return resolved;\n        }\n        if (requiresRefresh && !requiresRefresh(resolved)) {\n            isConstant = true;\n            return resolved;\n        }\n        if (isExpired(resolved)) {\n            await coalesceProvider();\n            return resolved;\n        }\n        return resolved;\n    };\n}, \"memoize\");\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/property-provider/dist-cjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/protocol-http/dist-cjs/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/@smithy/protocol-http/dist-cjs/index.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value)=>__defProp(target, \"name\", {\n        value,\n        configurable: true\n    });\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n    Field: ()=>Field,\n    Fields: ()=>Fields,\n    HttpRequest: ()=>HttpRequest,\n    HttpResponse: ()=>HttpResponse,\n    IHttpRequest: ()=>import_types.HttpRequest,\n    getHttpHandlerExtensionConfiguration: ()=>getHttpHandlerExtensionConfiguration,\n    isValidHostname: ()=>isValidHostname,\n    resolveHttpHandlerRuntimeConfig: ()=>resolveHttpHandlerRuntimeConfig\n});\nmodule.exports = __toCommonJS(src_exports);\n// src/extensions/httpExtensionConfiguration.ts\nvar getHttpHandlerExtensionConfiguration = /* @__PURE__ */ __name((runtimeConfig)=>{\n    return {\n        setHttpHandler (handler) {\n            runtimeConfig.httpHandler = handler;\n        },\n        httpHandler () {\n            return runtimeConfig.httpHandler;\n        },\n        updateHttpClientConfig (key, value) {\n            runtimeConfig.httpHandler?.updateHttpClientConfig(key, value);\n        },\n        httpHandlerConfigs () {\n            return runtimeConfig.httpHandler.httpHandlerConfigs();\n        }\n    };\n}, \"getHttpHandlerExtensionConfiguration\");\nvar resolveHttpHandlerRuntimeConfig = /* @__PURE__ */ __name((httpHandlerExtensionConfiguration)=>{\n    return {\n        httpHandler: httpHandlerExtensionConfiguration.httpHandler()\n    };\n}, \"resolveHttpHandlerRuntimeConfig\");\n// src/Field.ts\nvar import_types = __webpack_require__(/*! @smithy/types */ \"(rsc)/./node_modules/@smithy/types/dist-cjs/index.js\");\nvar Field = class {\n    static{\n        __name(this, \"Field\");\n    }\n    constructor({ name, kind = import_types.FieldPosition.HEADER, values = [] }){\n        this.name = name;\n        this.kind = kind;\n        this.values = values;\n    }\n    /**\n   * Appends a value to the field.\n   *\n   * @param value The value to append.\n   */ add(value) {\n        this.values.push(value);\n    }\n    /**\n   * Overwrite existing field values.\n   *\n   * @param values The new field values.\n   */ set(values) {\n        this.values = values;\n    }\n    /**\n   * Remove all matching entries from list.\n   *\n   * @param value Value to remove.\n   */ remove(value) {\n        this.values = this.values.filter((v)=>v !== value);\n    }\n    /**\n   * Get comma-delimited string.\n   *\n   * @returns String representation of {@link Field}.\n   */ toString() {\n        return this.values.map((v)=>v.includes(\",\") || v.includes(\" \") ? `\"${v}\"` : v).join(\", \");\n    }\n    /**\n   * Get string values as a list\n   *\n   * @returns Values in {@link Field} as a list.\n   */ get() {\n        return this.values;\n    }\n};\n// src/Fields.ts\nvar Fields = class {\n    constructor({ fields = [], encoding = \"utf-8\" }){\n        this.entries = {};\n        fields.forEach(this.setField.bind(this));\n        this.encoding = encoding;\n    }\n    static{\n        __name(this, \"Fields\");\n    }\n    /**\n   * Set entry for a {@link Field} name. The `name`\n   * attribute will be used to key the collection.\n   *\n   * @param field The {@link Field} to set.\n   */ setField(field) {\n        this.entries[field.name.toLowerCase()] = field;\n    }\n    /**\n   *  Retrieve {@link Field} entry by name.\n   *\n   * @param name The name of the {@link Field} entry\n   *  to retrieve\n   * @returns The {@link Field} if it exists.\n   */ getField(name) {\n        return this.entries[name.toLowerCase()];\n    }\n    /**\n   * Delete entry from collection.\n   *\n   * @param name Name of the entry to delete.\n   */ removeField(name) {\n        delete this.entries[name.toLowerCase()];\n    }\n    /**\n   * Helper function for retrieving specific types of fields.\n   * Used to grab all headers or all trailers.\n   *\n   * @param kind {@link FieldPosition} of entries to retrieve.\n   * @returns The {@link Field} entries with the specified\n   *  {@link FieldPosition}.\n   */ getByType(kind) {\n        return Object.values(this.entries).filter((field)=>field.kind === kind);\n    }\n};\n// src/httpRequest.ts\nvar HttpRequest = class _HttpRequest {\n    static{\n        __name(this, \"HttpRequest\");\n    }\n    constructor(options){\n        this.method = options.method || \"GET\";\n        this.hostname = options.hostname || \"localhost\";\n        this.port = options.port;\n        this.query = options.query || {};\n        this.headers = options.headers || {};\n        this.body = options.body;\n        this.protocol = options.protocol ? options.protocol.slice(-1) !== \":\" ? `${options.protocol}:` : options.protocol : \"https:\";\n        this.path = options.path ? options.path.charAt(0) !== \"/\" ? `/${options.path}` : options.path : \"/\";\n        this.username = options.username;\n        this.password = options.password;\n        this.fragment = options.fragment;\n    }\n    /**\n   * Note: this does not deep-clone the body.\n   */ static clone(request) {\n        const cloned = new _HttpRequest({\n            ...request,\n            headers: {\n                ...request.headers\n            }\n        });\n        if (cloned.query) {\n            cloned.query = cloneQuery(cloned.query);\n        }\n        return cloned;\n    }\n    /**\n   * This method only actually asserts that request is the interface {@link IHttpRequest},\n   * and not necessarily this concrete class. Left in place for API stability.\n   *\n   * Do not call instance methods on the input of this function, and\n   * do not assume it has the HttpRequest prototype.\n   */ static isInstance(request) {\n        if (!request) {\n            return false;\n        }\n        const req = request;\n        return \"method\" in req && \"protocol\" in req && \"hostname\" in req && \"path\" in req && typeof req[\"query\"] === \"object\" && typeof req[\"headers\"] === \"object\";\n    }\n    /**\n   * @deprecated use static HttpRequest.clone(request) instead. It's not safe to call\n   * this method because {@link HttpRequest.isInstance} incorrectly\n   * asserts that IHttpRequest (interface) objects are of type HttpRequest (class).\n   */ clone() {\n        return _HttpRequest.clone(this);\n    }\n};\nfunction cloneQuery(query) {\n    return Object.keys(query).reduce((carry, paramName)=>{\n        const param = query[paramName];\n        return {\n            ...carry,\n            [paramName]: Array.isArray(param) ? [\n                ...param\n            ] : param\n        };\n    }, {});\n}\n__name(cloneQuery, \"cloneQuery\");\n// src/httpResponse.ts\nvar HttpResponse = class {\n    static{\n        __name(this, \"HttpResponse\");\n    }\n    constructor(options){\n        this.statusCode = options.statusCode;\n        this.reason = options.reason;\n        this.headers = options.headers || {};\n        this.body = options.body;\n    }\n    static isInstance(response) {\n        if (!response) return false;\n        const resp = response;\n        return typeof resp.statusCode === \"number\" && typeof resp.headers === \"object\";\n    }\n};\n// src/isValidHostname.ts\nfunction isValidHostname(hostname) {\n    const hostPattern = /^[a-z0-9][a-z0-9\\.\\-]*[a-z0-9]$/;\n    return hostPattern.test(hostname);\n}\n__name(isValidHostname, \"isValidHostname\");\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/protocol-http/dist-cjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/querystring-builder/dist-cjs/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/@smithy/querystring-builder/dist-cjs/index.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value)=>__defProp(target, \"name\", {\n        value,\n        configurable: true\n    });\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n    buildQueryString: ()=>buildQueryString\n});\nmodule.exports = __toCommonJS(src_exports);\nvar import_util_uri_escape = __webpack_require__(/*! @smithy/util-uri-escape */ \"(rsc)/./node_modules/@smithy/util-uri-escape/dist-cjs/index.js\");\nfunction buildQueryString(query) {\n    const parts = [];\n    for (let key of Object.keys(query).sort()){\n        const value = query[key];\n        key = (0, import_util_uri_escape.escapeUri)(key);\n        if (Array.isArray(value)) {\n            for(let i = 0, iLen = value.length; i < iLen; i++){\n                parts.push(`${key}=${(0, import_util_uri_escape.escapeUri)(value[i])}`);\n            }\n        } else {\n            let qsEntry = key;\n            if (value || typeof value === \"string\") {\n                qsEntry += `=${(0, import_util_uri_escape.escapeUri)(value)}`;\n            }\n            parts.push(qsEntry);\n        }\n    }\n    return parts.join(\"&\");\n}\n__name(buildQueryString, \"buildQueryString\");\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9xdWVyeXN0cmluZy1idWlsZGVyL2Rpc3QtY2pzL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7QUFBQSxJQUFJQSxZQUFZQyxPQUFPQyxjQUFjO0FBQ3JDLElBQUlDLG1CQUFtQkYsT0FBT0csd0JBQXdCO0FBQ3RELElBQUlDLG9CQUFvQkosT0FBT0ssbUJBQW1CO0FBQ2xELElBQUlDLGVBQWVOLE9BQU9PLFNBQVMsQ0FBQ0MsY0FBYztBQUNsRCxJQUFJQyxTQUFTLENBQUNDLFFBQVFDLFFBQVVaLFVBQVVXLFFBQVEsUUFBUTtRQUFFQztRQUFPQyxjQUFjO0lBQUs7QUFDdEYsSUFBSUMsV0FBVyxDQUFDSCxRQUFRSTtJQUN0QixJQUFLLElBQUlDLFFBQVFELElBQ2ZmLFVBQVVXLFFBQVFLLE1BQU07UUFBRUMsS0FBS0YsR0FBRyxDQUFDQyxLQUFLO1FBQUVFLFlBQVk7SUFBSztBQUMvRDtBQUNBLElBQUlDLGNBQWMsQ0FBQ0MsSUFBSUMsTUFBTUMsUUFBUUM7SUFDbkMsSUFBSUYsUUFBUSxPQUFPQSxTQUFTLFlBQVksT0FBT0EsU0FBUyxZQUFZO1FBQ2xFLEtBQUssSUFBSUcsT0FBT25CLGtCQUFrQmdCLE1BQ2hDLElBQUksQ0FBQ2QsYUFBYWtCLElBQUksQ0FBQ0wsSUFBSUksUUFBUUEsUUFBUUYsUUFDekN0QixVQUFVb0IsSUFBSUksS0FBSztZQUFFUCxLQUFLLElBQU1JLElBQUksQ0FBQ0csSUFBSTtZQUFFTixZQUFZLENBQUVLLENBQUFBLE9BQU9wQixpQkFBaUJrQixNQUFNRyxJQUFHLEtBQU1ELEtBQUtMLFVBQVU7UUFBQztJQUN0SDtJQUNBLE9BQU9FO0FBQ1Q7QUFDQSxJQUFJTSxlQUFlLENBQUNDLE1BQVFSLFlBQVluQixVQUFVLENBQUMsR0FBRyxjQUFjO1FBQUVZLE9BQU87SUFBSyxJQUFJZTtBQUV0RixlQUFlO0FBQ2YsSUFBSUMsY0FBYyxDQUFDO0FBQ25CZCxTQUFTYyxhQUFhO0lBQ3BCQyxrQkFBa0IsSUFBTUE7QUFDMUI7QUFDQUMsT0FBT0MsT0FBTyxHQUFHTCxhQUFhRTtBQUM5QixJQUFJSSx5QkFBeUJDLG1CQUFPQSxDQUFDLCtGQUF5QjtBQUM5RCxTQUFTSixpQkFBaUJLLEtBQUs7SUFDN0IsTUFBTUMsUUFBUSxFQUFFO0lBQ2hCLEtBQUssSUFBSVgsT0FBT3ZCLE9BQU9tQyxJQUFJLENBQUNGLE9BQU9HLElBQUksR0FBSTtRQUN6QyxNQUFNekIsUUFBUXNCLEtBQUssQ0FBQ1YsSUFBSTtRQUN4QkEsTUFBTSxDQUFDLEdBQUdRLHVCQUF1Qk0sU0FBUyxFQUFFZDtRQUM1QyxJQUFJZSxNQUFNQyxPQUFPLENBQUM1QixRQUFRO1lBQ3hCLElBQUssSUFBSTZCLElBQUksR0FBR0MsT0FBTzlCLE1BQU0rQixNQUFNLEVBQUVGLElBQUlDLE1BQU1ELElBQUs7Z0JBQ2xETixNQUFNUyxJQUFJLENBQUMsQ0FBQyxFQUFFcEIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHUSx1QkFBdUJNLFNBQVMsRUFBRTFCLEtBQUssQ0FBQzZCLEVBQUUsRUFBRSxDQUFDO1lBQ3hFO1FBQ0YsT0FBTztZQUNMLElBQUlJLFVBQVVyQjtZQUNkLElBQUlaLFNBQVMsT0FBT0EsVUFBVSxVQUFVO2dCQUN0Q2lDLFdBQVcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHYix1QkFBdUJNLFNBQVMsRUFBRTFCLE9BQU8sQ0FBQztZQUMvRDtZQUNBdUIsTUFBTVMsSUFBSSxDQUFDQztRQUNiO0lBQ0Y7SUFDQSxPQUFPVixNQUFNVyxJQUFJLENBQUM7QUFDcEI7QUFDQXBDLE9BQU9tQixrQkFBa0I7QUFDekIsNkRBQTZEO0FBRTdELEtBQU1DLENBQUFBLENBRU4iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbG91ZHNoaWZ0Ly4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvcXVlcnlzdHJpbmctYnVpbGRlci9kaXN0LWNqcy9pbmRleC5qcz9hZmMyIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fbmFtZSA9ICh0YXJnZXQsIHZhbHVlKSA9PiBfX2RlZlByb3AodGFyZ2V0LCBcIm5hbWVcIiwgeyB2YWx1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0pO1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG5cbi8vIHNyYy9pbmRleC50c1xudmFyIHNyY19leHBvcnRzID0ge307XG5fX2V4cG9ydChzcmNfZXhwb3J0cywge1xuICBidWlsZFF1ZXJ5U3RyaW5nOiAoKSA9PiBidWlsZFF1ZXJ5U3RyaW5nXG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKHNyY19leHBvcnRzKTtcbnZhciBpbXBvcnRfdXRpbF91cmlfZXNjYXBlID0gcmVxdWlyZShcIkBzbWl0aHkvdXRpbC11cmktZXNjYXBlXCIpO1xuZnVuY3Rpb24gYnVpbGRRdWVyeVN0cmluZyhxdWVyeSkge1xuICBjb25zdCBwYXJ0cyA9IFtdO1xuICBmb3IgKGxldCBrZXkgb2YgT2JqZWN0LmtleXMocXVlcnkpLnNvcnQoKSkge1xuICAgIGNvbnN0IHZhbHVlID0gcXVlcnlba2V5XTtcbiAgICBrZXkgPSAoMCwgaW1wb3J0X3V0aWxfdXJpX2VzY2FwZS5lc2NhcGVVcmkpKGtleSk7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICBmb3IgKGxldCBpID0gMCwgaUxlbiA9IHZhbHVlLmxlbmd0aDsgaSA8IGlMZW47IGkrKykge1xuICAgICAgICBwYXJ0cy5wdXNoKGAke2tleX09JHsoMCwgaW1wb3J0X3V0aWxfdXJpX2VzY2FwZS5lc2NhcGVVcmkpKHZhbHVlW2ldKX1gKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IHFzRW50cnkgPSBrZXk7XG4gICAgICBpZiAodmFsdWUgfHwgdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHFzRW50cnkgKz0gYD0keygwLCBpbXBvcnRfdXRpbF91cmlfZXNjYXBlLmVzY2FwZVVyaSkodmFsdWUpfWA7XG4gICAgICB9XG4gICAgICBwYXJ0cy5wdXNoKHFzRW50cnkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcGFydHMuam9pbihcIiZcIik7XG59XG5fX25hbWUoYnVpbGRRdWVyeVN0cmluZywgXCJidWlsZFF1ZXJ5U3RyaW5nXCIpO1xuLy8gQW5ub3RhdGUgdGhlIENvbW1vbkpTIGV4cG9ydCBuYW1lcyBmb3IgRVNNIGltcG9ydCBpbiBub2RlOlxuXG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgYnVpbGRRdWVyeVN0cmluZ1xufSk7XG5cbiJdLCJuYW1lcyI6WyJfX2RlZlByb3AiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsIl9fZ2V0T3duUHJvcERlc2MiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJfX2dldE93blByb3BOYW1lcyIsImdldE93blByb3BlcnR5TmFtZXMiLCJfX2hhc093blByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsIl9fbmFtZSIsInRhcmdldCIsInZhbHVlIiwiY29uZmlndXJhYmxlIiwiX19leHBvcnQiLCJhbGwiLCJuYW1lIiwiZ2V0IiwiZW51bWVyYWJsZSIsIl9fY29weVByb3BzIiwidG8iLCJmcm9tIiwiZXhjZXB0IiwiZGVzYyIsImtleSIsImNhbGwiLCJfX3RvQ29tbW9uSlMiLCJtb2QiLCJzcmNfZXhwb3J0cyIsImJ1aWxkUXVlcnlTdHJpbmciLCJtb2R1bGUiLCJleHBvcnRzIiwiaW1wb3J0X3V0aWxfdXJpX2VzY2FwZSIsInJlcXVpcmUiLCJxdWVyeSIsInBhcnRzIiwia2V5cyIsInNvcnQiLCJlc2NhcGVVcmkiLCJBcnJheSIsImlzQXJyYXkiLCJpIiwiaUxlbiIsImxlbmd0aCIsInB1c2giLCJxc0VudHJ5Iiwiam9pbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/querystring-builder/dist-cjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/querystring-parser/dist-cjs/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@smithy/querystring-parser/dist-cjs/index.js ***!
  \*******************************************************************/
/***/ ((module) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value)=>__defProp(target, \"name\", {\n        value,\n        configurable: true\n    });\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n    parseQueryString: ()=>parseQueryString\n});\nmodule.exports = __toCommonJS(src_exports);\nfunction parseQueryString(querystring) {\n    const query = {};\n    querystring = querystring.replace(/^\\?/, \"\");\n    if (querystring) {\n        for (const pair of querystring.split(\"&\")){\n            let [key, value = null] = pair.split(\"=\");\n            key = decodeURIComponent(key);\n            if (value) {\n                value = decodeURIComponent(value);\n            }\n            if (!(key in query)) {\n                query[key] = value;\n            } else if (Array.isArray(query[key])) {\n                query[key].push(value);\n            } else {\n                query[key] = [\n                    query[key],\n                    value\n                ];\n            }\n        }\n    }\n    return query;\n}\n__name(parseQueryString, \"parseQueryString\");\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9xdWVyeXN0cmluZy1wYXJzZXIvZGlzdC1janMvaW5kZXguanMiLCJtYXBwaW5ncyI6IjtBQUFBLElBQUlBLFlBQVlDLE9BQU9DLGNBQWM7QUFDckMsSUFBSUMsbUJBQW1CRixPQUFPRyx3QkFBd0I7QUFDdEQsSUFBSUMsb0JBQW9CSixPQUFPSyxtQkFBbUI7QUFDbEQsSUFBSUMsZUFBZU4sT0FBT08sU0FBUyxDQUFDQyxjQUFjO0FBQ2xELElBQUlDLFNBQVMsQ0FBQ0MsUUFBUUMsUUFBVVosVUFBVVcsUUFBUSxRQUFRO1FBQUVDO1FBQU9DLGNBQWM7SUFBSztBQUN0RixJQUFJQyxXQUFXLENBQUNILFFBQVFJO0lBQ3RCLElBQUssSUFBSUMsUUFBUUQsSUFDZmYsVUFBVVcsUUFBUUssTUFBTTtRQUFFQyxLQUFLRixHQUFHLENBQUNDLEtBQUs7UUFBRUUsWUFBWTtJQUFLO0FBQy9EO0FBQ0EsSUFBSUMsY0FBYyxDQUFDQyxJQUFJQyxNQUFNQyxRQUFRQztJQUNuQyxJQUFJRixRQUFRLE9BQU9BLFNBQVMsWUFBWSxPQUFPQSxTQUFTLFlBQVk7UUFDbEUsS0FBSyxJQUFJRyxPQUFPbkIsa0JBQWtCZ0IsTUFDaEMsSUFBSSxDQUFDZCxhQUFha0IsSUFBSSxDQUFDTCxJQUFJSSxRQUFRQSxRQUFRRixRQUN6Q3RCLFVBQVVvQixJQUFJSSxLQUFLO1lBQUVQLEtBQUssSUFBTUksSUFBSSxDQUFDRyxJQUFJO1lBQUVOLFlBQVksQ0FBRUssQ0FBQUEsT0FBT3BCLGlCQUFpQmtCLE1BQU1HLElBQUcsS0FBTUQsS0FBS0wsVUFBVTtRQUFDO0lBQ3RIO0lBQ0EsT0FBT0U7QUFDVDtBQUNBLElBQUlNLGVBQWUsQ0FBQ0MsTUFBUVIsWUFBWW5CLFVBQVUsQ0FBQyxHQUFHLGNBQWM7UUFBRVksT0FBTztJQUFLLElBQUllO0FBRXRGLGVBQWU7QUFDZixJQUFJQyxjQUFjLENBQUM7QUFDbkJkLFNBQVNjLGFBQWE7SUFDcEJDLGtCQUFrQixJQUFNQTtBQUMxQjtBQUNBQyxPQUFPQyxPQUFPLEdBQUdMLGFBQWFFO0FBQzlCLFNBQVNDLGlCQUFpQkcsV0FBVztJQUNuQyxNQUFNQyxRQUFRLENBQUM7SUFDZkQsY0FBY0EsWUFBWUUsT0FBTyxDQUFDLE9BQU87SUFDekMsSUFBSUYsYUFBYTtRQUNmLEtBQUssTUFBTUcsUUFBUUgsWUFBWUksS0FBSyxDQUFDLEtBQU07WUFDekMsSUFBSSxDQUFDWixLQUFLWixRQUFRLElBQUksQ0FBQyxHQUFHdUIsS0FBS0MsS0FBSyxDQUFDO1lBQ3JDWixNQUFNYSxtQkFBbUJiO1lBQ3pCLElBQUlaLE9BQU87Z0JBQ1RBLFFBQVF5QixtQkFBbUJ6QjtZQUM3QjtZQUNBLElBQUksQ0FBRVksQ0FBQUEsT0FBT1MsS0FBSSxHQUFJO2dCQUNuQkEsS0FBSyxDQUFDVCxJQUFJLEdBQUdaO1lBQ2YsT0FBTyxJQUFJMEIsTUFBTUMsT0FBTyxDQUFDTixLQUFLLENBQUNULElBQUksR0FBRztnQkFDcENTLEtBQUssQ0FBQ1QsSUFBSSxDQUFDZ0IsSUFBSSxDQUFDNUI7WUFDbEIsT0FBTztnQkFDTHFCLEtBQUssQ0FBQ1QsSUFBSSxHQUFHO29CQUFDUyxLQUFLLENBQUNULElBQUk7b0JBQUVaO2lCQUFNO1lBQ2xDO1FBQ0Y7SUFDRjtJQUNBLE9BQU9xQjtBQUNUO0FBQ0F2QixPQUFPbUIsa0JBQWtCO0FBQ3pCLDZEQUE2RDtBQUU3RCxLQUFNQyxDQUFBQSxDQUVOIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2xvdWRzaGlmdC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3F1ZXJ5c3RyaW5nLXBhcnNlci9kaXN0LWNqcy9pbmRleC5qcz9mOTgwIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fbmFtZSA9ICh0YXJnZXQsIHZhbHVlKSA9PiBfX2RlZlByb3AodGFyZ2V0LCBcIm5hbWVcIiwgeyB2YWx1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0pO1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG5cbi8vIHNyYy9pbmRleC50c1xudmFyIHNyY19leHBvcnRzID0ge307XG5fX2V4cG9ydChzcmNfZXhwb3J0cywge1xuICBwYXJzZVF1ZXJ5U3RyaW5nOiAoKSA9PiBwYXJzZVF1ZXJ5U3RyaW5nXG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKHNyY19leHBvcnRzKTtcbmZ1bmN0aW9uIHBhcnNlUXVlcnlTdHJpbmcocXVlcnlzdHJpbmcpIHtcbiAgY29uc3QgcXVlcnkgPSB7fTtcbiAgcXVlcnlzdHJpbmcgPSBxdWVyeXN0cmluZy5yZXBsYWNlKC9eXFw/LywgXCJcIik7XG4gIGlmIChxdWVyeXN0cmluZykge1xuICAgIGZvciAoY29uc3QgcGFpciBvZiBxdWVyeXN0cmluZy5zcGxpdChcIiZcIikpIHtcbiAgICAgIGxldCBba2V5LCB2YWx1ZSA9IG51bGxdID0gcGFpci5zcGxpdChcIj1cIik7XG4gICAgICBrZXkgPSBkZWNvZGVVUklDb21wb25lbnQoa2V5KTtcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICB2YWx1ZSA9IGRlY29kZVVSSUNvbXBvbmVudCh2YWx1ZSk7XG4gICAgICB9XG4gICAgICBpZiAoIShrZXkgaW4gcXVlcnkpKSB7XG4gICAgICAgIHF1ZXJ5W2tleV0gPSB2YWx1ZTtcbiAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShxdWVyeVtrZXldKSkge1xuICAgICAgICBxdWVyeVtrZXldLnB1c2godmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcXVlcnlba2V5XSA9IFtxdWVyeVtrZXldLCB2YWx1ZV07XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBxdWVyeTtcbn1cbl9fbmFtZShwYXJzZVF1ZXJ5U3RyaW5nLCBcInBhcnNlUXVlcnlTdHJpbmdcIik7XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG5cbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBwYXJzZVF1ZXJ5U3RyaW5nXG59KTtcblxuIl0sIm5hbWVzIjpbIl9fZGVmUHJvcCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiX19nZXRPd25Qcm9wRGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9fZ2V0T3duUHJvcE5hbWVzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIl9faGFzT3duUHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiX19uYW1lIiwidGFyZ2V0IiwidmFsdWUiLCJjb25maWd1cmFibGUiLCJfX2V4cG9ydCIsImFsbCIsIm5hbWUiLCJnZXQiLCJlbnVtZXJhYmxlIiwiX19jb3B5UHJvcHMiLCJ0byIsImZyb20iLCJleGNlcHQiLCJkZXNjIiwia2V5IiwiY2FsbCIsIl9fdG9Db21tb25KUyIsIm1vZCIsInNyY19leHBvcnRzIiwicGFyc2VRdWVyeVN0cmluZyIsIm1vZHVsZSIsImV4cG9ydHMiLCJxdWVyeXN0cmluZyIsInF1ZXJ5IiwicmVwbGFjZSIsInBhaXIiLCJzcGxpdCIsImRlY29kZVVSSUNvbXBvbmVudCIsIkFycmF5IiwiaXNBcnJheSIsInB1c2giXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/querystring-parser/dist-cjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/service-error-classification/dist-cjs/index.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@smithy/service-error-classification/dist-cjs/index.js ***!
  \*****************************************************************************/
/***/ ((module) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value)=>__defProp(target, \"name\", {\n        value,\n        configurable: true\n    });\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n    isClockSkewCorrectedError: ()=>isClockSkewCorrectedError,\n    isClockSkewError: ()=>isClockSkewError,\n    isRetryableByTrait: ()=>isRetryableByTrait,\n    isServerError: ()=>isServerError,\n    isThrottlingError: ()=>isThrottlingError,\n    isTransientError: ()=>isTransientError\n});\nmodule.exports = __toCommonJS(src_exports);\n// src/constants.ts\nvar CLOCK_SKEW_ERROR_CODES = [\n    \"AuthFailure\",\n    \"InvalidSignatureException\",\n    \"RequestExpired\",\n    \"RequestInTheFuture\",\n    \"RequestTimeTooSkewed\",\n    \"SignatureDoesNotMatch\"\n];\nvar THROTTLING_ERROR_CODES = [\n    \"BandwidthLimitExceeded\",\n    \"EC2ThrottledException\",\n    \"LimitExceededException\",\n    \"PriorRequestNotComplete\",\n    \"ProvisionedThroughputExceededException\",\n    \"RequestLimitExceeded\",\n    \"RequestThrottled\",\n    \"RequestThrottledException\",\n    \"SlowDown\",\n    \"ThrottledException\",\n    \"Throttling\",\n    \"ThrottlingException\",\n    \"TooManyRequestsException\",\n    \"TransactionInProgressException\"\n];\nvar TRANSIENT_ERROR_CODES = [\n    \"TimeoutError\",\n    \"RequestTimeout\",\n    \"RequestTimeoutException\"\n];\nvar TRANSIENT_ERROR_STATUS_CODES = [\n    500,\n    502,\n    503,\n    504\n];\nvar NODEJS_TIMEOUT_ERROR_CODES = [\n    \"ECONNRESET\",\n    \"ECONNREFUSED\",\n    \"EPIPE\",\n    \"ETIMEDOUT\"\n];\n// src/index.ts\nvar isRetryableByTrait = /* @__PURE__ */ __name((error)=>error.$retryable !== void 0, \"isRetryableByTrait\");\nvar isClockSkewError = /* @__PURE__ */ __name((error)=>CLOCK_SKEW_ERROR_CODES.includes(error.name), \"isClockSkewError\");\nvar isClockSkewCorrectedError = /* @__PURE__ */ __name((error)=>error.$metadata?.clockSkewCorrected, \"isClockSkewCorrectedError\");\nvar isThrottlingError = /* @__PURE__ */ __name((error)=>error.$metadata?.httpStatusCode === 429 || THROTTLING_ERROR_CODES.includes(error.name) || error.$retryable?.throttling == true, \"isThrottlingError\");\nvar isTransientError = /* @__PURE__ */ __name((error, depth = 0)=>isClockSkewCorrectedError(error) || TRANSIENT_ERROR_CODES.includes(error.name) || NODEJS_TIMEOUT_ERROR_CODES.includes(error?.code || \"\") || TRANSIENT_ERROR_STATUS_CODES.includes(error.$metadata?.httpStatusCode || 0) || error.cause !== void 0 && depth <= 10 && isTransientError(error.cause, depth + 1), \"isTransientError\");\nvar isServerError = /* @__PURE__ */ __name((error)=>{\n    if (error.$metadata?.httpStatusCode !== void 0) {\n        const statusCode = error.$metadata.httpStatusCode;\n        if (500 <= statusCode && statusCode <= 599 && !isTransientError(error)) {\n            return true;\n        }\n        return false;\n    }\n    return false;\n}, \"isServerError\");\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/service-error-classification/dist-cjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/shared-ini-file-loader/dist-cjs/getHomeDir.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@smithy/shared-ini-file-loader/dist-cjs/getHomeDir.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getHomeDir = void 0;\nconst os_1 = __webpack_require__(/*! os */ \"os\");\nconst path_1 = __webpack_require__(/*! path */ \"path\");\nconst homeDirCache = {};\nconst getHomeDirCacheKey = ()=>{\n    if (process && process.geteuid) {\n        return `${process.geteuid()}`;\n    }\n    return \"DEFAULT\";\n};\nconst getHomeDir = ()=>{\n    const { HOME, USERPROFILE, HOMEPATH, HOMEDRIVE = `C:${path_1.sep}` } = process.env;\n    if (HOME) return HOME;\n    if (USERPROFILE) return USERPROFILE;\n    if (HOMEPATH) return `${HOMEDRIVE}${HOMEPATH}`;\n    const homeDirCacheKey = getHomeDirCacheKey();\n    if (!homeDirCache[homeDirCacheKey]) homeDirCache[homeDirCacheKey] = (0, os_1.homedir)();\n    return homeDirCache[homeDirCacheKey];\n};\nexports.getHomeDir = getHomeDir;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9zaGFyZWQtaW5pLWZpbGUtbG9hZGVyL2Rpc3QtY2pzL2dldEhvbWVEaXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGtCQUFrQixHQUFHLEtBQUs7QUFDMUIsTUFBTUcsT0FBT0MsbUJBQU9BLENBQUMsY0FBSTtBQUN6QixNQUFNQyxTQUFTRCxtQkFBT0EsQ0FBQyxrQkFBTTtBQUM3QixNQUFNRSxlQUFlLENBQUM7QUFDdEIsTUFBTUMscUJBQXFCO0lBQ3ZCLElBQUlDLFdBQVdBLFFBQVFDLE9BQU8sRUFBRTtRQUM1QixPQUFPLENBQUMsRUFBRUQsUUFBUUMsT0FBTyxHQUFHLENBQUM7SUFDakM7SUFDQSxPQUFPO0FBQ1g7QUFDQSxNQUFNUCxhQUFhO0lBQ2YsTUFBTSxFQUFFUSxJQUFJLEVBQUVDLFdBQVcsRUFBRUMsUUFBUSxFQUFFQyxZQUFZLENBQUMsRUFBRSxFQUFFUixPQUFPUyxHQUFHLENBQUMsQ0FBQyxFQUFFLEdBQUdOLFFBQVFPLEdBQUc7SUFDbEYsSUFBSUwsTUFDQSxPQUFPQTtJQUNYLElBQUlDLGFBQ0EsT0FBT0E7SUFDWCxJQUFJQyxVQUNBLE9BQU8sQ0FBQyxFQUFFQyxVQUFVLEVBQUVELFNBQVMsQ0FBQztJQUNwQyxNQUFNSSxrQkFBa0JUO0lBQ3hCLElBQUksQ0FBQ0QsWUFBWSxDQUFDVSxnQkFBZ0IsRUFDOUJWLFlBQVksQ0FBQ1UsZ0JBQWdCLEdBQUcsQ0FBQyxHQUFHYixLQUFLYyxPQUFPO0lBQ3BELE9BQU9YLFlBQVksQ0FBQ1UsZ0JBQWdCO0FBQ3hDO0FBQ0FoQixrQkFBa0IsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbG91ZHNoaWZ0Ly4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvc2hhcmVkLWluaS1maWxlLWxvYWRlci9kaXN0LWNqcy9nZXRIb21lRGlyLmpzP2FlOTEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdldEhvbWVEaXIgPSB2b2lkIDA7XG5jb25zdCBvc18xID0gcmVxdWlyZShcIm9zXCIpO1xuY29uc3QgcGF0aF8xID0gcmVxdWlyZShcInBhdGhcIik7XG5jb25zdCBob21lRGlyQ2FjaGUgPSB7fTtcbmNvbnN0IGdldEhvbWVEaXJDYWNoZUtleSA9ICgpID0+IHtcbiAgICBpZiAocHJvY2VzcyAmJiBwcm9jZXNzLmdldGV1aWQpIHtcbiAgICAgICAgcmV0dXJuIGAke3Byb2Nlc3MuZ2V0ZXVpZCgpfWA7XG4gICAgfVxuICAgIHJldHVybiBcIkRFRkFVTFRcIjtcbn07XG5jb25zdCBnZXRIb21lRGlyID0gKCkgPT4ge1xuICAgIGNvbnN0IHsgSE9NRSwgVVNFUlBST0ZJTEUsIEhPTUVQQVRILCBIT01FRFJJVkUgPSBgQzoke3BhdGhfMS5zZXB9YCB9ID0gcHJvY2Vzcy5lbnY7XG4gICAgaWYgKEhPTUUpXG4gICAgICAgIHJldHVybiBIT01FO1xuICAgIGlmIChVU0VSUFJPRklMRSlcbiAgICAgICAgcmV0dXJuIFVTRVJQUk9GSUxFO1xuICAgIGlmIChIT01FUEFUSClcbiAgICAgICAgcmV0dXJuIGAke0hPTUVEUklWRX0ke0hPTUVQQVRIfWA7XG4gICAgY29uc3QgaG9tZURpckNhY2hlS2V5ID0gZ2V0SG9tZURpckNhY2hlS2V5KCk7XG4gICAgaWYgKCFob21lRGlyQ2FjaGVbaG9tZURpckNhY2hlS2V5XSlcbiAgICAgICAgaG9tZURpckNhY2hlW2hvbWVEaXJDYWNoZUtleV0gPSAoMCwgb3NfMS5ob21lZGlyKSgpO1xuICAgIHJldHVybiBob21lRGlyQ2FjaGVbaG9tZURpckNhY2hlS2V5XTtcbn07XG5leHBvcnRzLmdldEhvbWVEaXIgPSBnZXRIb21lRGlyO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZ2V0SG9tZURpciIsIm9zXzEiLCJyZXF1aXJlIiwicGF0aF8xIiwiaG9tZURpckNhY2hlIiwiZ2V0SG9tZURpckNhY2hlS2V5IiwicHJvY2VzcyIsImdldGV1aWQiLCJIT01FIiwiVVNFUlBST0ZJTEUiLCJIT01FUEFUSCIsIkhPTUVEUklWRSIsInNlcCIsImVudiIsImhvbWVEaXJDYWNoZUtleSIsImhvbWVkaXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/shared-ini-file-loader/dist-cjs/getHomeDir.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/shared-ini-file-loader/dist-cjs/getSSOTokenFilepath.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@smithy/shared-ini-file-loader/dist-cjs/getSSOTokenFilepath.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getSSOTokenFilepath = void 0;\nconst crypto_1 = __webpack_require__(/*! crypto */ \"crypto\");\nconst path_1 = __webpack_require__(/*! path */ \"path\");\nconst getHomeDir_1 = __webpack_require__(/*! ./getHomeDir */ \"(rsc)/./node_modules/@smithy/shared-ini-file-loader/dist-cjs/getHomeDir.js\");\nconst getSSOTokenFilepath = (id)=>{\n    const hasher = (0, crypto_1.createHash)(\"sha1\");\n    const cacheName = hasher.update(id).digest(\"hex\");\n    return (0, path_1.join)((0, getHomeDir_1.getHomeDir)(), \".aws\", \"sso\", \"cache\", `${cacheName}.json`);\n};\nexports.getSSOTokenFilepath = getSSOTokenFilepath;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9zaGFyZWQtaW5pLWZpbGUtbG9hZGVyL2Rpc3QtY2pzL2dldFNTT1Rva2VuRmlsZXBhdGguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELDJCQUEyQixHQUFHLEtBQUs7QUFDbkMsTUFBTUcsV0FBV0MsbUJBQU9BLENBQUMsc0JBQVE7QUFDakMsTUFBTUMsU0FBU0QsbUJBQU9BLENBQUMsa0JBQU07QUFDN0IsTUFBTUUsZUFBZUYsbUJBQU9BLENBQUMsZ0dBQWM7QUFDM0MsTUFBTUYsc0JBQXNCLENBQUNLO0lBQ3pCLE1BQU1DLFNBQVMsQ0FBQyxHQUFHTCxTQUFTTSxVQUFVLEVBQUU7SUFDeEMsTUFBTUMsWUFBWUYsT0FBT0csTUFBTSxDQUFDSixJQUFJSyxNQUFNLENBQUM7SUFDM0MsT0FBTyxDQUFDLEdBQUdQLE9BQU9RLElBQUksRUFBRSxDQUFDLEdBQUdQLGFBQWFRLFVBQVUsS0FBSyxRQUFRLE9BQU8sU0FBUyxDQUFDLEVBQUVKLFVBQVUsS0FBSyxDQUFDO0FBQ3ZHO0FBQ0FWLDJCQUEyQixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL2Nsb3Vkc2hpZnQvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9zaGFyZWQtaW5pLWZpbGUtbG9hZGVyL2Rpc3QtY2pzL2dldFNTT1Rva2VuRmlsZXBhdGguanM/YzllNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0U1NPVG9rZW5GaWxlcGF0aCA9IHZvaWQgMDtcbmNvbnN0IGNyeXB0b18xID0gcmVxdWlyZShcImNyeXB0b1wiKTtcbmNvbnN0IHBhdGhfMSA9IHJlcXVpcmUoXCJwYXRoXCIpO1xuY29uc3QgZ2V0SG9tZURpcl8xID0gcmVxdWlyZShcIi4vZ2V0SG9tZURpclwiKTtcbmNvbnN0IGdldFNTT1Rva2VuRmlsZXBhdGggPSAoaWQpID0+IHtcbiAgICBjb25zdCBoYXNoZXIgPSAoMCwgY3J5cHRvXzEuY3JlYXRlSGFzaCkoXCJzaGExXCIpO1xuICAgIGNvbnN0IGNhY2hlTmFtZSA9IGhhc2hlci51cGRhdGUoaWQpLmRpZ2VzdChcImhleFwiKTtcbiAgICByZXR1cm4gKDAsIHBhdGhfMS5qb2luKSgoMCwgZ2V0SG9tZURpcl8xLmdldEhvbWVEaXIpKCksIFwiLmF3c1wiLCBcInNzb1wiLCBcImNhY2hlXCIsIGAke2NhY2hlTmFtZX0uanNvbmApO1xufTtcbmV4cG9ydHMuZ2V0U1NPVG9rZW5GaWxlcGF0aCA9IGdldFNTT1Rva2VuRmlsZXBhdGg7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJnZXRTU09Ub2tlbkZpbGVwYXRoIiwiY3J5cHRvXzEiLCJyZXF1aXJlIiwicGF0aF8xIiwiZ2V0SG9tZURpcl8xIiwiaWQiLCJoYXNoZXIiLCJjcmVhdGVIYXNoIiwiY2FjaGVOYW1lIiwidXBkYXRlIiwiZGlnZXN0Iiwiam9pbiIsImdldEhvbWVEaXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/shared-ini-file-loader/dist-cjs/getSSOTokenFilepath.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/shared-ini-file-loader/dist-cjs/getSSOTokenFromFile.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@smithy/shared-ini-file-loader/dist-cjs/getSSOTokenFromFile.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getSSOTokenFromFile = void 0;\nconst fs_1 = __webpack_require__(/*! fs */ \"fs\");\nconst getSSOTokenFilepath_1 = __webpack_require__(/*! ./getSSOTokenFilepath */ \"(rsc)/./node_modules/@smithy/shared-ini-file-loader/dist-cjs/getSSOTokenFilepath.js\");\nconst { readFile } = fs_1.promises;\nconst getSSOTokenFromFile = async (id)=>{\n    const ssoTokenFilepath = (0, getSSOTokenFilepath_1.getSSOTokenFilepath)(id);\n    const ssoTokenText = await readFile(ssoTokenFilepath, \"utf8\");\n    return JSON.parse(ssoTokenText);\n};\nexports.getSSOTokenFromFile = getSSOTokenFromFile;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9zaGFyZWQtaW5pLWZpbGUtbG9hZGVyL2Rpc3QtY2pzL2dldFNTT1Rva2VuRnJvbUZpbGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELDJCQUEyQixHQUFHLEtBQUs7QUFDbkMsTUFBTUcsT0FBT0MsbUJBQU9BLENBQUMsY0FBSTtBQUN6QixNQUFNQyx3QkFBd0JELG1CQUFPQSxDQUFDLGtIQUF1QjtBQUM3RCxNQUFNLEVBQUVFLFFBQVEsRUFBRSxHQUFHSCxLQUFLSSxRQUFRO0FBQ2xDLE1BQU1MLHNCQUFzQixPQUFPTTtJQUMvQixNQUFNQyxtQkFBbUIsQ0FBQyxHQUFHSixzQkFBc0JLLG1CQUFtQixFQUFFRjtJQUN4RSxNQUFNRyxlQUFlLE1BQU1MLFNBQVNHLGtCQUFrQjtJQUN0RCxPQUFPRyxLQUFLQyxLQUFLLENBQUNGO0FBQ3RCO0FBQ0FYLDJCQUEyQixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL2Nsb3Vkc2hpZnQvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9zaGFyZWQtaW5pLWZpbGUtbG9hZGVyL2Rpc3QtY2pzL2dldFNTT1Rva2VuRnJvbUZpbGUuanM/NDBhOSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0U1NPVG9rZW5Gcm9tRmlsZSA9IHZvaWQgMDtcbmNvbnN0IGZzXzEgPSByZXF1aXJlKFwiZnNcIik7XG5jb25zdCBnZXRTU09Ub2tlbkZpbGVwYXRoXzEgPSByZXF1aXJlKFwiLi9nZXRTU09Ub2tlbkZpbGVwYXRoXCIpO1xuY29uc3QgeyByZWFkRmlsZSB9ID0gZnNfMS5wcm9taXNlcztcbmNvbnN0IGdldFNTT1Rva2VuRnJvbUZpbGUgPSBhc3luYyAoaWQpID0+IHtcbiAgICBjb25zdCBzc29Ub2tlbkZpbGVwYXRoID0gKDAsIGdldFNTT1Rva2VuRmlsZXBhdGhfMS5nZXRTU09Ub2tlbkZpbGVwYXRoKShpZCk7XG4gICAgY29uc3Qgc3NvVG9rZW5UZXh0ID0gYXdhaXQgcmVhZEZpbGUoc3NvVG9rZW5GaWxlcGF0aCwgXCJ1dGY4XCIpO1xuICAgIHJldHVybiBKU09OLnBhcnNlKHNzb1Rva2VuVGV4dCk7XG59O1xuZXhwb3J0cy5nZXRTU09Ub2tlbkZyb21GaWxlID0gZ2V0U1NPVG9rZW5Gcm9tRmlsZTtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImdldFNTT1Rva2VuRnJvbUZpbGUiLCJmc18xIiwicmVxdWlyZSIsImdldFNTT1Rva2VuRmlsZXBhdGhfMSIsInJlYWRGaWxlIiwicHJvbWlzZXMiLCJpZCIsInNzb1Rva2VuRmlsZXBhdGgiLCJnZXRTU09Ub2tlbkZpbGVwYXRoIiwic3NvVG9rZW5UZXh0IiwiSlNPTiIsInBhcnNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/shared-ini-file-loader/dist-cjs/getSSOTokenFromFile.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/shared-ini-file-loader/dist-cjs/index.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@smithy/shared-ini-file-loader/dist-cjs/index.js ***!
  \***********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value)=>__defProp(target, \"name\", {\n        value,\n        configurable: true\n    });\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __reExport = (target, mod, secondTarget)=>(__copyProps(target, mod, \"default\"), secondTarget && __copyProps(secondTarget, mod, \"default\"));\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n    CONFIG_PREFIX_SEPARATOR: ()=>CONFIG_PREFIX_SEPARATOR,\n    DEFAULT_PROFILE: ()=>DEFAULT_PROFILE,\n    ENV_PROFILE: ()=>ENV_PROFILE,\n    getProfileName: ()=>getProfileName,\n    loadSharedConfigFiles: ()=>loadSharedConfigFiles,\n    loadSsoSessionData: ()=>loadSsoSessionData,\n    parseKnownFiles: ()=>parseKnownFiles\n});\nmodule.exports = __toCommonJS(src_exports);\n__reExport(src_exports, __webpack_require__(/*! ././getHomeDir */ \"(rsc)/./node_modules/@smithy/shared-ini-file-loader/dist-cjs/getHomeDir.js\"), module.exports);\n// src/getProfileName.ts\nvar ENV_PROFILE = \"AWS_PROFILE\";\nvar DEFAULT_PROFILE = \"default\";\nvar getProfileName = /* @__PURE__ */ __name((init)=>init.profile || process.env[ENV_PROFILE] || DEFAULT_PROFILE, \"getProfileName\");\n// src/index.ts\n__reExport(src_exports, __webpack_require__(/*! ././getSSOTokenFilepath */ \"(rsc)/./node_modules/@smithy/shared-ini-file-loader/dist-cjs/getSSOTokenFilepath.js\"), module.exports);\n__reExport(src_exports, __webpack_require__(/*! ././getSSOTokenFromFile */ \"(rsc)/./node_modules/@smithy/shared-ini-file-loader/dist-cjs/getSSOTokenFromFile.js\"), module.exports);\n// src/loadSharedConfigFiles.ts\n// src/getConfigData.ts\nvar import_types = __webpack_require__(/*! @smithy/types */ \"(rsc)/./node_modules/@smithy/types/dist-cjs/index.js\");\nvar getConfigData = /* @__PURE__ */ __name((data)=>Object.entries(data).filter(([key])=>{\n        const indexOfSeparator = key.indexOf(CONFIG_PREFIX_SEPARATOR);\n        if (indexOfSeparator === -1) {\n            return false;\n        }\n        return Object.values(import_types.IniSectionType).includes(key.substring(0, indexOfSeparator));\n    }).reduce((acc, [key, value])=>{\n        const indexOfSeparator = key.indexOf(CONFIG_PREFIX_SEPARATOR);\n        const updatedKey = key.substring(0, indexOfSeparator) === import_types.IniSectionType.PROFILE ? key.substring(indexOfSeparator + 1) : key;\n        acc[updatedKey] = value;\n        return acc;\n    }, {\n        // Populate default profile, if present.\n        ...data.default && {\n            default: data.default\n        }\n    }), \"getConfigData\");\n// src/getConfigFilepath.ts\nvar import_path = __webpack_require__(/*! path */ \"path\");\nvar import_getHomeDir = __webpack_require__(/*! ././getHomeDir */ \"(rsc)/./node_modules/@smithy/shared-ini-file-loader/dist-cjs/getHomeDir.js\");\nvar ENV_CONFIG_PATH = \"AWS_CONFIG_FILE\";\nvar getConfigFilepath = /* @__PURE__ */ __name(()=>process.env[ENV_CONFIG_PATH] || (0, import_path.join)((0, import_getHomeDir.getHomeDir)(), \".aws\", \"config\"), \"getConfigFilepath\");\n// src/getCredentialsFilepath.ts\nvar import_getHomeDir2 = __webpack_require__(/*! ././getHomeDir */ \"(rsc)/./node_modules/@smithy/shared-ini-file-loader/dist-cjs/getHomeDir.js\");\nvar ENV_CREDENTIALS_PATH = \"AWS_SHARED_CREDENTIALS_FILE\";\nvar getCredentialsFilepath = /* @__PURE__ */ __name(()=>process.env[ENV_CREDENTIALS_PATH] || (0, import_path.join)((0, import_getHomeDir2.getHomeDir)(), \".aws\", \"credentials\"), \"getCredentialsFilepath\");\n// src/loadSharedConfigFiles.ts\nvar import_getHomeDir3 = __webpack_require__(/*! ././getHomeDir */ \"(rsc)/./node_modules/@smithy/shared-ini-file-loader/dist-cjs/getHomeDir.js\");\n// src/parseIni.ts\nvar prefixKeyRegex = /^([\\w-]+)\\s([\"'])?([\\w-@\\+\\.%:/]+)\\2$/;\nvar profileNameBlockList = [\n    \"__proto__\",\n    \"profile __proto__\"\n];\nvar parseIni = /* @__PURE__ */ __name((iniData)=>{\n    const map = {};\n    let currentSection;\n    let currentSubSection;\n    for (const iniLine of iniData.split(/\\r?\\n/)){\n        const trimmedLine = iniLine.split(/(^|\\s)[;#]/)[0].trim();\n        const isSection = trimmedLine[0] === \"[\" && trimmedLine[trimmedLine.length - 1] === \"]\";\n        if (isSection) {\n            currentSection = void 0;\n            currentSubSection = void 0;\n            const sectionName = trimmedLine.substring(1, trimmedLine.length - 1);\n            const matches = prefixKeyRegex.exec(sectionName);\n            if (matches) {\n                const [, prefix, , name] = matches;\n                if (Object.values(import_types.IniSectionType).includes(prefix)) {\n                    currentSection = [\n                        prefix,\n                        name\n                    ].join(CONFIG_PREFIX_SEPARATOR);\n                }\n            } else {\n                currentSection = sectionName;\n            }\n            if (profileNameBlockList.includes(sectionName)) {\n                throw new Error(`Found invalid profile name \"${sectionName}\"`);\n            }\n        } else if (currentSection) {\n            const indexOfEqualsSign = trimmedLine.indexOf(\"=\");\n            if (![\n                0,\n                -1\n            ].includes(indexOfEqualsSign)) {\n                const [name, value] = [\n                    trimmedLine.substring(0, indexOfEqualsSign).trim(),\n                    trimmedLine.substring(indexOfEqualsSign + 1).trim()\n                ];\n                if (value === \"\") {\n                    currentSubSection = name;\n                } else {\n                    if (currentSubSection && iniLine.trimStart() === iniLine) {\n                        currentSubSection = void 0;\n                    }\n                    map[currentSection] = map[currentSection] || {};\n                    const key = currentSubSection ? [\n                        currentSubSection,\n                        name\n                    ].join(CONFIG_PREFIX_SEPARATOR) : name;\n                    map[currentSection][key] = value;\n                }\n            }\n        }\n    }\n    return map;\n}, \"parseIni\");\n// src/loadSharedConfigFiles.ts\nvar import_slurpFile = __webpack_require__(/*! ././slurpFile */ \"(rsc)/./node_modules/@smithy/shared-ini-file-loader/dist-cjs/slurpFile.js\");\nvar swallowError = /* @__PURE__ */ __name(()=>({}), \"swallowError\");\nvar CONFIG_PREFIX_SEPARATOR = \".\";\nvar loadSharedConfigFiles = /* @__PURE__ */ __name(async (init = {})=>{\n    const { filepath = getCredentialsFilepath(), configFilepath = getConfigFilepath() } = init;\n    const homeDir = (0, import_getHomeDir3.getHomeDir)();\n    const relativeHomeDirPrefix = \"~/\";\n    let resolvedFilepath = filepath;\n    if (filepath.startsWith(relativeHomeDirPrefix)) {\n        resolvedFilepath = (0, import_path.join)(homeDir, filepath.slice(2));\n    }\n    let resolvedConfigFilepath = configFilepath;\n    if (configFilepath.startsWith(relativeHomeDirPrefix)) {\n        resolvedConfigFilepath = (0, import_path.join)(homeDir, configFilepath.slice(2));\n    }\n    const parsedFiles = await Promise.all([\n        (0, import_slurpFile.slurpFile)(resolvedConfigFilepath, {\n            ignoreCache: init.ignoreCache\n        }).then(parseIni).then(getConfigData).catch(swallowError),\n        (0, import_slurpFile.slurpFile)(resolvedFilepath, {\n            ignoreCache: init.ignoreCache\n        }).then(parseIni).catch(swallowError)\n    ]);\n    return {\n        configFile: parsedFiles[0],\n        credentialsFile: parsedFiles[1]\n    };\n}, \"loadSharedConfigFiles\");\n// src/getSsoSessionData.ts\nvar getSsoSessionData = /* @__PURE__ */ __name((data)=>Object.entries(data).filter(([key])=>key.startsWith(import_types.IniSectionType.SSO_SESSION + CONFIG_PREFIX_SEPARATOR)).reduce((acc, [key, value])=>({\n            ...acc,\n            [key.substring(key.indexOf(CONFIG_PREFIX_SEPARATOR) + 1)]: value\n        }), {}), \"getSsoSessionData\");\n// src/loadSsoSessionData.ts\nvar import_slurpFile2 = __webpack_require__(/*! ././slurpFile */ \"(rsc)/./node_modules/@smithy/shared-ini-file-loader/dist-cjs/slurpFile.js\");\nvar swallowError2 = /* @__PURE__ */ __name(()=>({}), \"swallowError\");\nvar loadSsoSessionData = /* @__PURE__ */ __name(async (init = {})=>(0, import_slurpFile2.slurpFile)(init.configFilepath ?? getConfigFilepath()).then(parseIni).then(getSsoSessionData).catch(swallowError2), \"loadSsoSessionData\");\n// src/mergeConfigFiles.ts\nvar mergeConfigFiles = /* @__PURE__ */ __name((...files)=>{\n    const merged = {};\n    for (const file of files){\n        for (const [key, values] of Object.entries(file)){\n            if (merged[key] !== void 0) {\n                Object.assign(merged[key], values);\n            } else {\n                merged[key] = values;\n            }\n        }\n    }\n    return merged;\n}, \"mergeConfigFiles\");\n// src/parseKnownFiles.ts\nvar parseKnownFiles = /* @__PURE__ */ __name(async (init)=>{\n    const parsedFiles = await loadSharedConfigFiles(init);\n    return mergeConfigFiles(parsedFiles.configFile, parsedFiles.credentialsFile);\n}, \"parseKnownFiles\");\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/shared-ini-file-loader/dist-cjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/shared-ini-file-loader/dist-cjs/slurpFile.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@smithy/shared-ini-file-loader/dist-cjs/slurpFile.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.slurpFile = void 0;\nconst fs_1 = __webpack_require__(/*! fs */ \"fs\");\nconst { readFile } = fs_1.promises;\nconst filePromisesHash = {};\nconst slurpFile = (path, options)=>{\n    if (!filePromisesHash[path] || (options === null || options === void 0 ? void 0 : options.ignoreCache)) {\n        filePromisesHash[path] = readFile(path, \"utf8\");\n    }\n    return filePromisesHash[path];\n};\nexports.slurpFile = slurpFile;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9zaGFyZWQtaW5pLWZpbGUtbG9hZGVyL2Rpc3QtY2pzL3NsdXJwRmlsZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsaUJBQWlCLEdBQUcsS0FBSztBQUN6QixNQUFNRyxPQUFPQyxtQkFBT0EsQ0FBQyxjQUFJO0FBQ3pCLE1BQU0sRUFBRUMsUUFBUSxFQUFFLEdBQUdGLEtBQUtHLFFBQVE7QUFDbEMsTUFBTUMsbUJBQW1CLENBQUM7QUFDMUIsTUFBTUwsWUFBWSxDQUFDTSxNQUFNQztJQUNyQixJQUFJLENBQUNGLGdCQUFnQixDQUFDQyxLQUFLLElBQUtDLENBQUFBLFlBQVksUUFBUUEsWUFBWSxLQUFLLElBQUksS0FBSyxJQUFJQSxRQUFRQyxXQUFXLEdBQUc7UUFDcEdILGdCQUFnQixDQUFDQyxLQUFLLEdBQUdILFNBQVNHLE1BQU07SUFDNUM7SUFDQSxPQUFPRCxnQkFBZ0IsQ0FBQ0MsS0FBSztBQUNqQztBQUNBUixpQkFBaUIsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbG91ZHNoaWZ0Ly4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvc2hhcmVkLWluaS1maWxlLWxvYWRlci9kaXN0LWNqcy9zbHVycEZpbGUuanM/N2VkOCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc2x1cnBGaWxlID0gdm9pZCAwO1xuY29uc3QgZnNfMSA9IHJlcXVpcmUoXCJmc1wiKTtcbmNvbnN0IHsgcmVhZEZpbGUgfSA9IGZzXzEucHJvbWlzZXM7XG5jb25zdCBmaWxlUHJvbWlzZXNIYXNoID0ge307XG5jb25zdCBzbHVycEZpbGUgPSAocGF0aCwgb3B0aW9ucykgPT4ge1xuICAgIGlmICghZmlsZVByb21pc2VzSGFzaFtwYXRoXSB8fCAob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmlnbm9yZUNhY2hlKSkge1xuICAgICAgICBmaWxlUHJvbWlzZXNIYXNoW3BhdGhdID0gcmVhZEZpbGUocGF0aCwgXCJ1dGY4XCIpO1xuICAgIH1cbiAgICByZXR1cm4gZmlsZVByb21pc2VzSGFzaFtwYXRoXTtcbn07XG5leHBvcnRzLnNsdXJwRmlsZSA9IHNsdXJwRmlsZTtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInNsdXJwRmlsZSIsImZzXzEiLCJyZXF1aXJlIiwicmVhZEZpbGUiLCJwcm9taXNlcyIsImZpbGVQcm9taXNlc0hhc2giLCJwYXRoIiwib3B0aW9ucyIsImlnbm9yZUNhY2hlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/shared-ini-file-loader/dist-cjs/slurpFile.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/signature-v4/dist-cjs/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@smithy/signature-v4/dist-cjs/index.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value)=>__defProp(target, \"name\", {\n        value,\n        configurable: true\n    });\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n    ALGORITHM_IDENTIFIER: ()=>ALGORITHM_IDENTIFIER,\n    ALGORITHM_IDENTIFIER_V4A: ()=>ALGORITHM_IDENTIFIER_V4A,\n    ALGORITHM_QUERY_PARAM: ()=>ALGORITHM_QUERY_PARAM,\n    ALWAYS_UNSIGNABLE_HEADERS: ()=>ALWAYS_UNSIGNABLE_HEADERS,\n    AMZ_DATE_HEADER: ()=>AMZ_DATE_HEADER,\n    AMZ_DATE_QUERY_PARAM: ()=>AMZ_DATE_QUERY_PARAM,\n    AUTH_HEADER: ()=>AUTH_HEADER,\n    CREDENTIAL_QUERY_PARAM: ()=>CREDENTIAL_QUERY_PARAM,\n    DATE_HEADER: ()=>DATE_HEADER,\n    EVENT_ALGORITHM_IDENTIFIER: ()=>EVENT_ALGORITHM_IDENTIFIER,\n    EXPIRES_QUERY_PARAM: ()=>EXPIRES_QUERY_PARAM,\n    GENERATED_HEADERS: ()=>GENERATED_HEADERS,\n    HOST_HEADER: ()=>HOST_HEADER,\n    KEY_TYPE_IDENTIFIER: ()=>KEY_TYPE_IDENTIFIER,\n    MAX_CACHE_SIZE: ()=>MAX_CACHE_SIZE,\n    MAX_PRESIGNED_TTL: ()=>MAX_PRESIGNED_TTL,\n    PROXY_HEADER_PATTERN: ()=>PROXY_HEADER_PATTERN,\n    REGION_SET_PARAM: ()=>REGION_SET_PARAM,\n    SEC_HEADER_PATTERN: ()=>SEC_HEADER_PATTERN,\n    SHA256_HEADER: ()=>SHA256_HEADER,\n    SIGNATURE_HEADER: ()=>SIGNATURE_HEADER,\n    SIGNATURE_QUERY_PARAM: ()=>SIGNATURE_QUERY_PARAM,\n    SIGNED_HEADERS_QUERY_PARAM: ()=>SIGNED_HEADERS_QUERY_PARAM,\n    SignatureV4: ()=>SignatureV4,\n    SignatureV4Base: ()=>SignatureV4Base,\n    TOKEN_HEADER: ()=>TOKEN_HEADER,\n    TOKEN_QUERY_PARAM: ()=>TOKEN_QUERY_PARAM,\n    UNSIGNABLE_PATTERNS: ()=>UNSIGNABLE_PATTERNS,\n    UNSIGNED_PAYLOAD: ()=>UNSIGNED_PAYLOAD,\n    clearCredentialCache: ()=>clearCredentialCache,\n    createScope: ()=>createScope,\n    getCanonicalHeaders: ()=>getCanonicalHeaders,\n    getCanonicalQuery: ()=>getCanonicalQuery,\n    getPayloadHash: ()=>getPayloadHash,\n    getSigningKey: ()=>getSigningKey,\n    hasHeader: ()=>hasHeader,\n    moveHeadersToQuery: ()=>moveHeadersToQuery,\n    prepareRequest: ()=>prepareRequest,\n    signatureV4aContainer: ()=>signatureV4aContainer\n});\nmodule.exports = __toCommonJS(src_exports);\n// src/SignatureV4.ts\nvar import_util_utf85 = __webpack_require__(/*! @smithy/util-utf8 */ \"(rsc)/./node_modules/@smithy/util-utf8/dist-cjs/index.js\");\n// src/constants.ts\nvar ALGORITHM_QUERY_PARAM = \"X-Amz-Algorithm\";\nvar CREDENTIAL_QUERY_PARAM = \"X-Amz-Credential\";\nvar AMZ_DATE_QUERY_PARAM = \"X-Amz-Date\";\nvar SIGNED_HEADERS_QUERY_PARAM = \"X-Amz-SignedHeaders\";\nvar EXPIRES_QUERY_PARAM = \"X-Amz-Expires\";\nvar SIGNATURE_QUERY_PARAM = \"X-Amz-Signature\";\nvar TOKEN_QUERY_PARAM = \"X-Amz-Security-Token\";\nvar REGION_SET_PARAM = \"X-Amz-Region-Set\";\nvar AUTH_HEADER = \"authorization\";\nvar AMZ_DATE_HEADER = AMZ_DATE_QUERY_PARAM.toLowerCase();\nvar DATE_HEADER = \"date\";\nvar GENERATED_HEADERS = [\n    AUTH_HEADER,\n    AMZ_DATE_HEADER,\n    DATE_HEADER\n];\nvar SIGNATURE_HEADER = SIGNATURE_QUERY_PARAM.toLowerCase();\nvar SHA256_HEADER = \"x-amz-content-sha256\";\nvar TOKEN_HEADER = TOKEN_QUERY_PARAM.toLowerCase();\nvar HOST_HEADER = \"host\";\nvar ALWAYS_UNSIGNABLE_HEADERS = {\n    authorization: true,\n    \"cache-control\": true,\n    connection: true,\n    expect: true,\n    from: true,\n    \"keep-alive\": true,\n    \"max-forwards\": true,\n    pragma: true,\n    referer: true,\n    te: true,\n    trailer: true,\n    \"transfer-encoding\": true,\n    upgrade: true,\n    \"user-agent\": true,\n    \"x-amzn-trace-id\": true\n};\nvar PROXY_HEADER_PATTERN = /^proxy-/;\nvar SEC_HEADER_PATTERN = /^sec-/;\nvar UNSIGNABLE_PATTERNS = [\n    /^proxy-/i,\n    /^sec-/i\n];\nvar ALGORITHM_IDENTIFIER = \"AWS4-HMAC-SHA256\";\nvar ALGORITHM_IDENTIFIER_V4A = \"AWS4-ECDSA-P256-SHA256\";\nvar EVENT_ALGORITHM_IDENTIFIER = \"AWS4-HMAC-SHA256-PAYLOAD\";\nvar UNSIGNED_PAYLOAD = \"UNSIGNED-PAYLOAD\";\nvar MAX_CACHE_SIZE = 50;\nvar KEY_TYPE_IDENTIFIER = \"aws4_request\";\nvar MAX_PRESIGNED_TTL = 60 * 60 * 24 * 7;\n// src/credentialDerivation.ts\nvar import_util_hex_encoding = __webpack_require__(/*! @smithy/util-hex-encoding */ \"(rsc)/./node_modules/@smithy/util-hex-encoding/dist-cjs/index.js\");\nvar import_util_utf8 = __webpack_require__(/*! @smithy/util-utf8 */ \"(rsc)/./node_modules/@smithy/util-utf8/dist-cjs/index.js\");\nvar signingKeyCache = {};\nvar cacheQueue = [];\nvar createScope = /* @__PURE__ */ __name((shortDate, region, service)=>`${shortDate}/${region}/${service}/${KEY_TYPE_IDENTIFIER}`, \"createScope\");\nvar getSigningKey = /* @__PURE__ */ __name(async (sha256Constructor, credentials, shortDate, region, service)=>{\n    const credsHash = await hmac(sha256Constructor, credentials.secretAccessKey, credentials.accessKeyId);\n    const cacheKey = `${shortDate}:${region}:${service}:${(0, import_util_hex_encoding.toHex)(credsHash)}:${credentials.sessionToken}`;\n    if (cacheKey in signingKeyCache) {\n        return signingKeyCache[cacheKey];\n    }\n    cacheQueue.push(cacheKey);\n    while(cacheQueue.length > MAX_CACHE_SIZE){\n        delete signingKeyCache[cacheQueue.shift()];\n    }\n    let key = `AWS4${credentials.secretAccessKey}`;\n    for (const signable of [\n        shortDate,\n        region,\n        service,\n        KEY_TYPE_IDENTIFIER\n    ]){\n        key = await hmac(sha256Constructor, key, signable);\n    }\n    return signingKeyCache[cacheKey] = key;\n}, \"getSigningKey\");\nvar clearCredentialCache = /* @__PURE__ */ __name(()=>{\n    cacheQueue.length = 0;\n    Object.keys(signingKeyCache).forEach((cacheKey)=>{\n        delete signingKeyCache[cacheKey];\n    });\n}, \"clearCredentialCache\");\nvar hmac = /* @__PURE__ */ __name((ctor, secret, data)=>{\n    const hash = new ctor(secret);\n    hash.update((0, import_util_utf8.toUint8Array)(data));\n    return hash.digest();\n}, \"hmac\");\n// src/getCanonicalHeaders.ts\nvar getCanonicalHeaders = /* @__PURE__ */ __name(({ headers }, unsignableHeaders, signableHeaders)=>{\n    const canonical = {};\n    for (const headerName of Object.keys(headers).sort()){\n        if (headers[headerName] == void 0) {\n            continue;\n        }\n        const canonicalHeaderName = headerName.toLowerCase();\n        if (canonicalHeaderName in ALWAYS_UNSIGNABLE_HEADERS || unsignableHeaders?.has(canonicalHeaderName) || PROXY_HEADER_PATTERN.test(canonicalHeaderName) || SEC_HEADER_PATTERN.test(canonicalHeaderName)) {\n            if (!signableHeaders || signableHeaders && !signableHeaders.has(canonicalHeaderName)) {\n                continue;\n            }\n        }\n        canonical[canonicalHeaderName] = headers[headerName].trim().replace(/\\s+/g, \" \");\n    }\n    return canonical;\n}, \"getCanonicalHeaders\");\n// src/getPayloadHash.ts\nvar import_is_array_buffer = __webpack_require__(/*! @smithy/is-array-buffer */ \"(rsc)/./node_modules/@smithy/is-array-buffer/dist-cjs/index.js\");\nvar import_util_utf82 = __webpack_require__(/*! @smithy/util-utf8 */ \"(rsc)/./node_modules/@smithy/util-utf8/dist-cjs/index.js\");\nvar getPayloadHash = /* @__PURE__ */ __name(async ({ headers, body }, hashConstructor)=>{\n    for (const headerName of Object.keys(headers)){\n        if (headerName.toLowerCase() === SHA256_HEADER) {\n            return headers[headerName];\n        }\n    }\n    if (body == void 0) {\n        return \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\";\n    } else if (typeof body === \"string\" || ArrayBuffer.isView(body) || (0, import_is_array_buffer.isArrayBuffer)(body)) {\n        const hashCtor = new hashConstructor();\n        hashCtor.update((0, import_util_utf82.toUint8Array)(body));\n        return (0, import_util_hex_encoding.toHex)(await hashCtor.digest());\n    }\n    return UNSIGNED_PAYLOAD;\n}, \"getPayloadHash\");\n// src/HeaderFormatter.ts\nvar import_util_utf83 = __webpack_require__(/*! @smithy/util-utf8 */ \"(rsc)/./node_modules/@smithy/util-utf8/dist-cjs/index.js\");\nvar HeaderFormatter = class {\n    static{\n        __name(this, \"HeaderFormatter\");\n    }\n    format(headers) {\n        const chunks = [];\n        for (const headerName of Object.keys(headers)){\n            const bytes = (0, import_util_utf83.fromUtf8)(headerName);\n            chunks.push(Uint8Array.from([\n                bytes.byteLength\n            ]), bytes, this.formatHeaderValue(headers[headerName]));\n        }\n        const out = new Uint8Array(chunks.reduce((carry, bytes)=>carry + bytes.byteLength, 0));\n        let position = 0;\n        for (const chunk of chunks){\n            out.set(chunk, position);\n            position += chunk.byteLength;\n        }\n        return out;\n    }\n    formatHeaderValue(header) {\n        switch(header.type){\n            case \"boolean\":\n                return Uint8Array.from([\n                    header.value ? 0 /* boolTrue */  : 1 /* boolFalse */ \n                ]);\n            case \"byte\":\n                return Uint8Array.from([\n                    2 /* byte */ ,\n                    header.value\n                ]);\n            case \"short\":\n                const shortView = new DataView(new ArrayBuffer(3));\n                shortView.setUint8(0, 3 /* short */ );\n                shortView.setInt16(1, header.value, false);\n                return new Uint8Array(shortView.buffer);\n            case \"integer\":\n                const intView = new DataView(new ArrayBuffer(5));\n                intView.setUint8(0, 4 /* integer */ );\n                intView.setInt32(1, header.value, false);\n                return new Uint8Array(intView.buffer);\n            case \"long\":\n                const longBytes = new Uint8Array(9);\n                longBytes[0] = 5 /* long */ ;\n                longBytes.set(header.value.bytes, 1);\n                return longBytes;\n            case \"binary\":\n                const binView = new DataView(new ArrayBuffer(3 + header.value.byteLength));\n                binView.setUint8(0, 6 /* byteArray */ );\n                binView.setUint16(1, header.value.byteLength, false);\n                const binBytes = new Uint8Array(binView.buffer);\n                binBytes.set(header.value, 3);\n                return binBytes;\n            case \"string\":\n                const utf8Bytes = (0, import_util_utf83.fromUtf8)(header.value);\n                const strView = new DataView(new ArrayBuffer(3 + utf8Bytes.byteLength));\n                strView.setUint8(0, 7 /* string */ );\n                strView.setUint16(1, utf8Bytes.byteLength, false);\n                const strBytes = new Uint8Array(strView.buffer);\n                strBytes.set(utf8Bytes, 3);\n                return strBytes;\n            case \"timestamp\":\n                const tsBytes = new Uint8Array(9);\n                tsBytes[0] = 8 /* timestamp */ ;\n                tsBytes.set(Int64.fromNumber(header.value.valueOf()).bytes, 1);\n                return tsBytes;\n            case \"uuid\":\n                if (!UUID_PATTERN.test(header.value)) {\n                    throw new Error(`Invalid UUID received: ${header.value}`);\n                }\n                const uuidBytes = new Uint8Array(17);\n                uuidBytes[0] = 9 /* uuid */ ;\n                uuidBytes.set((0, import_util_hex_encoding.fromHex)(header.value.replace(/\\-/g, \"\")), 1);\n                return uuidBytes;\n        }\n    }\n};\nvar UUID_PATTERN = /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;\nvar Int64 = class _Int64 {\n    constructor(bytes){\n        this.bytes = bytes;\n        if (bytes.byteLength !== 8) {\n            throw new Error(\"Int64 buffers must be exactly 8 bytes\");\n        }\n    }\n    static{\n        __name(this, \"Int64\");\n    }\n    static fromNumber(number) {\n        if (number > 9223372036854776e3 || number < -9223372036854776e3) {\n            throw new Error(`${number} is too large (or, if negative, too small) to represent as an Int64`);\n        }\n        const bytes = new Uint8Array(8);\n        for(let i = 7, remaining = Math.abs(Math.round(number)); i > -1 && remaining > 0; i--, remaining /= 256){\n            bytes[i] = remaining;\n        }\n        if (number < 0) {\n            negate(bytes);\n        }\n        return new _Int64(bytes);\n    }\n    /**\n   * Called implicitly by infix arithmetic operators.\n   */ valueOf() {\n        const bytes = this.bytes.slice(0);\n        const negative = bytes[0] & 128;\n        if (negative) {\n            negate(bytes);\n        }\n        return parseInt((0, import_util_hex_encoding.toHex)(bytes), 16) * (negative ? -1 : 1);\n    }\n    toString() {\n        return String(this.valueOf());\n    }\n};\nfunction negate(bytes) {\n    for(let i = 0; i < 8; i++){\n        bytes[i] ^= 255;\n    }\n    for(let i = 7; i > -1; i--){\n        bytes[i]++;\n        if (bytes[i] !== 0) break;\n    }\n}\n__name(negate, \"negate\");\n// src/headerUtil.ts\nvar hasHeader = /* @__PURE__ */ __name((soughtHeader, headers)=>{\n    soughtHeader = soughtHeader.toLowerCase();\n    for (const headerName of Object.keys(headers)){\n        if (soughtHeader === headerName.toLowerCase()) {\n            return true;\n        }\n    }\n    return false;\n}, \"hasHeader\");\n// src/moveHeadersToQuery.ts\nvar import_protocol_http = __webpack_require__(/*! @smithy/protocol-http */ \"(rsc)/./node_modules/@smithy/protocol-http/dist-cjs/index.js\");\nvar moveHeadersToQuery = /* @__PURE__ */ __name((request, options = {})=>{\n    const { headers, query = {} } = import_protocol_http.HttpRequest.clone(request);\n    for (const name of Object.keys(headers)){\n        const lname = name.toLowerCase();\n        if (lname.slice(0, 6) === \"x-amz-\" && !options.unhoistableHeaders?.has(lname) || options.hoistableHeaders?.has(lname)) {\n            query[name] = headers[name];\n            delete headers[name];\n        }\n    }\n    return {\n        ...request,\n        headers,\n        query\n    };\n}, \"moveHeadersToQuery\");\n// src/prepareRequest.ts\nvar prepareRequest = /* @__PURE__ */ __name((request)=>{\n    request = import_protocol_http.HttpRequest.clone(request);\n    for (const headerName of Object.keys(request.headers)){\n        if (GENERATED_HEADERS.indexOf(headerName.toLowerCase()) > -1) {\n            delete request.headers[headerName];\n        }\n    }\n    return request;\n}, \"prepareRequest\");\n// src/SignatureV4Base.ts\nvar import_util_middleware = __webpack_require__(/*! @smithy/util-middleware */ \"(rsc)/./node_modules/@smithy/util-middleware/dist-cjs/index.js\");\nvar import_util_utf84 = __webpack_require__(/*! @smithy/util-utf8 */ \"(rsc)/./node_modules/@smithy/util-utf8/dist-cjs/index.js\");\n// src/getCanonicalQuery.ts\nvar import_util_uri_escape = __webpack_require__(/*! @smithy/util-uri-escape */ \"(rsc)/./node_modules/@smithy/util-uri-escape/dist-cjs/index.js\");\nvar getCanonicalQuery = /* @__PURE__ */ __name(({ query = {} })=>{\n    const keys = [];\n    const serialized = {};\n    for (const key of Object.keys(query)){\n        if (key.toLowerCase() === SIGNATURE_HEADER) {\n            continue;\n        }\n        const encodedKey = (0, import_util_uri_escape.escapeUri)(key);\n        keys.push(encodedKey);\n        const value = query[key];\n        if (typeof value === \"string\") {\n            serialized[encodedKey] = `${encodedKey}=${(0, import_util_uri_escape.escapeUri)(value)}`;\n        } else if (Array.isArray(value)) {\n            serialized[encodedKey] = value.slice(0).reduce((encoded, value2)=>encoded.concat([\n                    `${encodedKey}=${(0, import_util_uri_escape.escapeUri)(value2)}`\n                ]), []).sort().join(\"&\");\n        }\n    }\n    return keys.sort().map((key)=>serialized[key]).filter((serialized2)=>serialized2).join(\"&\");\n}, \"getCanonicalQuery\");\n// src/utilDate.ts\nvar iso8601 = /* @__PURE__ */ __name((time)=>toDate(time).toISOString().replace(/\\.\\d{3}Z$/, \"Z\"), \"iso8601\");\nvar toDate = /* @__PURE__ */ __name((time)=>{\n    if (typeof time === \"number\") {\n        return new Date(time * 1e3);\n    }\n    if (typeof time === \"string\") {\n        if (Number(time)) {\n            return new Date(Number(time) * 1e3);\n        }\n        return new Date(time);\n    }\n    return time;\n}, \"toDate\");\n// src/SignatureV4Base.ts\nvar SignatureV4Base = class {\n    static{\n        __name(this, \"SignatureV4Base\");\n    }\n    constructor({ applyChecksum, credentials, region, service, sha256, uriEscapePath = true }){\n        this.service = service;\n        this.sha256 = sha256;\n        this.uriEscapePath = uriEscapePath;\n        this.applyChecksum = typeof applyChecksum === \"boolean\" ? applyChecksum : true;\n        this.regionProvider = (0, import_util_middleware.normalizeProvider)(region);\n        this.credentialProvider = (0, import_util_middleware.normalizeProvider)(credentials);\n    }\n    createCanonicalRequest(request, canonicalHeaders, payloadHash) {\n        const sortedHeaders = Object.keys(canonicalHeaders).sort();\n        return `${request.method}\n${this.getCanonicalPath(request)}\n${getCanonicalQuery(request)}\n${sortedHeaders.map((name)=>`${name}:${canonicalHeaders[name]}`).join(\"\\n\")}\n\n${sortedHeaders.join(\";\")}\n${payloadHash}`;\n    }\n    async createStringToSign(longDate, credentialScope, canonicalRequest, algorithmIdentifier) {\n        const hash = new this.sha256();\n        hash.update((0, import_util_utf84.toUint8Array)(canonicalRequest));\n        const hashedRequest = await hash.digest();\n        return `${algorithmIdentifier}\n${longDate}\n${credentialScope}\n${(0, import_util_hex_encoding.toHex)(hashedRequest)}`;\n    }\n    getCanonicalPath({ path }) {\n        if (this.uriEscapePath) {\n            const normalizedPathSegments = [];\n            for (const pathSegment of path.split(\"/\")){\n                if (pathSegment?.length === 0) continue;\n                if (pathSegment === \".\") continue;\n                if (pathSegment === \"..\") {\n                    normalizedPathSegments.pop();\n                } else {\n                    normalizedPathSegments.push(pathSegment);\n                }\n            }\n            const normalizedPath = `${path?.startsWith(\"/\") ? \"/\" : \"\"}${normalizedPathSegments.join(\"/\")}${normalizedPathSegments.length > 0 && path?.endsWith(\"/\") ? \"/\" : \"\"}`;\n            const doubleEncoded = (0, import_util_uri_escape.escapeUri)(normalizedPath);\n            return doubleEncoded.replace(/%2F/g, \"/\");\n        }\n        return path;\n    }\n    validateResolvedCredentials(credentials) {\n        if (typeof credentials !== \"object\" || // @ts-expect-error: Property 'accessKeyId' does not exist on type 'object'.ts(2339)\n        typeof credentials.accessKeyId !== \"string\" || // @ts-expect-error: Property 'secretAccessKey' does not exist on type 'object'.ts(2339)\n        typeof credentials.secretAccessKey !== \"string\") {\n            throw new Error(\"Resolved credential object is not valid\");\n        }\n    }\n    formatDate(now) {\n        const longDate = iso8601(now).replace(/[\\-:]/g, \"\");\n        return {\n            longDate,\n            shortDate: longDate.slice(0, 8)\n        };\n    }\n    getCanonicalHeaderList(headers) {\n        return Object.keys(headers).sort().join(\";\");\n    }\n};\n// src/SignatureV4.ts\nvar SignatureV4 = class extends SignatureV4Base {\n    constructor({ applyChecksum, credentials, region, service, sha256, uriEscapePath = true }){\n        super({\n            applyChecksum,\n            credentials,\n            region,\n            service,\n            sha256,\n            uriEscapePath\n        });\n        this.headerFormatter = new HeaderFormatter();\n    }\n    static{\n        __name(this, \"SignatureV4\");\n    }\n    async presign(originalRequest, options = {}) {\n        const { signingDate = /* @__PURE__ */ new Date(), expiresIn = 3600, unsignableHeaders, unhoistableHeaders, signableHeaders, hoistableHeaders, signingRegion, signingService } = options;\n        const credentials = await this.credentialProvider();\n        this.validateResolvedCredentials(credentials);\n        const region = signingRegion ?? await this.regionProvider();\n        const { longDate, shortDate } = this.formatDate(signingDate);\n        if (expiresIn > MAX_PRESIGNED_TTL) {\n            return Promise.reject(\"Signature version 4 presigned URLs must have an expiration date less than one week in the future\");\n        }\n        const scope = createScope(shortDate, region, signingService ?? this.service);\n        const request = moveHeadersToQuery(prepareRequest(originalRequest), {\n            unhoistableHeaders,\n            hoistableHeaders\n        });\n        if (credentials.sessionToken) {\n            request.query[TOKEN_QUERY_PARAM] = credentials.sessionToken;\n        }\n        request.query[ALGORITHM_QUERY_PARAM] = ALGORITHM_IDENTIFIER;\n        request.query[CREDENTIAL_QUERY_PARAM] = `${credentials.accessKeyId}/${scope}`;\n        request.query[AMZ_DATE_QUERY_PARAM] = longDate;\n        request.query[EXPIRES_QUERY_PARAM] = expiresIn.toString(10);\n        const canonicalHeaders = getCanonicalHeaders(request, unsignableHeaders, signableHeaders);\n        request.query[SIGNED_HEADERS_QUERY_PARAM] = this.getCanonicalHeaderList(canonicalHeaders);\n        request.query[SIGNATURE_QUERY_PARAM] = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, await getPayloadHash(originalRequest, this.sha256)));\n        return request;\n    }\n    async sign(toSign, options) {\n        if (typeof toSign === \"string\") {\n            return this.signString(toSign, options);\n        } else if (toSign.headers && toSign.payload) {\n            return this.signEvent(toSign, options);\n        } else if (toSign.message) {\n            return this.signMessage(toSign, options);\n        } else {\n            return this.signRequest(toSign, options);\n        }\n    }\n    async signEvent({ headers, payload }, { signingDate = /* @__PURE__ */ new Date(), priorSignature, signingRegion, signingService }) {\n        const region = signingRegion ?? await this.regionProvider();\n        const { shortDate, longDate } = this.formatDate(signingDate);\n        const scope = createScope(shortDate, region, signingService ?? this.service);\n        const hashedPayload = await getPayloadHash({\n            headers: {},\n            body: payload\n        }, this.sha256);\n        const hash = new this.sha256();\n        hash.update(headers);\n        const hashedHeaders = (0, import_util_hex_encoding.toHex)(await hash.digest());\n        const stringToSign = [\n            EVENT_ALGORITHM_IDENTIFIER,\n            longDate,\n            scope,\n            priorSignature,\n            hashedHeaders,\n            hashedPayload\n        ].join(\"\\n\");\n        return this.signString(stringToSign, {\n            signingDate,\n            signingRegion: region,\n            signingService\n        });\n    }\n    async signMessage(signableMessage, { signingDate = /* @__PURE__ */ new Date(), signingRegion, signingService }) {\n        const promise = this.signEvent({\n            headers: this.headerFormatter.format(signableMessage.message.headers),\n            payload: signableMessage.message.body\n        }, {\n            signingDate,\n            signingRegion,\n            signingService,\n            priorSignature: signableMessage.priorSignature\n        });\n        return promise.then((signature)=>{\n            return {\n                message: signableMessage.message,\n                signature\n            };\n        });\n    }\n    async signString(stringToSign, { signingDate = /* @__PURE__ */ new Date(), signingRegion, signingService } = {}) {\n        const credentials = await this.credentialProvider();\n        this.validateResolvedCredentials(credentials);\n        const region = signingRegion ?? await this.regionProvider();\n        const { shortDate } = this.formatDate(signingDate);\n        const hash = new this.sha256(await this.getSigningKey(credentials, region, shortDate, signingService));\n        hash.update((0, import_util_utf85.toUint8Array)(stringToSign));\n        return (0, import_util_hex_encoding.toHex)(await hash.digest());\n    }\n    async signRequest(requestToSign, { signingDate = /* @__PURE__ */ new Date(), signableHeaders, unsignableHeaders, signingRegion, signingService } = {}) {\n        const credentials = await this.credentialProvider();\n        this.validateResolvedCredentials(credentials);\n        const region = signingRegion ?? await this.regionProvider();\n        const request = prepareRequest(requestToSign);\n        const { longDate, shortDate } = this.formatDate(signingDate);\n        const scope = createScope(shortDate, region, signingService ?? this.service);\n        request.headers[AMZ_DATE_HEADER] = longDate;\n        if (credentials.sessionToken) {\n            request.headers[TOKEN_HEADER] = credentials.sessionToken;\n        }\n        const payloadHash = await getPayloadHash(request, this.sha256);\n        if (!hasHeader(SHA256_HEADER, request.headers) && this.applyChecksum) {\n            request.headers[SHA256_HEADER] = payloadHash;\n        }\n        const canonicalHeaders = getCanonicalHeaders(request, unsignableHeaders, signableHeaders);\n        const signature = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, payloadHash));\n        request.headers[AUTH_HEADER] = `${ALGORITHM_IDENTIFIER} Credential=${credentials.accessKeyId}/${scope}, SignedHeaders=${this.getCanonicalHeaderList(canonicalHeaders)}, Signature=${signature}`;\n        return request;\n    }\n    async getSignature(longDate, credentialScope, keyPromise, canonicalRequest) {\n        const stringToSign = await this.createStringToSign(longDate, credentialScope, canonicalRequest, ALGORITHM_IDENTIFIER);\n        const hash = new this.sha256(await keyPromise);\n        hash.update((0, import_util_utf85.toUint8Array)(stringToSign));\n        return (0, import_util_hex_encoding.toHex)(await hash.digest());\n    }\n    getSigningKey(credentials, region, shortDate, service) {\n        return getSigningKey(this.sha256, credentials, shortDate, region, service || this.service);\n    }\n};\n// src/signature-v4a-container.ts\nvar signatureV4aContainer = {\n    SignatureV4a: null\n};\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/signature-v4/dist-cjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/smithy-client/dist-cjs/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/@smithy/smithy-client/dist-cjs/index.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value)=>__defProp(target, \"name\", {\n        value,\n        configurable: true\n    });\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n    Client: ()=>Client,\n    Command: ()=>Command,\n    LazyJsonString: ()=>LazyJsonString,\n    NoOpLogger: ()=>NoOpLogger,\n    SENSITIVE_STRING: ()=>SENSITIVE_STRING,\n    ServiceException: ()=>ServiceException,\n    _json: ()=>_json,\n    collectBody: ()=>import_protocols.collectBody,\n    convertMap: ()=>convertMap,\n    createAggregatedClient: ()=>createAggregatedClient,\n    dateToUtcString: ()=>dateToUtcString,\n    decorateServiceException: ()=>decorateServiceException,\n    emitWarningIfUnsupportedVersion: ()=>emitWarningIfUnsupportedVersion,\n    expectBoolean: ()=>expectBoolean,\n    expectByte: ()=>expectByte,\n    expectFloat32: ()=>expectFloat32,\n    expectInt: ()=>expectInt,\n    expectInt32: ()=>expectInt32,\n    expectLong: ()=>expectLong,\n    expectNonNull: ()=>expectNonNull,\n    expectNumber: ()=>expectNumber,\n    expectObject: ()=>expectObject,\n    expectShort: ()=>expectShort,\n    expectString: ()=>expectString,\n    expectUnion: ()=>expectUnion,\n    extendedEncodeURIComponent: ()=>import_protocols.extendedEncodeURIComponent,\n    getArrayIfSingleItem: ()=>getArrayIfSingleItem,\n    getDefaultClientConfiguration: ()=>getDefaultClientConfiguration,\n    getDefaultExtensionConfiguration: ()=>getDefaultExtensionConfiguration,\n    getValueFromTextNode: ()=>getValueFromTextNode,\n    handleFloat: ()=>handleFloat,\n    isSerializableHeaderValue: ()=>isSerializableHeaderValue,\n    limitedParseDouble: ()=>limitedParseDouble,\n    limitedParseFloat: ()=>limitedParseFloat,\n    limitedParseFloat32: ()=>limitedParseFloat32,\n    loadConfigsForDefaultMode: ()=>loadConfigsForDefaultMode,\n    logger: ()=>logger,\n    map: ()=>map,\n    parseBoolean: ()=>parseBoolean,\n    parseEpochTimestamp: ()=>parseEpochTimestamp,\n    parseRfc3339DateTime: ()=>parseRfc3339DateTime,\n    parseRfc3339DateTimeWithOffset: ()=>parseRfc3339DateTimeWithOffset,\n    parseRfc7231DateTime: ()=>parseRfc7231DateTime,\n    quoteHeader: ()=>quoteHeader,\n    resolveDefaultRuntimeConfig: ()=>resolveDefaultRuntimeConfig,\n    resolvedPath: ()=>import_protocols.resolvedPath,\n    serializeDateTime: ()=>serializeDateTime,\n    serializeFloat: ()=>serializeFloat,\n    splitEvery: ()=>splitEvery,\n    splitHeader: ()=>splitHeader,\n    strictParseByte: ()=>strictParseByte,\n    strictParseDouble: ()=>strictParseDouble,\n    strictParseFloat: ()=>strictParseFloat,\n    strictParseFloat32: ()=>strictParseFloat32,\n    strictParseInt: ()=>strictParseInt,\n    strictParseInt32: ()=>strictParseInt32,\n    strictParseLong: ()=>strictParseLong,\n    strictParseShort: ()=>strictParseShort,\n    take: ()=>take,\n    throwDefaultError: ()=>throwDefaultError,\n    withBaseException: ()=>withBaseException\n});\nmodule.exports = __toCommonJS(src_exports);\n// src/client.ts\nvar import_middleware_stack = __webpack_require__(/*! @smithy/middleware-stack */ \"(rsc)/./node_modules/@smithy/middleware-stack/dist-cjs/index.js\");\nvar Client = class {\n    constructor(config){\n        this.config = config;\n        this.middlewareStack = (0, import_middleware_stack.constructStack)();\n    }\n    static{\n        __name(this, \"Client\");\n    }\n    send(command, optionsOrCb, cb) {\n        const options = typeof optionsOrCb !== \"function\" ? optionsOrCb : void 0;\n        const callback = typeof optionsOrCb === \"function\" ? optionsOrCb : cb;\n        const useHandlerCache = options === void 0 && this.config.cacheMiddleware === true;\n        let handler;\n        if (useHandlerCache) {\n            if (!this.handlers) {\n                this.handlers = /* @__PURE__ */ new WeakMap();\n            }\n            const handlers = this.handlers;\n            if (handlers.has(command.constructor)) {\n                handler = handlers.get(command.constructor);\n            } else {\n                handler = command.resolveMiddleware(this.middlewareStack, this.config, options);\n                handlers.set(command.constructor, handler);\n            }\n        } else {\n            delete this.handlers;\n            handler = command.resolveMiddleware(this.middlewareStack, this.config, options);\n        }\n        if (callback) {\n            handler(command).then((result)=>callback(null, result.output), (err)=>callback(err)).catch(// prevent any errors thrown in the callback from triggering an\n            // unhandled promise rejection\n            ()=>{});\n        } else {\n            return handler(command).then((result)=>result.output);\n        }\n    }\n    destroy() {\n        this.config?.requestHandler?.destroy?.();\n        delete this.handlers;\n    }\n};\n// src/collect-stream-body.ts\nvar import_protocols = __webpack_require__(/*! @smithy/core/protocols */ \"(rsc)/./node_modules/@smithy/core/dist-es/submodules/protocols/index.js\");\n// src/command.ts\nvar import_types = __webpack_require__(/*! @smithy/types */ \"(rsc)/./node_modules/@smithy/types/dist-cjs/index.js\");\nvar Command = class {\n    constructor(){\n        this.middlewareStack = (0, import_middleware_stack.constructStack)();\n    }\n    static{\n        __name(this, \"Command\");\n    }\n    /**\n   * Factory for Command ClassBuilder.\n   * @internal\n   */ static classBuilder() {\n        return new ClassBuilder();\n    }\n    /**\n   * @internal\n   */ resolveMiddlewareWithContext(clientStack, configuration, options, { middlewareFn, clientName, commandName, inputFilterSensitiveLog, outputFilterSensitiveLog, smithyContext, additionalContext, CommandCtor }) {\n        for (const mw of middlewareFn.bind(this)(CommandCtor, clientStack, configuration, options)){\n            this.middlewareStack.use(mw);\n        }\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger: logger2 } = configuration;\n        const handlerExecutionContext = {\n            logger: logger2,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog,\n            outputFilterSensitiveLog,\n            [import_types.SMITHY_CONTEXT_KEY]: {\n                commandInstance: this,\n                ...smithyContext\n            },\n            ...additionalContext\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n};\nvar ClassBuilder = class {\n    constructor(){\n        this._init = ()=>{};\n        this._ep = {};\n        this._middlewareFn = ()=>[];\n        this._commandName = \"\";\n        this._clientName = \"\";\n        this._additionalContext = {};\n        this._smithyContext = {};\n        this._inputFilterSensitiveLog = (_)=>_;\n        this._outputFilterSensitiveLog = (_)=>_;\n        this._serializer = null;\n        this._deserializer = null;\n    }\n    static{\n        __name(this, \"ClassBuilder\");\n    }\n    /**\n   * Optional init callback.\n   */ init(cb) {\n        this._init = cb;\n    }\n    /**\n   * Set the endpoint parameter instructions.\n   */ ep(endpointParameterInstructions) {\n        this._ep = endpointParameterInstructions;\n        return this;\n    }\n    /**\n   * Add any number of middleware.\n   */ m(middlewareSupplier) {\n        this._middlewareFn = middlewareSupplier;\n        return this;\n    }\n    /**\n   * Set the initial handler execution context Smithy field.\n   */ s(service, operation, smithyContext = {}) {\n        this._smithyContext = {\n            service,\n            operation,\n            ...smithyContext\n        };\n        return this;\n    }\n    /**\n   * Set the initial handler execution context.\n   */ c(additionalContext = {}) {\n        this._additionalContext = additionalContext;\n        return this;\n    }\n    /**\n   * Set constant string identifiers for the operation.\n   */ n(clientName, commandName) {\n        this._clientName = clientName;\n        this._commandName = commandName;\n        return this;\n    }\n    /**\n   * Set the input and output sensistive log filters.\n   */ f(inputFilter = (_)=>_, outputFilter = (_)=>_) {\n        this._inputFilterSensitiveLog = inputFilter;\n        this._outputFilterSensitiveLog = outputFilter;\n        return this;\n    }\n    /**\n   * Sets the serializer.\n   */ ser(serializer) {\n        this._serializer = serializer;\n        return this;\n    }\n    /**\n   * Sets the deserializer.\n   */ de(deserializer) {\n        this._deserializer = deserializer;\n        return this;\n    }\n    /**\n   * @returns a Command class with the classBuilder properties.\n   */ build() {\n        const closure = this;\n        let CommandRef;\n        return CommandRef = class extends Command {\n            /**\n       * @public\n       */ constructor(...[input]){\n                super();\n                /**\n         * @internal\n         */ // @ts-ignore used in middlewareFn closure.\n                this.serialize = closure._serializer;\n                /**\n         * @internal\n         */ // @ts-ignore used in middlewareFn closure.\n                this.deserialize = closure._deserializer;\n                this.input = input ?? {};\n                closure._init(this);\n            }\n            static{\n                __name(this, \"CommandRef\");\n            }\n            /**\n       * @public\n       */ static getEndpointParameterInstructions() {\n                return closure._ep;\n            }\n            /**\n       * @internal\n       */ resolveMiddleware(stack, configuration, options) {\n                return this.resolveMiddlewareWithContext(stack, configuration, options, {\n                    CommandCtor: CommandRef,\n                    middlewareFn: closure._middlewareFn,\n                    clientName: closure._clientName,\n                    commandName: closure._commandName,\n                    inputFilterSensitiveLog: closure._inputFilterSensitiveLog,\n                    outputFilterSensitiveLog: closure._outputFilterSensitiveLog,\n                    smithyContext: closure._smithyContext,\n                    additionalContext: closure._additionalContext\n                });\n            }\n        };\n    }\n};\n// src/constants.ts\nvar SENSITIVE_STRING = \"***SensitiveInformation***\";\n// src/create-aggregated-client.ts\nvar createAggregatedClient = /* @__PURE__ */ __name((commands, Client2)=>{\n    for (const command of Object.keys(commands)){\n        const CommandCtor = commands[command];\n        const methodImpl = /* @__PURE__ */ __name(async function(args, optionsOrCb, cb) {\n            const command2 = new CommandCtor(args);\n            if (typeof optionsOrCb === \"function\") {\n                this.send(command2, optionsOrCb);\n            } else if (typeof cb === \"function\") {\n                if (typeof optionsOrCb !== \"object\") throw new Error(`Expected http options but got ${typeof optionsOrCb}`);\n                this.send(command2, optionsOrCb || {}, cb);\n            } else {\n                return this.send(command2, optionsOrCb);\n            }\n        }, \"methodImpl\");\n        const methodName = (command[0].toLowerCase() + command.slice(1)).replace(/Command$/, \"\");\n        Client2.prototype[methodName] = methodImpl;\n    }\n}, \"createAggregatedClient\");\n// src/parse-utils.ts\nvar parseBoolean = /* @__PURE__ */ __name((value)=>{\n    switch(value){\n        case \"true\":\n            return true;\n        case \"false\":\n            return false;\n        default:\n            throw new Error(`Unable to parse boolean value \"${value}\"`);\n    }\n}, \"parseBoolean\");\nvar expectBoolean = /* @__PURE__ */ __name((value)=>{\n    if (value === null || value === void 0) {\n        return void 0;\n    }\n    if (typeof value === \"number\") {\n        if (value === 0 || value === 1) {\n            logger.warn(stackTraceWarning(`Expected boolean, got ${typeof value}: ${value}`));\n        }\n        if (value === 0) {\n            return false;\n        }\n        if (value === 1) {\n            return true;\n        }\n    }\n    if (typeof value === \"string\") {\n        const lower = value.toLowerCase();\n        if (lower === \"false\" || lower === \"true\") {\n            logger.warn(stackTraceWarning(`Expected boolean, got ${typeof value}: ${value}`));\n        }\n        if (lower === \"false\") {\n            return false;\n        }\n        if (lower === \"true\") {\n            return true;\n        }\n    }\n    if (typeof value === \"boolean\") {\n        return value;\n    }\n    throw new TypeError(`Expected boolean, got ${typeof value}: ${value}`);\n}, \"expectBoolean\");\nvar expectNumber = /* @__PURE__ */ __name((value)=>{\n    if (value === null || value === void 0) {\n        return void 0;\n    }\n    if (typeof value === \"string\") {\n        const parsed = parseFloat(value);\n        if (!Number.isNaN(parsed)) {\n            if (String(parsed) !== String(value)) {\n                logger.warn(stackTraceWarning(`Expected number but observed string: ${value}`));\n            }\n            return parsed;\n        }\n    }\n    if (typeof value === \"number\") {\n        return value;\n    }\n    throw new TypeError(`Expected number, got ${typeof value}: ${value}`);\n}, \"expectNumber\");\nvar MAX_FLOAT = Math.ceil(2 ** 127 * (2 - 2 ** -23));\nvar expectFloat32 = /* @__PURE__ */ __name((value)=>{\n    const expected = expectNumber(value);\n    if (expected !== void 0 && !Number.isNaN(expected) && expected !== Infinity && expected !== -Infinity) {\n        if (Math.abs(expected) > MAX_FLOAT) {\n            throw new TypeError(`Expected 32-bit float, got ${value}`);\n        }\n    }\n    return expected;\n}, \"expectFloat32\");\nvar expectLong = /* @__PURE__ */ __name((value)=>{\n    if (value === null || value === void 0) {\n        return void 0;\n    }\n    if (Number.isInteger(value) && !Number.isNaN(value)) {\n        return value;\n    }\n    throw new TypeError(`Expected integer, got ${typeof value}: ${value}`);\n}, \"expectLong\");\nvar expectInt = expectLong;\nvar expectInt32 = /* @__PURE__ */ __name((value)=>expectSizedInt(value, 32), \"expectInt32\");\nvar expectShort = /* @__PURE__ */ __name((value)=>expectSizedInt(value, 16), \"expectShort\");\nvar expectByte = /* @__PURE__ */ __name((value)=>expectSizedInt(value, 8), \"expectByte\");\nvar expectSizedInt = /* @__PURE__ */ __name((value, size)=>{\n    const expected = expectLong(value);\n    if (expected !== void 0 && castInt(expected, size) !== expected) {\n        throw new TypeError(`Expected ${size}-bit integer, got ${value}`);\n    }\n    return expected;\n}, \"expectSizedInt\");\nvar castInt = /* @__PURE__ */ __name((value, size)=>{\n    switch(size){\n        case 32:\n            return Int32Array.of(value)[0];\n        case 16:\n            return Int16Array.of(value)[0];\n        case 8:\n            return Int8Array.of(value)[0];\n    }\n}, \"castInt\");\nvar expectNonNull = /* @__PURE__ */ __name((value, location)=>{\n    if (value === null || value === void 0) {\n        if (location) {\n            throw new TypeError(`Expected a non-null value for ${location}`);\n        }\n        throw new TypeError(\"Expected a non-null value\");\n    }\n    return value;\n}, \"expectNonNull\");\nvar expectObject = /* @__PURE__ */ __name((value)=>{\n    if (value === null || value === void 0) {\n        return void 0;\n    }\n    if (typeof value === \"object\" && !Array.isArray(value)) {\n        return value;\n    }\n    const receivedType = Array.isArray(value) ? \"array\" : typeof value;\n    throw new TypeError(`Expected object, got ${receivedType}: ${value}`);\n}, \"expectObject\");\nvar expectString = /* @__PURE__ */ __name((value)=>{\n    if (value === null || value === void 0) {\n        return void 0;\n    }\n    if (typeof value === \"string\") {\n        return value;\n    }\n    if ([\n        \"boolean\",\n        \"number\",\n        \"bigint\"\n    ].includes(typeof value)) {\n        logger.warn(stackTraceWarning(`Expected string, got ${typeof value}: ${value}`));\n        return String(value);\n    }\n    throw new TypeError(`Expected string, got ${typeof value}: ${value}`);\n}, \"expectString\");\nvar expectUnion = /* @__PURE__ */ __name((value)=>{\n    if (value === null || value === void 0) {\n        return void 0;\n    }\n    const asObject = expectObject(value);\n    const setKeys = Object.entries(asObject).filter(([, v])=>v != null).map(([k])=>k);\n    if (setKeys.length === 0) {\n        throw new TypeError(`Unions must have exactly one non-null member. None were found.`);\n    }\n    if (setKeys.length > 1) {\n        throw new TypeError(`Unions must have exactly one non-null member. Keys ${setKeys} were not null.`);\n    }\n    return asObject;\n}, \"expectUnion\");\nvar strictParseDouble = /* @__PURE__ */ __name((value)=>{\n    if (typeof value == \"string\") {\n        return expectNumber(parseNumber(value));\n    }\n    return expectNumber(value);\n}, \"strictParseDouble\");\nvar strictParseFloat = strictParseDouble;\nvar strictParseFloat32 = /* @__PURE__ */ __name((value)=>{\n    if (typeof value == \"string\") {\n        return expectFloat32(parseNumber(value));\n    }\n    return expectFloat32(value);\n}, \"strictParseFloat32\");\nvar NUMBER_REGEX = /(-?(?:0|[1-9]\\d*)(?:\\.\\d+)?(?:[eE][+-]?\\d+)?)|(-?Infinity)|(NaN)/g;\nvar parseNumber = /* @__PURE__ */ __name((value)=>{\n    const matches = value.match(NUMBER_REGEX);\n    if (matches === null || matches[0].length !== value.length) {\n        throw new TypeError(`Expected real number, got implicit NaN`);\n    }\n    return parseFloat(value);\n}, \"parseNumber\");\nvar limitedParseDouble = /* @__PURE__ */ __name((value)=>{\n    if (typeof value == \"string\") {\n        return parseFloatString(value);\n    }\n    return expectNumber(value);\n}, \"limitedParseDouble\");\nvar handleFloat = limitedParseDouble;\nvar limitedParseFloat = limitedParseDouble;\nvar limitedParseFloat32 = /* @__PURE__ */ __name((value)=>{\n    if (typeof value == \"string\") {\n        return parseFloatString(value);\n    }\n    return expectFloat32(value);\n}, \"limitedParseFloat32\");\nvar parseFloatString = /* @__PURE__ */ __name((value)=>{\n    switch(value){\n        case \"NaN\":\n            return NaN;\n        case \"Infinity\":\n            return Infinity;\n        case \"-Infinity\":\n            return -Infinity;\n        default:\n            throw new Error(`Unable to parse float value: ${value}`);\n    }\n}, \"parseFloatString\");\nvar strictParseLong = /* @__PURE__ */ __name((value)=>{\n    if (typeof value === \"string\") {\n        return expectLong(parseNumber(value));\n    }\n    return expectLong(value);\n}, \"strictParseLong\");\nvar strictParseInt = strictParseLong;\nvar strictParseInt32 = /* @__PURE__ */ __name((value)=>{\n    if (typeof value === \"string\") {\n        return expectInt32(parseNumber(value));\n    }\n    return expectInt32(value);\n}, \"strictParseInt32\");\nvar strictParseShort = /* @__PURE__ */ __name((value)=>{\n    if (typeof value === \"string\") {\n        return expectShort(parseNumber(value));\n    }\n    return expectShort(value);\n}, \"strictParseShort\");\nvar strictParseByte = /* @__PURE__ */ __name((value)=>{\n    if (typeof value === \"string\") {\n        return expectByte(parseNumber(value));\n    }\n    return expectByte(value);\n}, \"strictParseByte\");\nvar stackTraceWarning = /* @__PURE__ */ __name((message)=>{\n    return String(new TypeError(message).stack || message).split(\"\\n\").slice(0, 5).filter((s)=>!s.includes(\"stackTraceWarning\")).join(\"\\n\");\n}, \"stackTraceWarning\");\nvar logger = {\n    warn: console.warn\n};\n// src/date-utils.ts\nvar DAYS = [\n    \"Sun\",\n    \"Mon\",\n    \"Tue\",\n    \"Wed\",\n    \"Thu\",\n    \"Fri\",\n    \"Sat\"\n];\nvar MONTHS = [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\"\n];\nfunction dateToUtcString(date) {\n    const year = date.getUTCFullYear();\n    const month = date.getUTCMonth();\n    const dayOfWeek = date.getUTCDay();\n    const dayOfMonthInt = date.getUTCDate();\n    const hoursInt = date.getUTCHours();\n    const minutesInt = date.getUTCMinutes();\n    const secondsInt = date.getUTCSeconds();\n    const dayOfMonthString = dayOfMonthInt < 10 ? `0${dayOfMonthInt}` : `${dayOfMonthInt}`;\n    const hoursString = hoursInt < 10 ? `0${hoursInt}` : `${hoursInt}`;\n    const minutesString = minutesInt < 10 ? `0${minutesInt}` : `${minutesInt}`;\n    const secondsString = secondsInt < 10 ? `0${secondsInt}` : `${secondsInt}`;\n    return `${DAYS[dayOfWeek]}, ${dayOfMonthString} ${MONTHS[month]} ${year} ${hoursString}:${minutesString}:${secondsString} GMT`;\n}\n__name(dateToUtcString, \"dateToUtcString\");\nvar RFC3339 = new RegExp(/^(\\d{4})-(\\d{2})-(\\d{2})[tT](\\d{2}):(\\d{2}):(\\d{2})(?:\\.(\\d+))?[zZ]$/);\nvar parseRfc3339DateTime = /* @__PURE__ */ __name((value)=>{\n    if (value === null || value === void 0) {\n        return void 0;\n    }\n    if (typeof value !== \"string\") {\n        throw new TypeError(\"RFC-3339 date-times must be expressed as strings\");\n    }\n    const match = RFC3339.exec(value);\n    if (!match) {\n        throw new TypeError(\"Invalid RFC-3339 date-time value\");\n    }\n    const [_, yearStr, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds] = match;\n    const year = strictParseShort(stripLeadingZeroes(yearStr));\n    const month = parseDateValue(monthStr, \"month\", 1, 12);\n    const day = parseDateValue(dayStr, \"day\", 1, 31);\n    return buildDate(year, month, day, {\n        hours,\n        minutes,\n        seconds,\n        fractionalMilliseconds\n    });\n}, \"parseRfc3339DateTime\");\nvar RFC3339_WITH_OFFSET = new RegExp(/^(\\d{4})-(\\d{2})-(\\d{2})[tT](\\d{2}):(\\d{2}):(\\d{2})(?:\\.(\\d+))?(([-+]\\d{2}\\:\\d{2})|[zZ])$/);\nvar parseRfc3339DateTimeWithOffset = /* @__PURE__ */ __name((value)=>{\n    if (value === null || value === void 0) {\n        return void 0;\n    }\n    if (typeof value !== \"string\") {\n        throw new TypeError(\"RFC-3339 date-times must be expressed as strings\");\n    }\n    const match = RFC3339_WITH_OFFSET.exec(value);\n    if (!match) {\n        throw new TypeError(\"Invalid RFC-3339 date-time value\");\n    }\n    const [_, yearStr, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds, offsetStr] = match;\n    const year = strictParseShort(stripLeadingZeroes(yearStr));\n    const month = parseDateValue(monthStr, \"month\", 1, 12);\n    const day = parseDateValue(dayStr, \"day\", 1, 31);\n    const date = buildDate(year, month, day, {\n        hours,\n        minutes,\n        seconds,\n        fractionalMilliseconds\n    });\n    if (offsetStr.toUpperCase() != \"Z\") {\n        date.setTime(date.getTime() - parseOffsetToMilliseconds(offsetStr));\n    }\n    return date;\n}, \"parseRfc3339DateTimeWithOffset\");\nvar IMF_FIXDATE = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\\d{2}) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\\d{4}) (\\d{1,2}):(\\d{2}):(\\d{2})(?:\\.(\\d+))? GMT$/);\nvar RFC_850_DATE = new RegExp(/^(?:Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\\d{2})-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\\d{2}) (\\d{1,2}):(\\d{2}):(\\d{2})(?:\\.(\\d+))? GMT$/);\nvar ASC_TIME = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( [1-9]|\\d{2}) (\\d{1,2}):(\\d{2}):(\\d{2})(?:\\.(\\d+))? (\\d{4})$/);\nvar parseRfc7231DateTime = /* @__PURE__ */ __name((value)=>{\n    if (value === null || value === void 0) {\n        return void 0;\n    }\n    if (typeof value !== \"string\") {\n        throw new TypeError(\"RFC-7231 date-times must be expressed as strings\");\n    }\n    let match = IMF_FIXDATE.exec(value);\n    if (match) {\n        const [_, dayStr, monthStr, yearStr, hours, minutes, seconds, fractionalMilliseconds] = match;\n        return buildDate(strictParseShort(stripLeadingZeroes(yearStr)), parseMonthByShortName(monthStr), parseDateValue(dayStr, \"day\", 1, 31), {\n            hours,\n            minutes,\n            seconds,\n            fractionalMilliseconds\n        });\n    }\n    match = RFC_850_DATE.exec(value);\n    if (match) {\n        const [_, dayStr, monthStr, yearStr, hours, minutes, seconds, fractionalMilliseconds] = match;\n        return adjustRfc850Year(buildDate(parseTwoDigitYear(yearStr), parseMonthByShortName(monthStr), parseDateValue(dayStr, \"day\", 1, 31), {\n            hours,\n            minutes,\n            seconds,\n            fractionalMilliseconds\n        }));\n    }\n    match = ASC_TIME.exec(value);\n    if (match) {\n        const [_, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds, yearStr] = match;\n        return buildDate(strictParseShort(stripLeadingZeroes(yearStr)), parseMonthByShortName(monthStr), parseDateValue(dayStr.trimLeft(), \"day\", 1, 31), {\n            hours,\n            minutes,\n            seconds,\n            fractionalMilliseconds\n        });\n    }\n    throw new TypeError(\"Invalid RFC-7231 date-time value\");\n}, \"parseRfc7231DateTime\");\nvar parseEpochTimestamp = /* @__PURE__ */ __name((value)=>{\n    if (value === null || value === void 0) {\n        return void 0;\n    }\n    let valueAsDouble;\n    if (typeof value === \"number\") {\n        valueAsDouble = value;\n    } else if (typeof value === \"string\") {\n        valueAsDouble = strictParseDouble(value);\n    } else if (typeof value === \"object\" && value.tag === 1) {\n        valueAsDouble = value.value;\n    } else {\n        throw new TypeError(\"Epoch timestamps must be expressed as floating point numbers or their string representation\");\n    }\n    if (Number.isNaN(valueAsDouble) || valueAsDouble === Infinity || valueAsDouble === -Infinity) {\n        throw new TypeError(\"Epoch timestamps must be valid, non-Infinite, non-NaN numerics\");\n    }\n    return new Date(Math.round(valueAsDouble * 1e3));\n}, \"parseEpochTimestamp\");\nvar buildDate = /* @__PURE__ */ __name((year, month, day, time)=>{\n    const adjustedMonth = month - 1;\n    validateDayOfMonth(year, adjustedMonth, day);\n    return new Date(Date.UTC(year, adjustedMonth, day, parseDateValue(time.hours, \"hour\", 0, 23), parseDateValue(time.minutes, \"minute\", 0, 59), // seconds can go up to 60 for leap seconds\n    parseDateValue(time.seconds, \"seconds\", 0, 60), parseMilliseconds(time.fractionalMilliseconds)));\n}, \"buildDate\");\nvar parseTwoDigitYear = /* @__PURE__ */ __name((value)=>{\n    const thisYear = /* @__PURE__ */ new Date().getUTCFullYear();\n    const valueInThisCentury = Math.floor(thisYear / 100) * 100 + strictParseShort(stripLeadingZeroes(value));\n    if (valueInThisCentury < thisYear) {\n        return valueInThisCentury + 100;\n    }\n    return valueInThisCentury;\n}, \"parseTwoDigitYear\");\nvar FIFTY_YEARS_IN_MILLIS = 50 * 365 * 24 * 60 * 60 * 1e3;\nvar adjustRfc850Year = /* @__PURE__ */ __name((input)=>{\n    if (input.getTime() - /* @__PURE__ */ new Date().getTime() > FIFTY_YEARS_IN_MILLIS) {\n        return new Date(Date.UTC(input.getUTCFullYear() - 100, input.getUTCMonth(), input.getUTCDate(), input.getUTCHours(), input.getUTCMinutes(), input.getUTCSeconds(), input.getUTCMilliseconds()));\n    }\n    return input;\n}, \"adjustRfc850Year\");\nvar parseMonthByShortName = /* @__PURE__ */ __name((value)=>{\n    const monthIdx = MONTHS.indexOf(value);\n    if (monthIdx < 0) {\n        throw new TypeError(`Invalid month: ${value}`);\n    }\n    return monthIdx + 1;\n}, \"parseMonthByShortName\");\nvar DAYS_IN_MONTH = [\n    31,\n    28,\n    31,\n    30,\n    31,\n    30,\n    31,\n    31,\n    30,\n    31,\n    30,\n    31\n];\nvar validateDayOfMonth = /* @__PURE__ */ __name((year, month, day)=>{\n    let maxDays = DAYS_IN_MONTH[month];\n    if (month === 1 && isLeapYear(year)) {\n        maxDays = 29;\n    }\n    if (day > maxDays) {\n        throw new TypeError(`Invalid day for ${MONTHS[month]} in ${year}: ${day}`);\n    }\n}, \"validateDayOfMonth\");\nvar isLeapYear = /* @__PURE__ */ __name((year)=>{\n    return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\n}, \"isLeapYear\");\nvar parseDateValue = /* @__PURE__ */ __name((value, type, lower, upper)=>{\n    const dateVal = strictParseByte(stripLeadingZeroes(value));\n    if (dateVal < lower || dateVal > upper) {\n        throw new TypeError(`${type} must be between ${lower} and ${upper}, inclusive`);\n    }\n    return dateVal;\n}, \"parseDateValue\");\nvar parseMilliseconds = /* @__PURE__ */ __name((value)=>{\n    if (value === null || value === void 0) {\n        return 0;\n    }\n    return strictParseFloat32(\"0.\" + value) * 1e3;\n}, \"parseMilliseconds\");\nvar parseOffsetToMilliseconds = /* @__PURE__ */ __name((value)=>{\n    const directionStr = value[0];\n    let direction = 1;\n    if (directionStr == \"+\") {\n        direction = 1;\n    } else if (directionStr == \"-\") {\n        direction = -1;\n    } else {\n        throw new TypeError(`Offset direction, ${directionStr}, must be \"+\" or \"-\"`);\n    }\n    const hour = Number(value.substring(1, 3));\n    const minute = Number(value.substring(4, 6));\n    return direction * (hour * 60 + minute) * 60 * 1e3;\n}, \"parseOffsetToMilliseconds\");\nvar stripLeadingZeroes = /* @__PURE__ */ __name((value)=>{\n    let idx = 0;\n    while(idx < value.length - 1 && value.charAt(idx) === \"0\"){\n        idx++;\n    }\n    if (idx === 0) {\n        return value;\n    }\n    return value.slice(idx);\n}, \"stripLeadingZeroes\");\n// src/exceptions.ts\nvar ServiceException = class _ServiceException extends Error {\n    static{\n        __name(this, \"ServiceException\");\n    }\n    constructor(options){\n        super(options.message);\n        Object.setPrototypeOf(this, Object.getPrototypeOf(this).constructor.prototype);\n        this.name = options.name;\n        this.$fault = options.$fault;\n        this.$metadata = options.$metadata;\n    }\n    /**\n   * Checks if a value is an instance of ServiceException (duck typed)\n   */ static isInstance(value) {\n        if (!value) return false;\n        const candidate = value;\n        return _ServiceException.prototype.isPrototypeOf(candidate) || Boolean(candidate.$fault) && Boolean(candidate.$metadata) && (candidate.$fault === \"client\" || candidate.$fault === \"server\");\n    }\n    /**\n   * Custom instanceof check to support the operator for ServiceException base class\n   */ static [Symbol.hasInstance](instance) {\n        if (!instance) return false;\n        const candidate = instance;\n        if (this === _ServiceException) {\n            return _ServiceException.isInstance(instance);\n        }\n        if (_ServiceException.isInstance(instance)) {\n            if (candidate.name && this.name) {\n                return this.prototype.isPrototypeOf(instance) || candidate.name === this.name;\n            }\n            return this.prototype.isPrototypeOf(instance);\n        }\n        return false;\n    }\n};\nvar decorateServiceException = /* @__PURE__ */ __name((exception, additions = {})=>{\n    Object.entries(additions).filter(([, v])=>v !== void 0).forEach(([k, v])=>{\n        if (exception[k] == void 0 || exception[k] === \"\") {\n            exception[k] = v;\n        }\n    });\n    const message = exception.message || exception.Message || \"UnknownError\";\n    exception.message = message;\n    delete exception.Message;\n    return exception;\n}, \"decorateServiceException\");\n// src/default-error-handler.ts\nvar throwDefaultError = /* @__PURE__ */ __name(({ output, parsedBody, exceptionCtor, errorCode })=>{\n    const $metadata = deserializeMetadata(output);\n    const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + \"\" : void 0;\n    const response = new exceptionCtor({\n        name: parsedBody?.code || parsedBody?.Code || errorCode || statusCode || \"UnknownError\",\n        $fault: \"client\",\n        $metadata\n    });\n    throw decorateServiceException(response, parsedBody);\n}, \"throwDefaultError\");\nvar withBaseException = /* @__PURE__ */ __name((ExceptionCtor)=>{\n    return ({ output, parsedBody, errorCode })=>{\n        throwDefaultError({\n            output,\n            parsedBody,\n            exceptionCtor: ExceptionCtor,\n            errorCode\n        });\n    };\n}, \"withBaseException\");\nvar deserializeMetadata = /* @__PURE__ */ __name((output)=>({\n        httpStatusCode: output.statusCode,\n        requestId: output.headers[\"x-amzn-requestid\"] ?? output.headers[\"x-amzn-request-id\"] ?? output.headers[\"x-amz-request-id\"],\n        extendedRequestId: output.headers[\"x-amz-id-2\"],\n        cfId: output.headers[\"x-amz-cf-id\"]\n    }), \"deserializeMetadata\");\n// src/defaults-mode.ts\nvar loadConfigsForDefaultMode = /* @__PURE__ */ __name((mode)=>{\n    switch(mode){\n        case \"standard\":\n            return {\n                retryMode: \"standard\",\n                connectionTimeout: 3100\n            };\n        case \"in-region\":\n            return {\n                retryMode: \"standard\",\n                connectionTimeout: 1100\n            };\n        case \"cross-region\":\n            return {\n                retryMode: \"standard\",\n                connectionTimeout: 3100\n            };\n        case \"mobile\":\n            return {\n                retryMode: \"standard\",\n                connectionTimeout: 3e4\n            };\n        default:\n            return {};\n    }\n}, \"loadConfigsForDefaultMode\");\n// src/emitWarningIfUnsupportedVersion.ts\nvar warningEmitted = false;\nvar emitWarningIfUnsupportedVersion = /* @__PURE__ */ __name((version)=>{\n    if (version && !warningEmitted && parseInt(version.substring(1, version.indexOf(\".\"))) < 16) {\n        warningEmitted = true;\n    }\n}, \"emitWarningIfUnsupportedVersion\");\n// src/extended-encode-uri-component.ts\n// src/extensions/checksum.ts\nvar getChecksumConfiguration = /* @__PURE__ */ __name((runtimeConfig)=>{\n    const checksumAlgorithms = [];\n    for(const id in import_types.AlgorithmId){\n        const algorithmId = import_types.AlgorithmId[id];\n        if (runtimeConfig[algorithmId] === void 0) {\n            continue;\n        }\n        checksumAlgorithms.push({\n            algorithmId: ()=>algorithmId,\n            checksumConstructor: ()=>runtimeConfig[algorithmId]\n        });\n    }\n    return {\n        addChecksumAlgorithm (algo) {\n            checksumAlgorithms.push(algo);\n        },\n        checksumAlgorithms () {\n            return checksumAlgorithms;\n        }\n    };\n}, \"getChecksumConfiguration\");\nvar resolveChecksumRuntimeConfig = /* @__PURE__ */ __name((clientConfig)=>{\n    const runtimeConfig = {};\n    clientConfig.checksumAlgorithms().forEach((checksumAlgorithm)=>{\n        runtimeConfig[checksumAlgorithm.algorithmId()] = checksumAlgorithm.checksumConstructor();\n    });\n    return runtimeConfig;\n}, \"resolveChecksumRuntimeConfig\");\n// src/extensions/retry.ts\nvar getRetryConfiguration = /* @__PURE__ */ __name((runtimeConfig)=>{\n    return {\n        setRetryStrategy (retryStrategy) {\n            runtimeConfig.retryStrategy = retryStrategy;\n        },\n        retryStrategy () {\n            return runtimeConfig.retryStrategy;\n        }\n    };\n}, \"getRetryConfiguration\");\nvar resolveRetryRuntimeConfig = /* @__PURE__ */ __name((retryStrategyConfiguration)=>{\n    const runtimeConfig = {};\n    runtimeConfig.retryStrategy = retryStrategyConfiguration.retryStrategy();\n    return runtimeConfig;\n}, \"resolveRetryRuntimeConfig\");\n// src/extensions/defaultExtensionConfiguration.ts\nvar getDefaultExtensionConfiguration = /* @__PURE__ */ __name((runtimeConfig)=>{\n    return Object.assign(getChecksumConfiguration(runtimeConfig), getRetryConfiguration(runtimeConfig));\n}, \"getDefaultExtensionConfiguration\");\nvar getDefaultClientConfiguration = getDefaultExtensionConfiguration;\nvar resolveDefaultRuntimeConfig = /* @__PURE__ */ __name((config)=>{\n    return Object.assign(resolveChecksumRuntimeConfig(config), resolveRetryRuntimeConfig(config));\n}, \"resolveDefaultRuntimeConfig\");\n// src/get-array-if-single-item.ts\nvar getArrayIfSingleItem = /* @__PURE__ */ __name((mayBeArray)=>Array.isArray(mayBeArray) ? mayBeArray : [\n        mayBeArray\n    ], \"getArrayIfSingleItem\");\n// src/get-value-from-text-node.ts\nvar getValueFromTextNode = /* @__PURE__ */ __name((obj)=>{\n    const textNodeName = \"#text\";\n    for(const key in obj){\n        if (obj.hasOwnProperty(key) && obj[key][textNodeName] !== void 0) {\n            obj[key] = obj[key][textNodeName];\n        } else if (typeof obj[key] === \"object\" && obj[key] !== null) {\n            obj[key] = getValueFromTextNode(obj[key]);\n        }\n    }\n    return obj;\n}, \"getValueFromTextNode\");\n// src/is-serializable-header-value.ts\nvar isSerializableHeaderValue = /* @__PURE__ */ __name((value)=>{\n    return value != null;\n}, \"isSerializableHeaderValue\");\n// src/lazy-json.ts\nvar LazyJsonString = /* @__PURE__ */ __name(function LazyJsonString2(val) {\n    const str = Object.assign(new String(val), {\n        deserializeJSON () {\n            return JSON.parse(String(val));\n        },\n        toString () {\n            return String(val);\n        },\n        toJSON () {\n            return String(val);\n        }\n    });\n    return str;\n}, \"LazyJsonString\");\nLazyJsonString.from = (object)=>{\n    if (object && typeof object === \"object\" && (object instanceof LazyJsonString || \"deserializeJSON\" in object)) {\n        return object;\n    } else if (typeof object === \"string\" || Object.getPrototypeOf(object) === String.prototype) {\n        return LazyJsonString(String(object));\n    }\n    return LazyJsonString(JSON.stringify(object));\n};\nLazyJsonString.fromObject = LazyJsonString.from;\n// src/NoOpLogger.ts\nvar NoOpLogger = class {\n    static{\n        __name(this, \"NoOpLogger\");\n    }\n    trace() {}\n    debug() {}\n    info() {}\n    warn() {}\n    error() {}\n};\n// src/object-mapping.ts\nfunction map(arg0, arg1, arg2) {\n    let target;\n    let filter;\n    let instructions;\n    if (typeof arg1 === \"undefined\" && typeof arg2 === \"undefined\") {\n        target = {};\n        instructions = arg0;\n    } else {\n        target = arg0;\n        if (typeof arg1 === \"function\") {\n            filter = arg1;\n            instructions = arg2;\n            return mapWithFilter(target, filter, instructions);\n        } else {\n            instructions = arg1;\n        }\n    }\n    for (const key of Object.keys(instructions)){\n        if (!Array.isArray(instructions[key])) {\n            target[key] = instructions[key];\n            continue;\n        }\n        applyInstruction(target, null, instructions, key);\n    }\n    return target;\n}\n__name(map, \"map\");\nvar convertMap = /* @__PURE__ */ __name((target)=>{\n    const output = {};\n    for (const [k, v] of Object.entries(target || {})){\n        output[k] = [\n            ,\n            v\n        ];\n    }\n    return output;\n}, \"convertMap\");\nvar take = /* @__PURE__ */ __name((source, instructions)=>{\n    const out = {};\n    for(const key in instructions){\n        applyInstruction(out, source, instructions, key);\n    }\n    return out;\n}, \"take\");\nvar mapWithFilter = /* @__PURE__ */ __name((target, filter, instructions)=>{\n    return map(target, Object.entries(instructions).reduce((_instructions, [key, value])=>{\n        if (Array.isArray(value)) {\n            _instructions[key] = value;\n        } else {\n            if (typeof value === \"function\") {\n                _instructions[key] = [\n                    filter,\n                    value()\n                ];\n            } else {\n                _instructions[key] = [\n                    filter,\n                    value\n                ];\n            }\n        }\n        return _instructions;\n    }, {}));\n}, \"mapWithFilter\");\nvar applyInstruction = /* @__PURE__ */ __name((target, source, instructions, targetKey)=>{\n    if (source !== null) {\n        let instruction = instructions[targetKey];\n        if (typeof instruction === \"function\") {\n            instruction = [\n                ,\n                instruction\n            ];\n        }\n        const [filter2 = nonNullish, valueFn = pass, sourceKey = targetKey] = instruction;\n        if (typeof filter2 === \"function\" && filter2(source[sourceKey]) || typeof filter2 !== \"function\" && !!filter2) {\n            target[targetKey] = valueFn(source[sourceKey]);\n        }\n        return;\n    }\n    let [filter, value] = instructions[targetKey];\n    if (typeof value === \"function\") {\n        let _value;\n        const defaultFilterPassed = filter === void 0 && (_value = value()) != null;\n        const customFilterPassed = typeof filter === \"function\" && !!filter(void 0) || typeof filter !== \"function\" && !!filter;\n        if (defaultFilterPassed) {\n            target[targetKey] = _value;\n        } else if (customFilterPassed) {\n            target[targetKey] = value();\n        }\n    } else {\n        const defaultFilterPassed = filter === void 0 && value != null;\n        const customFilterPassed = typeof filter === \"function\" && !!filter(value) || typeof filter !== \"function\" && !!filter;\n        if (defaultFilterPassed || customFilterPassed) {\n            target[targetKey] = value;\n        }\n    }\n}, \"applyInstruction\");\nvar nonNullish = /* @__PURE__ */ __name((_)=>_ != null, \"nonNullish\");\nvar pass = /* @__PURE__ */ __name((_)=>_, \"pass\");\n// src/quote-header.ts\nfunction quoteHeader(part) {\n    if (part.includes(\",\") || part.includes('\"')) {\n        part = `\"${part.replace(/\"/g, '\\\\\"')}\"`;\n    }\n    return part;\n}\n__name(quoteHeader, \"quoteHeader\");\n// src/resolve-path.ts\n// src/ser-utils.ts\nvar serializeFloat = /* @__PURE__ */ __name((value)=>{\n    if (value !== value) {\n        return \"NaN\";\n    }\n    switch(value){\n        case Infinity:\n            return \"Infinity\";\n        case -Infinity:\n            return \"-Infinity\";\n        default:\n            return value;\n    }\n}, \"serializeFloat\");\nvar serializeDateTime = /* @__PURE__ */ __name((date)=>date.toISOString().replace(\".000Z\", \"Z\"), \"serializeDateTime\");\n// src/serde-json.ts\nvar _json = /* @__PURE__ */ __name((obj)=>{\n    if (obj == null) {\n        return {};\n    }\n    if (Array.isArray(obj)) {\n        return obj.filter((_)=>_ != null).map(_json);\n    }\n    if (typeof obj === \"object\") {\n        const target = {};\n        for (const key of Object.keys(obj)){\n            if (obj[key] == null) {\n                continue;\n            }\n            target[key] = _json(obj[key]);\n        }\n        return target;\n    }\n    return obj;\n}, \"_json\");\n// src/split-every.ts\nfunction splitEvery(value, delimiter, numDelimiters) {\n    if (numDelimiters <= 0 || !Number.isInteger(numDelimiters)) {\n        throw new Error(\"Invalid number of delimiters (\" + numDelimiters + \") for splitEvery.\");\n    }\n    const segments = value.split(delimiter);\n    if (numDelimiters === 1) {\n        return segments;\n    }\n    const compoundSegments = [];\n    let currentSegment = \"\";\n    for(let i = 0; i < segments.length; i++){\n        if (currentSegment === \"\") {\n            currentSegment = segments[i];\n        } else {\n            currentSegment += delimiter + segments[i];\n        }\n        if ((i + 1) % numDelimiters === 0) {\n            compoundSegments.push(currentSegment);\n            currentSegment = \"\";\n        }\n    }\n    if (currentSegment !== \"\") {\n        compoundSegments.push(currentSegment);\n    }\n    return compoundSegments;\n}\n__name(splitEvery, \"splitEvery\");\n// src/split-header.ts\nvar splitHeader = /* @__PURE__ */ __name((value)=>{\n    const z = value.length;\n    const values = [];\n    let withinQuotes = false;\n    let prevChar = void 0;\n    let anchor = 0;\n    for(let i = 0; i < z; ++i){\n        const char = value[i];\n        switch(char){\n            case `\"`:\n                if (prevChar !== \"\\\\\") {\n                    withinQuotes = !withinQuotes;\n                }\n                break;\n            case \",\":\n                if (!withinQuotes) {\n                    values.push(value.slice(anchor, i));\n                    anchor = i + 1;\n                }\n                break;\n            default:\n        }\n        prevChar = char;\n    }\n    values.push(value.slice(anchor));\n    return values.map((v)=>{\n        v = v.trim();\n        const z2 = v.length;\n        if (z2 < 2) {\n            return v;\n        }\n        if (v[0] === `\"` && v[z2 - 1] === `\"`) {\n            v = v.slice(1, z2 - 1);\n        }\n        return v.replace(/\\\\\"/g, '\"');\n    });\n}, \"splitHeader\");\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/smithy-client/dist-cjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/types/dist-cjs/index.js":
/*!******************************************************!*\
  !*** ./node_modules/@smithy/types/dist-cjs/index.js ***!
  \******************************************************/
/***/ ((module) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value)=>__defProp(target, \"name\", {\n        value,\n        configurable: true\n    });\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n    AlgorithmId: ()=>AlgorithmId,\n    EndpointURLScheme: ()=>EndpointURLScheme,\n    FieldPosition: ()=>FieldPosition,\n    HttpApiKeyAuthLocation: ()=>HttpApiKeyAuthLocation,\n    HttpAuthLocation: ()=>HttpAuthLocation,\n    IniSectionType: ()=>IniSectionType,\n    RequestHandlerProtocol: ()=>RequestHandlerProtocol,\n    SMITHY_CONTEXT_KEY: ()=>SMITHY_CONTEXT_KEY,\n    getDefaultClientConfiguration: ()=>getDefaultClientConfiguration,\n    resolveDefaultRuntimeConfig: ()=>resolveDefaultRuntimeConfig\n});\nmodule.exports = __toCommonJS(src_exports);\n// src/auth/auth.ts\nvar HttpAuthLocation = /* @__PURE__ */ ((HttpAuthLocation2)=>{\n    HttpAuthLocation2[\"HEADER\"] = \"header\";\n    HttpAuthLocation2[\"QUERY\"] = \"query\";\n    return HttpAuthLocation2;\n})(HttpAuthLocation || {});\n// src/auth/HttpApiKeyAuth.ts\nvar HttpApiKeyAuthLocation = /* @__PURE__ */ ((HttpApiKeyAuthLocation2)=>{\n    HttpApiKeyAuthLocation2[\"HEADER\"] = \"header\";\n    HttpApiKeyAuthLocation2[\"QUERY\"] = \"query\";\n    return HttpApiKeyAuthLocation2;\n})(HttpApiKeyAuthLocation || {});\n// src/endpoint.ts\nvar EndpointURLScheme = /* @__PURE__ */ ((EndpointURLScheme2)=>{\n    EndpointURLScheme2[\"HTTP\"] = \"http\";\n    EndpointURLScheme2[\"HTTPS\"] = \"https\";\n    return EndpointURLScheme2;\n})(EndpointURLScheme || {});\n// src/extensions/checksum.ts\nvar AlgorithmId = /* @__PURE__ */ ((AlgorithmId2)=>{\n    AlgorithmId2[\"MD5\"] = \"md5\";\n    AlgorithmId2[\"CRC32\"] = \"crc32\";\n    AlgorithmId2[\"CRC32C\"] = \"crc32c\";\n    AlgorithmId2[\"SHA1\"] = \"sha1\";\n    AlgorithmId2[\"SHA256\"] = \"sha256\";\n    return AlgorithmId2;\n})(AlgorithmId || {});\nvar getChecksumConfiguration = /* @__PURE__ */ __name((runtimeConfig)=>{\n    const checksumAlgorithms = [];\n    if (runtimeConfig.sha256 !== void 0) {\n        checksumAlgorithms.push({\n            algorithmId: ()=>\"sha256\" /* SHA256 */ ,\n            checksumConstructor: ()=>runtimeConfig.sha256\n        });\n    }\n    if (runtimeConfig.md5 != void 0) {\n        checksumAlgorithms.push({\n            algorithmId: ()=>\"md5\" /* MD5 */ ,\n            checksumConstructor: ()=>runtimeConfig.md5\n        });\n    }\n    return {\n        addChecksumAlgorithm (algo) {\n            checksumAlgorithms.push(algo);\n        },\n        checksumAlgorithms () {\n            return checksumAlgorithms;\n        }\n    };\n}, \"getChecksumConfiguration\");\nvar resolveChecksumRuntimeConfig = /* @__PURE__ */ __name((clientConfig)=>{\n    const runtimeConfig = {};\n    clientConfig.checksumAlgorithms().forEach((checksumAlgorithm)=>{\n        runtimeConfig[checksumAlgorithm.algorithmId()] = checksumAlgorithm.checksumConstructor();\n    });\n    return runtimeConfig;\n}, \"resolveChecksumRuntimeConfig\");\n// src/extensions/defaultClientConfiguration.ts\nvar getDefaultClientConfiguration = /* @__PURE__ */ __name((runtimeConfig)=>{\n    return getChecksumConfiguration(runtimeConfig);\n}, \"getDefaultClientConfiguration\");\nvar resolveDefaultRuntimeConfig = /* @__PURE__ */ __name((config)=>{\n    return resolveChecksumRuntimeConfig(config);\n}, \"resolveDefaultRuntimeConfig\");\n// src/http.ts\nvar FieldPosition = /* @__PURE__ */ ((FieldPosition2)=>{\n    FieldPosition2[FieldPosition2[\"HEADER\"] = 0] = \"HEADER\";\n    FieldPosition2[FieldPosition2[\"TRAILER\"] = 1] = \"TRAILER\";\n    return FieldPosition2;\n})(FieldPosition || {});\n// src/middleware.ts\nvar SMITHY_CONTEXT_KEY = \"__smithy_context\";\n// src/profile.ts\nvar IniSectionType = /* @__PURE__ */ ((IniSectionType2)=>{\n    IniSectionType2[\"PROFILE\"] = \"profile\";\n    IniSectionType2[\"SSO_SESSION\"] = \"sso-session\";\n    IniSectionType2[\"SERVICES\"] = \"services\";\n    return IniSectionType2;\n})(IniSectionType || {});\n// src/transfer.ts\nvar RequestHandlerProtocol = /* @__PURE__ */ ((RequestHandlerProtocol2)=>{\n    RequestHandlerProtocol2[\"HTTP_0_9\"] = \"http/0.9\";\n    RequestHandlerProtocol2[\"HTTP_1_0\"] = \"http/1.0\";\n    RequestHandlerProtocol2[\"TDS_8_0\"] = \"tds/8.0\";\n    return RequestHandlerProtocol2;\n})(RequestHandlerProtocol || {});\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/types/dist-cjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/url-parser/dist-cjs/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@smithy/url-parser/dist-cjs/index.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value)=>__defProp(target, \"name\", {\n        value,\n        configurable: true\n    });\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n    parseUrl: ()=>parseUrl\n});\nmodule.exports = __toCommonJS(src_exports);\nvar import_querystring_parser = __webpack_require__(/*! @smithy/querystring-parser */ \"(rsc)/./node_modules/@smithy/querystring-parser/dist-cjs/index.js\");\nvar parseUrl = /* @__PURE__ */ __name((url)=>{\n    if (typeof url === \"string\") {\n        return parseUrl(new URL(url));\n    }\n    const { hostname, pathname, port, protocol, search } = url;\n    let query;\n    if (search) {\n        query = (0, import_querystring_parser.parseQueryString)(search);\n    }\n    return {\n        hostname,\n        port: port ? parseInt(port) : void 0,\n        protocol,\n        path: pathname,\n        query\n    };\n}, \"parseUrl\");\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91cmwtcGFyc2VyL2Rpc3QtY2pzL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7QUFBQSxJQUFJQSxZQUFZQyxPQUFPQyxjQUFjO0FBQ3JDLElBQUlDLG1CQUFtQkYsT0FBT0csd0JBQXdCO0FBQ3RELElBQUlDLG9CQUFvQkosT0FBT0ssbUJBQW1CO0FBQ2xELElBQUlDLGVBQWVOLE9BQU9PLFNBQVMsQ0FBQ0MsY0FBYztBQUNsRCxJQUFJQyxTQUFTLENBQUNDLFFBQVFDLFFBQVVaLFVBQVVXLFFBQVEsUUFBUTtRQUFFQztRQUFPQyxjQUFjO0lBQUs7QUFDdEYsSUFBSUMsV0FBVyxDQUFDSCxRQUFRSTtJQUN0QixJQUFLLElBQUlDLFFBQVFELElBQ2ZmLFVBQVVXLFFBQVFLLE1BQU07UUFBRUMsS0FBS0YsR0FBRyxDQUFDQyxLQUFLO1FBQUVFLFlBQVk7SUFBSztBQUMvRDtBQUNBLElBQUlDLGNBQWMsQ0FBQ0MsSUFBSUMsTUFBTUMsUUFBUUM7SUFDbkMsSUFBSUYsUUFBUSxPQUFPQSxTQUFTLFlBQVksT0FBT0EsU0FBUyxZQUFZO1FBQ2xFLEtBQUssSUFBSUcsT0FBT25CLGtCQUFrQmdCLE1BQ2hDLElBQUksQ0FBQ2QsYUFBYWtCLElBQUksQ0FBQ0wsSUFBSUksUUFBUUEsUUFBUUYsUUFDekN0QixVQUFVb0IsSUFBSUksS0FBSztZQUFFUCxLQUFLLElBQU1JLElBQUksQ0FBQ0csSUFBSTtZQUFFTixZQUFZLENBQUVLLENBQUFBLE9BQU9wQixpQkFBaUJrQixNQUFNRyxJQUFHLEtBQU1ELEtBQUtMLFVBQVU7UUFBQztJQUN0SDtJQUNBLE9BQU9FO0FBQ1Q7QUFDQSxJQUFJTSxlQUFlLENBQUNDLE1BQVFSLFlBQVluQixVQUFVLENBQUMsR0FBRyxjQUFjO1FBQUVZLE9BQU87SUFBSyxJQUFJZTtBQUV0RixlQUFlO0FBQ2YsSUFBSUMsY0FBYyxDQUFDO0FBQ25CZCxTQUFTYyxhQUFhO0lBQ3BCQyxVQUFVLElBQU1BO0FBQ2xCO0FBQ0FDLE9BQU9DLE9BQU8sR0FBR0wsYUFBYUU7QUFDOUIsSUFBSUksNEJBQTRCQyxtQkFBT0EsQ0FBQyxxR0FBNEI7QUFDcEUsSUFBSUosV0FBVyxhQUFhLEdBQUduQixPQUFPLENBQUN3QjtJQUNyQyxJQUFJLE9BQU9BLFFBQVEsVUFBVTtRQUMzQixPQUFPTCxTQUFTLElBQUlNLElBQUlEO0lBQzFCO0lBQ0EsTUFBTSxFQUFFRSxRQUFRLEVBQUVDLFFBQVEsRUFBRUMsSUFBSSxFQUFFQyxRQUFRLEVBQUVDLE1BQU0sRUFBRSxHQUFHTjtJQUN2RCxJQUFJTztJQUNKLElBQUlELFFBQVE7UUFDVkMsUUFBUSxDQUFDLEdBQUdULDBCQUEwQlUsZ0JBQWdCLEVBQUVGO0lBQzFEO0lBQ0EsT0FBTztRQUNMSjtRQUNBRSxNQUFNQSxPQUFPSyxTQUFTTCxRQUFRLEtBQUs7UUFDbkNDO1FBQ0FLLE1BQU1QO1FBQ05JO0lBQ0Y7QUFDRixHQUFHO0FBQ0gsNkRBQTZEO0FBRTdELEtBQU1YLENBQUFBLENBRU4iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbG91ZHNoaWZ0Ly4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvdXJsLXBhcnNlci9kaXN0LWNqcy9pbmRleC5qcz9lYTliIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fbmFtZSA9ICh0YXJnZXQsIHZhbHVlKSA9PiBfX2RlZlByb3AodGFyZ2V0LCBcIm5hbWVcIiwgeyB2YWx1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0pO1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG5cbi8vIHNyYy9pbmRleC50c1xudmFyIHNyY19leHBvcnRzID0ge307XG5fX2V4cG9ydChzcmNfZXhwb3J0cywge1xuICBwYXJzZVVybDogKCkgPT4gcGFyc2VVcmxcbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMoc3JjX2V4cG9ydHMpO1xudmFyIGltcG9ydF9xdWVyeXN0cmluZ19wYXJzZXIgPSByZXF1aXJlKFwiQHNtaXRoeS9xdWVyeXN0cmluZy1wYXJzZXJcIik7XG52YXIgcGFyc2VVcmwgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKCh1cmwpID0+IHtcbiAgaWYgKHR5cGVvZiB1cmwgPT09IFwic3RyaW5nXCIpIHtcbiAgICByZXR1cm4gcGFyc2VVcmwobmV3IFVSTCh1cmwpKTtcbiAgfVxuICBjb25zdCB7IGhvc3RuYW1lLCBwYXRobmFtZSwgcG9ydCwgcHJvdG9jb2wsIHNlYXJjaCB9ID0gdXJsO1xuICBsZXQgcXVlcnk7XG4gIGlmIChzZWFyY2gpIHtcbiAgICBxdWVyeSA9ICgwLCBpbXBvcnRfcXVlcnlzdHJpbmdfcGFyc2VyLnBhcnNlUXVlcnlTdHJpbmcpKHNlYXJjaCk7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBob3N0bmFtZSxcbiAgICBwb3J0OiBwb3J0ID8gcGFyc2VJbnQocG9ydCkgOiB2b2lkIDAsXG4gICAgcHJvdG9jb2wsXG4gICAgcGF0aDogcGF0aG5hbWUsXG4gICAgcXVlcnlcbiAgfTtcbn0sIFwicGFyc2VVcmxcIik7XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG5cbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBwYXJzZVVybFxufSk7XG5cbiJdLCJuYW1lcyI6WyJfX2RlZlByb3AiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsIl9fZ2V0T3duUHJvcERlc2MiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJfX2dldE93blByb3BOYW1lcyIsImdldE93blByb3BlcnR5TmFtZXMiLCJfX2hhc093blByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsIl9fbmFtZSIsInRhcmdldCIsInZhbHVlIiwiY29uZmlndXJhYmxlIiwiX19leHBvcnQiLCJhbGwiLCJuYW1lIiwiZ2V0IiwiZW51bWVyYWJsZSIsIl9fY29weVByb3BzIiwidG8iLCJmcm9tIiwiZXhjZXB0IiwiZGVzYyIsImtleSIsImNhbGwiLCJfX3RvQ29tbW9uSlMiLCJtb2QiLCJzcmNfZXhwb3J0cyIsInBhcnNlVXJsIiwibW9kdWxlIiwiZXhwb3J0cyIsImltcG9ydF9xdWVyeXN0cmluZ19wYXJzZXIiLCJyZXF1aXJlIiwidXJsIiwiVVJMIiwiaG9zdG5hbWUiLCJwYXRobmFtZSIsInBvcnQiLCJwcm90b2NvbCIsInNlYXJjaCIsInF1ZXJ5IiwicGFyc2VRdWVyeVN0cmluZyIsInBhcnNlSW50IiwicGF0aCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/url-parser/dist-cjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/util-base64/dist-cjs/fromBase64.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@smithy/util-base64/dist-cjs/fromBase64.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.fromBase64 = void 0;\nconst util_buffer_from_1 = __webpack_require__(/*! @smithy/util-buffer-from */ \"(rsc)/./node_modules/@smithy/util-buffer-from/dist-cjs/index.js\");\nconst BASE64_REGEX = /^[A-Za-z0-9+/]*={0,2}$/;\nconst fromBase64 = (input)=>{\n    if (input.length * 3 % 4 !== 0) {\n        throw new TypeError(`Incorrect padding on base64 string.`);\n    }\n    if (!BASE64_REGEX.exec(input)) {\n        throw new TypeError(`Invalid base64 string.`);\n    }\n    const buffer = (0, util_buffer_from_1.fromString)(input, \"base64\");\n    return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);\n};\nexports.fromBase64 = fromBase64;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLWJhc2U2NC9kaXN0LWNqcy9mcm9tQmFzZTY0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxrQkFBa0IsR0FBRyxLQUFLO0FBQzFCLE1BQU1HLHFCQUFxQkMsbUJBQU9BLENBQUMsaUdBQTBCO0FBQzdELE1BQU1DLGVBQWU7QUFDckIsTUFBTUgsYUFBYSxDQUFDSTtJQUNoQixJQUFJLE1BQU9DLE1BQU0sR0FBRyxJQUFLLE1BQU0sR0FBRztRQUM5QixNQUFNLElBQUlDLFVBQVUsQ0FBQyxtQ0FBbUMsQ0FBQztJQUM3RDtJQUNBLElBQUksQ0FBQ0gsYUFBYUksSUFBSSxDQUFDSCxRQUFRO1FBQzNCLE1BQU0sSUFBSUUsVUFBVSxDQUFDLHNCQUFzQixDQUFDO0lBQ2hEO0lBQ0EsTUFBTUUsU0FBUyxDQUFDLEdBQUdQLG1CQUFtQlEsVUFBVSxFQUFFTCxPQUFPO0lBQ3pELE9BQU8sSUFBSU0sV0FBV0YsT0FBT0EsTUFBTSxFQUFFQSxPQUFPRyxVQUFVLEVBQUVILE9BQU9JLFVBQVU7QUFDN0U7QUFDQWQsa0JBQWtCLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2xvdWRzaGlmdC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3V0aWwtYmFzZTY0L2Rpc3QtY2pzL2Zyb21CYXNlNjQuanM/NWIwNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZnJvbUJhc2U2NCA9IHZvaWQgMDtcbmNvbnN0IHV0aWxfYnVmZmVyX2Zyb21fMSA9IHJlcXVpcmUoXCJAc21pdGh5L3V0aWwtYnVmZmVyLWZyb21cIik7XG5jb25zdCBCQVNFNjRfUkVHRVggPSAvXltBLVphLXowLTkrL10qPXswLDJ9JC87XG5jb25zdCBmcm9tQmFzZTY0ID0gKGlucHV0KSA9PiB7XG4gICAgaWYgKChpbnB1dC5sZW5ndGggKiAzKSAlIDQgIT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgSW5jb3JyZWN0IHBhZGRpbmcgb24gYmFzZTY0IHN0cmluZy5gKTtcbiAgICB9XG4gICAgaWYgKCFCQVNFNjRfUkVHRVguZXhlYyhpbnB1dCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgSW52YWxpZCBiYXNlNjQgc3RyaW5nLmApO1xuICAgIH1cbiAgICBjb25zdCBidWZmZXIgPSAoMCwgdXRpbF9idWZmZXJfZnJvbV8xLmZyb21TdHJpbmcpKGlucHV0LCBcImJhc2U2NFwiKTtcbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyLmJ1ZmZlciwgYnVmZmVyLmJ5dGVPZmZzZXQsIGJ1ZmZlci5ieXRlTGVuZ3RoKTtcbn07XG5leHBvcnRzLmZyb21CYXNlNjQgPSBmcm9tQmFzZTY0O1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZnJvbUJhc2U2NCIsInV0aWxfYnVmZmVyX2Zyb21fMSIsInJlcXVpcmUiLCJCQVNFNjRfUkVHRVgiLCJpbnB1dCIsImxlbmd0aCIsIlR5cGVFcnJvciIsImV4ZWMiLCJidWZmZXIiLCJmcm9tU3RyaW5nIiwiVWludDhBcnJheSIsImJ5dGVPZmZzZXQiLCJieXRlTGVuZ3RoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/util-base64/dist-cjs/fromBase64.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/util-base64/dist-cjs/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@smithy/util-base64/dist-cjs/index.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __reExport = (target, mod, secondTarget)=>(__copyProps(target, mod, \"default\"), secondTarget && __copyProps(secondTarget, mod, \"default\"));\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\n// src/index.ts\nvar src_exports = {};\nmodule.exports = __toCommonJS(src_exports);\n__reExport(src_exports, __webpack_require__(/*! ././fromBase64 */ \"(rsc)/./node_modules/@smithy/util-base64/dist-cjs/fromBase64.js\"), module.exports);\n__reExport(src_exports, __webpack_require__(/*! ././toBase64 */ \"(rsc)/./node_modules/@smithy/util-base64/dist-cjs/toBase64.js\"), module.exports);\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLWJhc2U2NC9kaXN0LWNqcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsSUFBSUEsWUFBWUMsT0FBT0MsY0FBYztBQUNyQyxJQUFJQyxtQkFBbUJGLE9BQU9HLHdCQUF3QjtBQUN0RCxJQUFJQyxvQkFBb0JKLE9BQU9LLG1CQUFtQjtBQUNsRCxJQUFJQyxlQUFlTixPQUFPTyxTQUFTLENBQUNDLGNBQWM7QUFDbEQsSUFBSUMsY0FBYyxDQUFDQyxJQUFJQyxNQUFNQyxRQUFRQztJQUNuQyxJQUFJRixRQUFRLE9BQU9BLFNBQVMsWUFBWSxPQUFPQSxTQUFTLFlBQVk7UUFDbEUsS0FBSyxJQUFJRyxPQUFPVixrQkFBa0JPLE1BQ2hDLElBQUksQ0FBQ0wsYUFBYVMsSUFBSSxDQUFDTCxJQUFJSSxRQUFRQSxRQUFRRixRQUN6Q2IsVUFBVVcsSUFBSUksS0FBSztZQUFFRSxLQUFLLElBQU1MLElBQUksQ0FBQ0csSUFBSTtZQUFFRyxZQUFZLENBQUVKLENBQUFBLE9BQU9YLGlCQUFpQlMsTUFBTUcsSUFBRyxLQUFNRCxLQUFLSSxVQUFVO1FBQUM7SUFDdEg7SUFDQSxPQUFPUDtBQUNUO0FBQ0EsSUFBSVEsYUFBYSxDQUFDQyxRQUFRQyxLQUFLQyxlQUFrQlosQ0FBQUEsWUFBWVUsUUFBUUMsS0FBSyxZQUFZQyxnQkFBZ0JaLFlBQVlZLGNBQWNELEtBQUssVUFBUztBQUM5SSxJQUFJRSxlQUFlLENBQUNGLE1BQVFYLFlBQVlWLFVBQVUsQ0FBQyxHQUFHLGNBQWM7UUFBRXdCLE9BQU87SUFBSyxJQUFJSDtBQUV0RixlQUFlO0FBQ2YsSUFBSUksY0FBYyxDQUFDO0FBQ25CQyxPQUFPQyxPQUFPLEdBQUdKLGFBQWFFO0FBQzlCTixXQUFXTSxhQUFhRyxtQkFBT0EsQ0FBQyx1RkFBZ0IsR0FBR0YsT0FBT0MsT0FBTztBQUNqRVIsV0FBV00sYUFBYUcsbUJBQU9BLENBQUMsbUZBQWMsR0FBR0YsT0FBT0MsT0FBTztBQUMvRCw2REFBNkQ7QUFFN0QsS0FBTUQsQ0FBQUEsQ0FHTiIsInNvdXJjZXMiOlsid2VicGFjazovL2Nsb3Vkc2hpZnQvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLWJhc2U2NC9kaXN0LWNqcy9pbmRleC5qcz9jNmY1Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fcmVFeHBvcnQgPSAodGFyZ2V0LCBtb2QsIHNlY29uZFRhcmdldCkgPT4gKF9fY29weVByb3BzKHRhcmdldCwgbW9kLCBcImRlZmF1bHRcIiksIHNlY29uZFRhcmdldCAmJiBfX2NvcHlQcm9wcyhzZWNvbmRUYXJnZXQsIG1vZCwgXCJkZWZhdWx0XCIpKTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xuXG4vLyBzcmMvaW5kZXgudHNcbnZhciBzcmNfZXhwb3J0cyA9IHt9O1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMoc3JjX2V4cG9ydHMpO1xuX19yZUV4cG9ydChzcmNfZXhwb3J0cywgcmVxdWlyZShcIi4vLi9mcm9tQmFzZTY0XCIpLCBtb2R1bGUuZXhwb3J0cyk7XG5fX3JlRXhwb3J0KHNyY19leHBvcnRzLCByZXF1aXJlKFwiLi8uL3RvQmFzZTY0XCIpLCBtb2R1bGUuZXhwb3J0cyk7XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG5cbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBmcm9tQmFzZTY0LFxuICB0b0Jhc2U2NFxufSk7XG5cbiJdLCJuYW1lcyI6WyJfX2RlZlByb3AiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsIl9fZ2V0T3duUHJvcERlc2MiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJfX2dldE93blByb3BOYW1lcyIsImdldE93blByb3BlcnR5TmFtZXMiLCJfX2hhc093blByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsIl9fY29weVByb3BzIiwidG8iLCJmcm9tIiwiZXhjZXB0IiwiZGVzYyIsImtleSIsImNhbGwiLCJnZXQiLCJlbnVtZXJhYmxlIiwiX19yZUV4cG9ydCIsInRhcmdldCIsIm1vZCIsInNlY29uZFRhcmdldCIsIl9fdG9Db21tb25KUyIsInZhbHVlIiwic3JjX2V4cG9ydHMiLCJtb2R1bGUiLCJleHBvcnRzIiwicmVxdWlyZSIsImZyb21CYXNlNjQiLCJ0b0Jhc2U2NCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/util-base64/dist-cjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/util-base64/dist-cjs/toBase64.js":
/*!***************************************************************!*\
  !*** ./node_modules/@smithy/util-base64/dist-cjs/toBase64.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.toBase64 = void 0;\nconst util_buffer_from_1 = __webpack_require__(/*! @smithy/util-buffer-from */ \"(rsc)/./node_modules/@smithy/util-buffer-from/dist-cjs/index.js\");\nconst util_utf8_1 = __webpack_require__(/*! @smithy/util-utf8 */ \"(rsc)/./node_modules/@smithy/util-utf8/dist-cjs/index.js\");\nconst toBase64 = (_input)=>{\n    let input;\n    if (typeof _input === \"string\") {\n        input = (0, util_utf8_1.fromUtf8)(_input);\n    } else {\n        input = _input;\n    }\n    if (typeof input !== \"object\" || typeof input.byteOffset !== \"number\" || typeof input.byteLength !== \"number\") {\n        throw new Error(\"@smithy/util-base64: toBase64 encoder function only accepts string | Uint8Array.\");\n    }\n    return (0, util_buffer_from_1.fromArrayBuffer)(input.buffer, input.byteOffset, input.byteLength).toString(\"base64\");\n};\nexports.toBase64 = toBase64;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLWJhc2U2NC9kaXN0LWNqcy90b0Jhc2U2NC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsZ0JBQWdCLEdBQUcsS0FBSztBQUN4QixNQUFNRyxxQkFBcUJDLG1CQUFPQSxDQUFDLGlHQUEwQjtBQUM3RCxNQUFNQyxjQUFjRCxtQkFBT0EsQ0FBQyxtRkFBbUI7QUFDL0MsTUFBTUYsV0FBVyxDQUFDSTtJQUNkLElBQUlDO0lBQ0osSUFBSSxPQUFPRCxXQUFXLFVBQVU7UUFDNUJDLFFBQVEsQ0FBQyxHQUFHRixZQUFZRyxRQUFRLEVBQUVGO0lBQ3RDLE9BQ0s7UUFDREMsUUFBUUQ7SUFDWjtJQUNBLElBQUksT0FBT0MsVUFBVSxZQUFZLE9BQU9BLE1BQU1FLFVBQVUsS0FBSyxZQUFZLE9BQU9GLE1BQU1HLFVBQVUsS0FBSyxVQUFVO1FBQzNHLE1BQU0sSUFBSUMsTUFBTTtJQUNwQjtJQUNBLE9BQU8sQ0FBQyxHQUFHUixtQkFBbUJTLGVBQWUsRUFBRUwsTUFBTU0sTUFBTSxFQUFFTixNQUFNRSxVQUFVLEVBQUVGLE1BQU1HLFVBQVUsRUFBRUksUUFBUSxDQUFDO0FBQzlHO0FBQ0FkLGdCQUFnQixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL2Nsb3Vkc2hpZnQvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLWJhc2U2NC9kaXN0LWNqcy90b0Jhc2U2NC5qcz85MGU2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy50b0Jhc2U2NCA9IHZvaWQgMDtcbmNvbnN0IHV0aWxfYnVmZmVyX2Zyb21fMSA9IHJlcXVpcmUoXCJAc21pdGh5L3V0aWwtYnVmZmVyLWZyb21cIik7XG5jb25zdCB1dGlsX3V0ZjhfMSA9IHJlcXVpcmUoXCJAc21pdGh5L3V0aWwtdXRmOFwiKTtcbmNvbnN0IHRvQmFzZTY0ID0gKF9pbnB1dCkgPT4ge1xuICAgIGxldCBpbnB1dDtcbiAgICBpZiAodHlwZW9mIF9pbnB1dCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICBpbnB1dCA9ICgwLCB1dGlsX3V0ZjhfMS5mcm9tVXRmOCkoX2lucHV0KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGlucHV0ID0gX2lucHV0O1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGlucHV0ICE9PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBpbnB1dC5ieXRlT2Zmc2V0ICE9PSBcIm51bWJlclwiIHx8IHR5cGVvZiBpbnB1dC5ieXRlTGVuZ3RoICE9PSBcIm51bWJlclwiKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkBzbWl0aHkvdXRpbC1iYXNlNjQ6IHRvQmFzZTY0IGVuY29kZXIgZnVuY3Rpb24gb25seSBhY2NlcHRzIHN0cmluZyB8IFVpbnQ4QXJyYXkuXCIpO1xuICAgIH1cbiAgICByZXR1cm4gKDAsIHV0aWxfYnVmZmVyX2Zyb21fMS5mcm9tQXJyYXlCdWZmZXIpKGlucHV0LmJ1ZmZlciwgaW5wdXQuYnl0ZU9mZnNldCwgaW5wdXQuYnl0ZUxlbmd0aCkudG9TdHJpbmcoXCJiYXNlNjRcIik7XG59O1xuZXhwb3J0cy50b0Jhc2U2NCA9IHRvQmFzZTY0O1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwidG9CYXNlNjQiLCJ1dGlsX2J1ZmZlcl9mcm9tXzEiLCJyZXF1aXJlIiwidXRpbF91dGY4XzEiLCJfaW5wdXQiLCJpbnB1dCIsImZyb21VdGY4IiwiYnl0ZU9mZnNldCIsImJ5dGVMZW5ndGgiLCJFcnJvciIsImZyb21BcnJheUJ1ZmZlciIsImJ1ZmZlciIsInRvU3RyaW5nIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/util-base64/dist-cjs/toBase64.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/util-body-length-node/dist-cjs/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@smithy/util-body-length-node/dist-cjs/index.js ***!
  \**********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value)=>__defProp(target, \"name\", {\n        value,\n        configurable: true\n    });\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n    calculateBodyLength: ()=>calculateBodyLength\n});\nmodule.exports = __toCommonJS(src_exports);\n// src/calculateBodyLength.ts\nvar import_fs = __webpack_require__(/*! fs */ \"fs\");\nvar calculateBodyLength = /* @__PURE__ */ __name((body)=>{\n    if (!body) {\n        return 0;\n    }\n    if (typeof body === \"string\") {\n        return Buffer.byteLength(body);\n    } else if (typeof body.byteLength === \"number\") {\n        return body.byteLength;\n    } else if (typeof body.size === \"number\") {\n        return body.size;\n    } else if (typeof body.start === \"number\" && typeof body.end === \"number\") {\n        return body.end + 1 - body.start;\n    } else if (typeof body.path === \"string\" || Buffer.isBuffer(body.path)) {\n        return (0, import_fs.lstatSync)(body.path).size;\n    } else if (typeof body.fd === \"number\") {\n        return (0, import_fs.fstatSync)(body.fd).size;\n    }\n    throw new Error(`Body Length computation failed for ${body}`);\n}, \"calculateBodyLength\");\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLWJvZHktbGVuZ3RoLW5vZGUvZGlzdC1janMvaW5kZXguanMiLCJtYXBwaW5ncyI6IjtBQUFBLElBQUlBLFlBQVlDLE9BQU9DLGNBQWM7QUFDckMsSUFBSUMsbUJBQW1CRixPQUFPRyx3QkFBd0I7QUFDdEQsSUFBSUMsb0JBQW9CSixPQUFPSyxtQkFBbUI7QUFDbEQsSUFBSUMsZUFBZU4sT0FBT08sU0FBUyxDQUFDQyxjQUFjO0FBQ2xELElBQUlDLFNBQVMsQ0FBQ0MsUUFBUUMsUUFBVVosVUFBVVcsUUFBUSxRQUFRO1FBQUVDO1FBQU9DLGNBQWM7SUFBSztBQUN0RixJQUFJQyxXQUFXLENBQUNILFFBQVFJO0lBQ3RCLElBQUssSUFBSUMsUUFBUUQsSUFDZmYsVUFBVVcsUUFBUUssTUFBTTtRQUFFQyxLQUFLRixHQUFHLENBQUNDLEtBQUs7UUFBRUUsWUFBWTtJQUFLO0FBQy9EO0FBQ0EsSUFBSUMsY0FBYyxDQUFDQyxJQUFJQyxNQUFNQyxRQUFRQztJQUNuQyxJQUFJRixRQUFRLE9BQU9BLFNBQVMsWUFBWSxPQUFPQSxTQUFTLFlBQVk7UUFDbEUsS0FBSyxJQUFJRyxPQUFPbkIsa0JBQWtCZ0IsTUFDaEMsSUFBSSxDQUFDZCxhQUFha0IsSUFBSSxDQUFDTCxJQUFJSSxRQUFRQSxRQUFRRixRQUN6Q3RCLFVBQVVvQixJQUFJSSxLQUFLO1lBQUVQLEtBQUssSUFBTUksSUFBSSxDQUFDRyxJQUFJO1lBQUVOLFlBQVksQ0FBRUssQ0FBQUEsT0FBT3BCLGlCQUFpQmtCLE1BQU1HLElBQUcsS0FBTUQsS0FBS0wsVUFBVTtRQUFDO0lBQ3RIO0lBQ0EsT0FBT0U7QUFDVDtBQUNBLElBQUlNLGVBQWUsQ0FBQ0MsTUFBUVIsWUFBWW5CLFVBQVUsQ0FBQyxHQUFHLGNBQWM7UUFBRVksT0FBTztJQUFLLElBQUllO0FBRXRGLGVBQWU7QUFDZixJQUFJQyxjQUFjLENBQUM7QUFDbkJkLFNBQVNjLGFBQWE7SUFDcEJDLHFCQUFxQixJQUFNQTtBQUM3QjtBQUNBQyxPQUFPQyxPQUFPLEdBQUdMLGFBQWFFO0FBRTlCLDZCQUE2QjtBQUM3QixJQUFJSSxZQUFZQyxtQkFBT0EsQ0FBQyxjQUFJO0FBQzVCLElBQUlKLHNCQUFzQixhQUFhLEdBQUduQixPQUFPLENBQUN3QjtJQUNoRCxJQUFJLENBQUNBLE1BQU07UUFDVCxPQUFPO0lBQ1Q7SUFDQSxJQUFJLE9BQU9BLFNBQVMsVUFBVTtRQUM1QixPQUFPQyxPQUFPQyxVQUFVLENBQUNGO0lBQzNCLE9BQU8sSUFBSSxPQUFPQSxLQUFLRSxVQUFVLEtBQUssVUFBVTtRQUM5QyxPQUFPRixLQUFLRSxVQUFVO0lBQ3hCLE9BQU8sSUFBSSxPQUFPRixLQUFLRyxJQUFJLEtBQUssVUFBVTtRQUN4QyxPQUFPSCxLQUFLRyxJQUFJO0lBQ2xCLE9BQU8sSUFBSSxPQUFPSCxLQUFLSSxLQUFLLEtBQUssWUFBWSxPQUFPSixLQUFLSyxHQUFHLEtBQUssVUFBVTtRQUN6RSxPQUFPTCxLQUFLSyxHQUFHLEdBQUcsSUFBSUwsS0FBS0ksS0FBSztJQUNsQyxPQUFPLElBQUksT0FBT0osS0FBS00sSUFBSSxLQUFLLFlBQVlMLE9BQU9NLFFBQVEsQ0FBQ1AsS0FBS00sSUFBSSxHQUFHO1FBQ3RFLE9BQU8sQ0FBQyxHQUFHUixVQUFVVSxTQUFTLEVBQUVSLEtBQUtNLElBQUksRUFBRUgsSUFBSTtJQUNqRCxPQUFPLElBQUksT0FBT0gsS0FBS1MsRUFBRSxLQUFLLFVBQVU7UUFDdEMsT0FBTyxDQUFDLEdBQUdYLFVBQVVZLFNBQVMsRUFBRVYsS0FBS1MsRUFBRSxFQUFFTixJQUFJO0lBQy9DO0lBQ0EsTUFBTSxJQUFJUSxNQUFNLENBQUMsbUNBQW1DLEVBQUVYLEtBQUssQ0FBQztBQUM5RCxHQUFHO0FBQ0gsNkRBQTZEO0FBRTdELEtBQU1KLENBQUFBLENBRU4iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbG91ZHNoaWZ0Ly4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvdXRpbC1ib2R5LWxlbmd0aC1ub2RlL2Rpc3QtY2pzL2luZGV4LmpzPzAxZjIiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19uYW1lID0gKHRhcmdldCwgdmFsdWUpID0+IF9fZGVmUHJvcCh0YXJnZXQsIFwibmFtZVwiLCB7IHZhbHVlLCBjb25maWd1cmFibGU6IHRydWUgfSk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcblxuLy8gc3JjL2luZGV4LnRzXG52YXIgc3JjX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KHNyY19leHBvcnRzLCB7XG4gIGNhbGN1bGF0ZUJvZHlMZW5ndGg6ICgpID0+IGNhbGN1bGF0ZUJvZHlMZW5ndGhcbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMoc3JjX2V4cG9ydHMpO1xuXG4vLyBzcmMvY2FsY3VsYXRlQm9keUxlbmd0aC50c1xudmFyIGltcG9ydF9mcyA9IHJlcXVpcmUoXCJmc1wiKTtcbnZhciBjYWxjdWxhdGVCb2R5TGVuZ3RoID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoYm9keSkgPT4ge1xuICBpZiAoIWJvZHkpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuICBpZiAodHlwZW9mIGJvZHkgPT09IFwic3RyaW5nXCIpIHtcbiAgICByZXR1cm4gQnVmZmVyLmJ5dGVMZW5ndGgoYm9keSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGJvZHkuYnl0ZUxlbmd0aCA9PT0gXCJudW1iZXJcIikge1xuICAgIHJldHVybiBib2R5LmJ5dGVMZW5ndGg7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGJvZHkuc2l6ZSA9PT0gXCJudW1iZXJcIikge1xuICAgIHJldHVybiBib2R5LnNpemU7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGJvZHkuc3RhcnQgPT09IFwibnVtYmVyXCIgJiYgdHlwZW9mIGJvZHkuZW5kID09PSBcIm51bWJlclwiKSB7XG4gICAgcmV0dXJuIGJvZHkuZW5kICsgMSAtIGJvZHkuc3RhcnQ7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGJvZHkucGF0aCA9PT0gXCJzdHJpbmdcIiB8fCBCdWZmZXIuaXNCdWZmZXIoYm9keS5wYXRoKSkge1xuICAgIHJldHVybiAoMCwgaW1wb3J0X2ZzLmxzdGF0U3luYykoYm9keS5wYXRoKS5zaXplO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBib2R5LmZkID09PSBcIm51bWJlclwiKSB7XG4gICAgcmV0dXJuICgwLCBpbXBvcnRfZnMuZnN0YXRTeW5jKShib2R5LmZkKS5zaXplO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcihgQm9keSBMZW5ndGggY29tcHV0YXRpb24gZmFpbGVkIGZvciAke2JvZHl9YCk7XG59LCBcImNhbGN1bGF0ZUJvZHlMZW5ndGhcIik7XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG5cbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBjYWxjdWxhdGVCb2R5TGVuZ3RoXG59KTtcblxuIl0sIm5hbWVzIjpbIl9fZGVmUHJvcCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiX19nZXRPd25Qcm9wRGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9fZ2V0T3duUHJvcE5hbWVzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIl9faGFzT3duUHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiX19uYW1lIiwidGFyZ2V0IiwidmFsdWUiLCJjb25maWd1cmFibGUiLCJfX2V4cG9ydCIsImFsbCIsIm5hbWUiLCJnZXQiLCJlbnVtZXJhYmxlIiwiX19jb3B5UHJvcHMiLCJ0byIsImZyb20iLCJleGNlcHQiLCJkZXNjIiwia2V5IiwiY2FsbCIsIl9fdG9Db21tb25KUyIsIm1vZCIsInNyY19leHBvcnRzIiwiY2FsY3VsYXRlQm9keUxlbmd0aCIsIm1vZHVsZSIsImV4cG9ydHMiLCJpbXBvcnRfZnMiLCJyZXF1aXJlIiwiYm9keSIsIkJ1ZmZlciIsImJ5dGVMZW5ndGgiLCJzaXplIiwic3RhcnQiLCJlbmQiLCJwYXRoIiwiaXNCdWZmZXIiLCJsc3RhdFN5bmMiLCJmZCIsImZzdGF0U3luYyIsIkVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/util-body-length-node/dist-cjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/util-buffer-from/dist-cjs/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@smithy/util-buffer-from/dist-cjs/index.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value)=>__defProp(target, \"name\", {\n        value,\n        configurable: true\n    });\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n    fromArrayBuffer: ()=>fromArrayBuffer,\n    fromString: ()=>fromString\n});\nmodule.exports = __toCommonJS(src_exports);\nvar import_is_array_buffer = __webpack_require__(/*! @smithy/is-array-buffer */ \"(rsc)/./node_modules/@smithy/is-array-buffer/dist-cjs/index.js\");\nvar import_buffer = __webpack_require__(/*! buffer */ \"buffer\");\nvar fromArrayBuffer = /* @__PURE__ */ __name((input, offset = 0, length = input.byteLength - offset)=>{\n    if (!(0, import_is_array_buffer.isArrayBuffer)(input)) {\n        throw new TypeError(`The \"input\" argument must be ArrayBuffer. Received type ${typeof input} (${input})`);\n    }\n    return import_buffer.Buffer.from(input, offset, length);\n}, \"fromArrayBuffer\");\nvar fromString = /* @__PURE__ */ __name((input, encoding)=>{\n    if (typeof input !== \"string\") {\n        throw new TypeError(`The \"input\" argument must be of type string. Received type ${typeof input} (${input})`);\n    }\n    return encoding ? import_buffer.Buffer.from(input, encoding) : import_buffer.Buffer.from(input);\n}, \"fromString\");\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLWJ1ZmZlci1mcm9tL2Rpc3QtY2pzL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7QUFBQSxJQUFJQSxZQUFZQyxPQUFPQyxjQUFjO0FBQ3JDLElBQUlDLG1CQUFtQkYsT0FBT0csd0JBQXdCO0FBQ3RELElBQUlDLG9CQUFvQkosT0FBT0ssbUJBQW1CO0FBQ2xELElBQUlDLGVBQWVOLE9BQU9PLFNBQVMsQ0FBQ0MsY0FBYztBQUNsRCxJQUFJQyxTQUFTLENBQUNDLFFBQVFDLFFBQVVaLFVBQVVXLFFBQVEsUUFBUTtRQUFFQztRQUFPQyxjQUFjO0lBQUs7QUFDdEYsSUFBSUMsV0FBVyxDQUFDSCxRQUFRSTtJQUN0QixJQUFLLElBQUlDLFFBQVFELElBQ2ZmLFVBQVVXLFFBQVFLLE1BQU07UUFBRUMsS0FBS0YsR0FBRyxDQUFDQyxLQUFLO1FBQUVFLFlBQVk7SUFBSztBQUMvRDtBQUNBLElBQUlDLGNBQWMsQ0FBQ0MsSUFBSUMsTUFBTUMsUUFBUUM7SUFDbkMsSUFBSUYsUUFBUSxPQUFPQSxTQUFTLFlBQVksT0FBT0EsU0FBUyxZQUFZO1FBQ2xFLEtBQUssSUFBSUcsT0FBT25CLGtCQUFrQmdCLE1BQ2hDLElBQUksQ0FBQ2QsYUFBYWtCLElBQUksQ0FBQ0wsSUFBSUksUUFBUUEsUUFBUUYsUUFDekN0QixVQUFVb0IsSUFBSUksS0FBSztZQUFFUCxLQUFLLElBQU1JLElBQUksQ0FBQ0csSUFBSTtZQUFFTixZQUFZLENBQUVLLENBQUFBLE9BQU9wQixpQkFBaUJrQixNQUFNRyxJQUFHLEtBQU1ELEtBQUtMLFVBQVU7UUFBQztJQUN0SDtJQUNBLE9BQU9FO0FBQ1Q7QUFDQSxJQUFJTSxlQUFlLENBQUNDLE1BQVFSLFlBQVluQixVQUFVLENBQUMsR0FBRyxjQUFjO1FBQUVZLE9BQU87SUFBSyxJQUFJZTtBQUV0RixlQUFlO0FBQ2YsSUFBSUMsY0FBYyxDQUFDO0FBQ25CZCxTQUFTYyxhQUFhO0lBQ3BCQyxpQkFBaUIsSUFBTUE7SUFDdkJDLFlBQVksSUFBTUE7QUFDcEI7QUFDQUMsT0FBT0MsT0FBTyxHQUFHTixhQUFhRTtBQUM5QixJQUFJSyx5QkFBeUJDLG1CQUFPQSxDQUFDLCtGQUF5QjtBQUM5RCxJQUFJQyxnQkFBZ0JELG1CQUFPQSxDQUFDLHNCQUFRO0FBQ3BDLElBQUlMLGtCQUFrQixhQUFhLEdBQUduQixPQUFPLENBQUMwQixPQUFPQyxTQUFTLENBQUMsRUFBRUMsU0FBU0YsTUFBTUcsVUFBVSxHQUFHRixNQUFNO0lBQ2pHLElBQUksQ0FBQyxDQUFDLEdBQUdKLHVCQUF1Qk8sYUFBYSxFQUFFSixRQUFRO1FBQ3JELE1BQU0sSUFBSUssVUFBVSxDQUFDLHdEQUF3RCxFQUFFLE9BQU9MLE1BQU0sRUFBRSxFQUFFQSxNQUFNLENBQUMsQ0FBQztJQUMxRztJQUNBLE9BQU9ELGNBQWNPLE1BQU0sQ0FBQ3JCLElBQUksQ0FBQ2UsT0FBT0MsUUFBUUM7QUFDbEQsR0FBRztBQUNILElBQUlSLGFBQWEsYUFBYSxHQUFHcEIsT0FBTyxDQUFDMEIsT0FBT087SUFDOUMsSUFBSSxPQUFPUCxVQUFVLFVBQVU7UUFDN0IsTUFBTSxJQUFJSyxVQUFVLENBQUMsMkRBQTJELEVBQUUsT0FBT0wsTUFBTSxFQUFFLEVBQUVBLE1BQU0sQ0FBQyxDQUFDO0lBQzdHO0lBQ0EsT0FBT08sV0FBV1IsY0FBY08sTUFBTSxDQUFDckIsSUFBSSxDQUFDZSxPQUFPTyxZQUFZUixjQUFjTyxNQUFNLENBQUNyQixJQUFJLENBQUNlO0FBQzNGLEdBQUc7QUFDSCw2REFBNkQ7QUFFN0QsS0FBTUwsQ0FBQUEsQ0FHTiIsInNvdXJjZXMiOlsid2VicGFjazovL2Nsb3Vkc2hpZnQvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLWJ1ZmZlci1mcm9tL2Rpc3QtY2pzL2luZGV4LmpzP2Y2MTkiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19uYW1lID0gKHRhcmdldCwgdmFsdWUpID0+IF9fZGVmUHJvcCh0YXJnZXQsIFwibmFtZVwiLCB7IHZhbHVlLCBjb25maWd1cmFibGU6IHRydWUgfSk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcblxuLy8gc3JjL2luZGV4LnRzXG52YXIgc3JjX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KHNyY19leHBvcnRzLCB7XG4gIGZyb21BcnJheUJ1ZmZlcjogKCkgPT4gZnJvbUFycmF5QnVmZmVyLFxuICBmcm9tU3RyaW5nOiAoKSA9PiBmcm9tU3RyaW5nXG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKHNyY19leHBvcnRzKTtcbnZhciBpbXBvcnRfaXNfYXJyYXlfYnVmZmVyID0gcmVxdWlyZShcIkBzbWl0aHkvaXMtYXJyYXktYnVmZmVyXCIpO1xudmFyIGltcG9ydF9idWZmZXIgPSByZXF1aXJlKFwiYnVmZmVyXCIpO1xudmFyIGZyb21BcnJheUJ1ZmZlciA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGlucHV0LCBvZmZzZXQgPSAwLCBsZW5ndGggPSBpbnB1dC5ieXRlTGVuZ3RoIC0gb2Zmc2V0KSA9PiB7XG4gIGlmICghKDAsIGltcG9ydF9pc19hcnJheV9idWZmZXIuaXNBcnJheUJ1ZmZlcikoaW5wdXQpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgVGhlIFwiaW5wdXRcIiBhcmd1bWVudCBtdXN0IGJlIEFycmF5QnVmZmVyLiBSZWNlaXZlZCB0eXBlICR7dHlwZW9mIGlucHV0fSAoJHtpbnB1dH0pYCk7XG4gIH1cbiAgcmV0dXJuIGltcG9ydF9idWZmZXIuQnVmZmVyLmZyb20oaW5wdXQsIG9mZnNldCwgbGVuZ3RoKTtcbn0sIFwiZnJvbUFycmF5QnVmZmVyXCIpO1xudmFyIGZyb21TdHJpbmcgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChpbnB1dCwgZW5jb2RpbmcpID0+IHtcbiAgaWYgKHR5cGVvZiBpbnB1dCAhPT0gXCJzdHJpbmdcIikge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYFRoZSBcImlucHV0XCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIHN0cmluZy4gUmVjZWl2ZWQgdHlwZSAke3R5cGVvZiBpbnB1dH0gKCR7aW5wdXR9KWApO1xuICB9XG4gIHJldHVybiBlbmNvZGluZyA/IGltcG9ydF9idWZmZXIuQnVmZmVyLmZyb20oaW5wdXQsIGVuY29kaW5nKSA6IGltcG9ydF9idWZmZXIuQnVmZmVyLmZyb20oaW5wdXQpO1xufSwgXCJmcm9tU3RyaW5nXCIpO1xuLy8gQW5ub3RhdGUgdGhlIENvbW1vbkpTIGV4cG9ydCBuYW1lcyBmb3IgRVNNIGltcG9ydCBpbiBub2RlOlxuXG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgZnJvbUFycmF5QnVmZmVyLFxuICBmcm9tU3RyaW5nXG59KTtcblxuIl0sIm5hbWVzIjpbIl9fZGVmUHJvcCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiX19nZXRPd25Qcm9wRGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9fZ2V0T3duUHJvcE5hbWVzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIl9faGFzT3duUHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiX19uYW1lIiwidGFyZ2V0IiwidmFsdWUiLCJjb25maWd1cmFibGUiLCJfX2V4cG9ydCIsImFsbCIsIm5hbWUiLCJnZXQiLCJlbnVtZXJhYmxlIiwiX19jb3B5UHJvcHMiLCJ0byIsImZyb20iLCJleGNlcHQiLCJkZXNjIiwia2V5IiwiY2FsbCIsIl9fdG9Db21tb25KUyIsIm1vZCIsInNyY19leHBvcnRzIiwiZnJvbUFycmF5QnVmZmVyIiwiZnJvbVN0cmluZyIsIm1vZHVsZSIsImV4cG9ydHMiLCJpbXBvcnRfaXNfYXJyYXlfYnVmZmVyIiwicmVxdWlyZSIsImltcG9ydF9idWZmZXIiLCJpbnB1dCIsIm9mZnNldCIsImxlbmd0aCIsImJ5dGVMZW5ndGgiLCJpc0FycmF5QnVmZmVyIiwiVHlwZUVycm9yIiwiQnVmZmVyIiwiZW5jb2RpbmciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/util-buffer-from/dist-cjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/util-config-provider/dist-cjs/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@smithy/util-config-provider/dist-cjs/index.js ***!
  \*********************************************************************/
/***/ ((module) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value)=>__defProp(target, \"name\", {\n        value,\n        configurable: true\n    });\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n    SelectorType: ()=>SelectorType,\n    booleanSelector: ()=>booleanSelector,\n    numberSelector: ()=>numberSelector\n});\nmodule.exports = __toCommonJS(src_exports);\n// src/booleanSelector.ts\nvar booleanSelector = /* @__PURE__ */ __name((obj, key, type)=>{\n    if (!(key in obj)) return void 0;\n    if (obj[key] === \"true\") return true;\n    if (obj[key] === \"false\") return false;\n    throw new Error(`Cannot load ${type} \"${key}\". Expected \"true\" or \"false\", got ${obj[key]}.`);\n}, \"booleanSelector\");\n// src/numberSelector.ts\nvar numberSelector = /* @__PURE__ */ __name((obj, key, type)=>{\n    if (!(key in obj)) return void 0;\n    const numberValue = parseInt(obj[key], 10);\n    if (Number.isNaN(numberValue)) {\n        throw new TypeError(`Cannot load ${type} '${key}'. Expected number, got '${obj[key]}'.`);\n    }\n    return numberValue;\n}, \"numberSelector\");\n// src/types.ts\nvar SelectorType = /* @__PURE__ */ ((SelectorType2)=>{\n    SelectorType2[\"ENV\"] = \"env\";\n    SelectorType2[\"CONFIG\"] = \"shared config entry\";\n    return SelectorType2;\n})(SelectorType || {});\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLWNvbmZpZy1wcm92aWRlci9kaXN0LWNqcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsSUFBSUEsWUFBWUMsT0FBT0MsY0FBYztBQUNyQyxJQUFJQyxtQkFBbUJGLE9BQU9HLHdCQUF3QjtBQUN0RCxJQUFJQyxvQkFBb0JKLE9BQU9LLG1CQUFtQjtBQUNsRCxJQUFJQyxlQUFlTixPQUFPTyxTQUFTLENBQUNDLGNBQWM7QUFDbEQsSUFBSUMsU0FBUyxDQUFDQyxRQUFRQyxRQUFVWixVQUFVVyxRQUFRLFFBQVE7UUFBRUM7UUFBT0MsY0FBYztJQUFLO0FBQ3RGLElBQUlDLFdBQVcsQ0FBQ0gsUUFBUUk7SUFDdEIsSUFBSyxJQUFJQyxRQUFRRCxJQUNmZixVQUFVVyxRQUFRSyxNQUFNO1FBQUVDLEtBQUtGLEdBQUcsQ0FBQ0MsS0FBSztRQUFFRSxZQUFZO0lBQUs7QUFDL0Q7QUFDQSxJQUFJQyxjQUFjLENBQUNDLElBQUlDLE1BQU1DLFFBQVFDO0lBQ25DLElBQUlGLFFBQVEsT0FBT0EsU0FBUyxZQUFZLE9BQU9BLFNBQVMsWUFBWTtRQUNsRSxLQUFLLElBQUlHLE9BQU9uQixrQkFBa0JnQixNQUNoQyxJQUFJLENBQUNkLGFBQWFrQixJQUFJLENBQUNMLElBQUlJLFFBQVFBLFFBQVFGLFFBQ3pDdEIsVUFBVW9CLElBQUlJLEtBQUs7WUFBRVAsS0FBSyxJQUFNSSxJQUFJLENBQUNHLElBQUk7WUFBRU4sWUFBWSxDQUFFSyxDQUFBQSxPQUFPcEIsaUJBQWlCa0IsTUFBTUcsSUFBRyxLQUFNRCxLQUFLTCxVQUFVO1FBQUM7SUFDdEg7SUFDQSxPQUFPRTtBQUNUO0FBQ0EsSUFBSU0sZUFBZSxDQUFDQyxNQUFRUixZQUFZbkIsVUFBVSxDQUFDLEdBQUcsY0FBYztRQUFFWSxPQUFPO0lBQUssSUFBSWU7QUFFdEYsZUFBZTtBQUNmLElBQUlDLGNBQWMsQ0FBQztBQUNuQmQsU0FBU2MsYUFBYTtJQUNwQkMsY0FBYyxJQUFNQTtJQUNwQkMsaUJBQWlCLElBQU1BO0lBQ3ZCQyxnQkFBZ0IsSUFBTUE7QUFDeEI7QUFDQUMsT0FBT0MsT0FBTyxHQUFHUCxhQUFhRTtBQUU5Qix5QkFBeUI7QUFDekIsSUFBSUUsa0JBQWtCLGFBQWEsR0FBR3BCLE9BQU8sQ0FBQ3dCLEtBQUtWLEtBQUtXO0lBQ3RELElBQUksQ0FBRVgsQ0FBQUEsT0FBT1UsR0FBRSxHQUNiLE9BQU8sS0FBSztJQUNkLElBQUlBLEdBQUcsQ0FBQ1YsSUFBSSxLQUFLLFFBQ2YsT0FBTztJQUNULElBQUlVLEdBQUcsQ0FBQ1YsSUFBSSxLQUFLLFNBQ2YsT0FBTztJQUNULE1BQU0sSUFBSVksTUFBTSxDQUFDLFlBQVksRUFBRUQsS0FBSyxFQUFFLEVBQUVYLElBQUksbUNBQW1DLEVBQUVVLEdBQUcsQ0FBQ1YsSUFBSSxDQUFDLENBQUMsQ0FBQztBQUM5RixHQUFHO0FBRUgsd0JBQXdCO0FBQ3hCLElBQUlPLGlCQUFpQixhQUFhLEdBQUdyQixPQUFPLENBQUN3QixLQUFLVixLQUFLVztJQUNyRCxJQUFJLENBQUVYLENBQUFBLE9BQU9VLEdBQUUsR0FDYixPQUFPLEtBQUs7SUFDZCxNQUFNRyxjQUFjQyxTQUFTSixHQUFHLENBQUNWLElBQUksRUFBRTtJQUN2QyxJQUFJZSxPQUFPQyxLQUFLLENBQUNILGNBQWM7UUFDN0IsTUFBTSxJQUFJSSxVQUFVLENBQUMsWUFBWSxFQUFFTixLQUFLLEVBQUUsRUFBRVgsSUFBSSx5QkFBeUIsRUFBRVUsR0FBRyxDQUFDVixJQUFJLENBQUMsRUFBRSxDQUFDO0lBQ3pGO0lBQ0EsT0FBT2E7QUFDVCxHQUFHO0FBRUgsZUFBZTtBQUNmLElBQUlSLGVBQStCLGFBQUgsR0FBSSxFQUFDYTtJQUNuQ0EsYUFBYSxDQUFDLE1BQU0sR0FBRztJQUN2QkEsYUFBYSxDQUFDLFNBQVMsR0FBRztJQUMxQixPQUFPQTtBQUNULEdBQUdiLGdCQUFnQixDQUFDO0FBQ3BCLDZEQUE2RDtBQUU3RCxLQUFNRyxDQUFBQSxDQUlOIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2xvdWRzaGlmdC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3V0aWwtY29uZmlnLXByb3ZpZGVyL2Rpc3QtY2pzL2luZGV4LmpzPzFkYTQiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19uYW1lID0gKHRhcmdldCwgdmFsdWUpID0+IF9fZGVmUHJvcCh0YXJnZXQsIFwibmFtZVwiLCB7IHZhbHVlLCBjb25maWd1cmFibGU6IHRydWUgfSk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcblxuLy8gc3JjL2luZGV4LnRzXG52YXIgc3JjX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KHNyY19leHBvcnRzLCB7XG4gIFNlbGVjdG9yVHlwZTogKCkgPT4gU2VsZWN0b3JUeXBlLFxuICBib29sZWFuU2VsZWN0b3I6ICgpID0+IGJvb2xlYW5TZWxlY3RvcixcbiAgbnVtYmVyU2VsZWN0b3I6ICgpID0+IG51bWJlclNlbGVjdG9yXG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKHNyY19leHBvcnRzKTtcblxuLy8gc3JjL2Jvb2xlYW5TZWxlY3Rvci50c1xudmFyIGJvb2xlYW5TZWxlY3RvciA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKG9iaiwga2V5LCB0eXBlKSA9PiB7XG4gIGlmICghKGtleSBpbiBvYmopKVxuICAgIHJldHVybiB2b2lkIDA7XG4gIGlmIChvYmpba2V5XSA9PT0gXCJ0cnVlXCIpXG4gICAgcmV0dXJuIHRydWU7XG4gIGlmIChvYmpba2V5XSA9PT0gXCJmYWxzZVwiKVxuICAgIHJldHVybiBmYWxzZTtcbiAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgbG9hZCAke3R5cGV9IFwiJHtrZXl9XCIuIEV4cGVjdGVkIFwidHJ1ZVwiIG9yIFwiZmFsc2VcIiwgZ290ICR7b2JqW2tleV19LmApO1xufSwgXCJib29sZWFuU2VsZWN0b3JcIik7XG5cbi8vIHNyYy9udW1iZXJTZWxlY3Rvci50c1xudmFyIG51bWJlclNlbGVjdG9yID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgob2JqLCBrZXksIHR5cGUpID0+IHtcbiAgaWYgKCEoa2V5IGluIG9iaikpXG4gICAgcmV0dXJuIHZvaWQgMDtcbiAgY29uc3QgbnVtYmVyVmFsdWUgPSBwYXJzZUludChvYmpba2V5XSwgMTApO1xuICBpZiAoTnVtYmVyLmlzTmFOKG51bWJlclZhbHVlKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYENhbm5vdCBsb2FkICR7dHlwZX0gJyR7a2V5fScuIEV4cGVjdGVkIG51bWJlciwgZ290ICcke29ialtrZXldfScuYCk7XG4gIH1cbiAgcmV0dXJuIG51bWJlclZhbHVlO1xufSwgXCJudW1iZXJTZWxlY3RvclwiKTtcblxuLy8gc3JjL3R5cGVzLnRzXG52YXIgU2VsZWN0b3JUeXBlID0gLyogQF9fUFVSRV9fICovICgoU2VsZWN0b3JUeXBlMikgPT4ge1xuICBTZWxlY3RvclR5cGUyW1wiRU5WXCJdID0gXCJlbnZcIjtcbiAgU2VsZWN0b3JUeXBlMltcIkNPTkZJR1wiXSA9IFwic2hhcmVkIGNvbmZpZyBlbnRyeVwiO1xuICByZXR1cm4gU2VsZWN0b3JUeXBlMjtcbn0pKFNlbGVjdG9yVHlwZSB8fCB7fSk7XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG5cbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBib29sZWFuU2VsZWN0b3IsXG4gIG51bWJlclNlbGVjdG9yLFxuICBTZWxlY3RvclR5cGVcbn0pO1xuXG4iXSwibmFtZXMiOlsiX19kZWZQcm9wIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJfX2dldE93blByb3BEZXNjIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiX19nZXRPd25Qcm9wTmFtZXMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiX19oYXNPd25Qcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJfX25hbWUiLCJ0YXJnZXQiLCJ2YWx1ZSIsImNvbmZpZ3VyYWJsZSIsIl9fZXhwb3J0IiwiYWxsIiwibmFtZSIsImdldCIsImVudW1lcmFibGUiLCJfX2NvcHlQcm9wcyIsInRvIiwiZnJvbSIsImV4Y2VwdCIsImRlc2MiLCJrZXkiLCJjYWxsIiwiX190b0NvbW1vbkpTIiwibW9kIiwic3JjX2V4cG9ydHMiLCJTZWxlY3RvclR5cGUiLCJib29sZWFuU2VsZWN0b3IiLCJudW1iZXJTZWxlY3RvciIsIm1vZHVsZSIsImV4cG9ydHMiLCJvYmoiLCJ0eXBlIiwiRXJyb3IiLCJudW1iZXJWYWx1ZSIsInBhcnNlSW50IiwiTnVtYmVyIiwiaXNOYU4iLCJUeXBlRXJyb3IiLCJTZWxlY3RvclR5cGUyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/util-config-provider/dist-cjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/util-defaults-mode-node/dist-cjs/index.js":
/*!************************************************************************!*\
  !*** ./node_modules/@smithy/util-defaults-mode-node/dist-cjs/index.js ***!
  \************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value)=>__defProp(target, \"name\", {\n        value,\n        configurable: true\n    });\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(// If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n        value: mod,\n        enumerable: true\n    }) : target, mod));\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n    resolveDefaultsModeConfig: ()=>resolveDefaultsModeConfig\n});\nmodule.exports = __toCommonJS(src_exports);\n// src/resolveDefaultsModeConfig.ts\nvar import_config_resolver = __webpack_require__(/*! @smithy/config-resolver */ \"(rsc)/./node_modules/@smithy/config-resolver/dist-cjs/index.js\");\nvar import_node_config_provider = __webpack_require__(/*! @smithy/node-config-provider */ \"(rsc)/./node_modules/@smithy/node-config-provider/dist-cjs/index.js\");\nvar import_property_provider = __webpack_require__(/*! @smithy/property-provider */ \"(rsc)/./node_modules/@smithy/property-provider/dist-cjs/index.js\");\n// src/constants.ts\nvar AWS_EXECUTION_ENV = \"AWS_EXECUTION_ENV\";\nvar AWS_REGION_ENV = \"AWS_REGION\";\nvar AWS_DEFAULT_REGION_ENV = \"AWS_DEFAULT_REGION\";\nvar ENV_IMDS_DISABLED = \"AWS_EC2_METADATA_DISABLED\";\nvar DEFAULTS_MODE_OPTIONS = [\n    \"in-region\",\n    \"cross-region\",\n    \"mobile\",\n    \"standard\",\n    \"legacy\"\n];\nvar IMDS_REGION_PATH = \"/latest/meta-data/placement/region\";\n// src/defaultsModeConfig.ts\nvar AWS_DEFAULTS_MODE_ENV = \"AWS_DEFAULTS_MODE\";\nvar AWS_DEFAULTS_MODE_CONFIG = \"defaults_mode\";\nvar NODE_DEFAULTS_MODE_CONFIG_OPTIONS = {\n    environmentVariableSelector: (env)=>{\n        return env[AWS_DEFAULTS_MODE_ENV];\n    },\n    configFileSelector: (profile)=>{\n        return profile[AWS_DEFAULTS_MODE_CONFIG];\n    },\n    default: \"legacy\"\n};\n// src/resolveDefaultsModeConfig.ts\nvar resolveDefaultsModeConfig = /* @__PURE__ */ __name(({ region = (0, import_node_config_provider.loadConfig)(import_config_resolver.NODE_REGION_CONFIG_OPTIONS), defaultsMode = (0, import_node_config_provider.loadConfig)(NODE_DEFAULTS_MODE_CONFIG_OPTIONS) } = {})=>(0, import_property_provider.memoize)(async ()=>{\n        const mode = typeof defaultsMode === \"function\" ? await defaultsMode() : defaultsMode;\n        switch(mode?.toLowerCase()){\n            case \"auto\":\n                return resolveNodeDefaultsModeAuto(region);\n            case \"in-region\":\n            case \"cross-region\":\n            case \"mobile\":\n            case \"standard\":\n            case \"legacy\":\n                return Promise.resolve(mode?.toLocaleLowerCase());\n            case void 0:\n                return Promise.resolve(\"legacy\");\n            default:\n                throw new Error(`Invalid parameter for \"defaultsMode\", expect ${DEFAULTS_MODE_OPTIONS.join(\", \")}, got ${mode}`);\n        }\n    }), \"resolveDefaultsModeConfig\");\nvar resolveNodeDefaultsModeAuto = /* @__PURE__ */ __name(async (clientRegion)=>{\n    if (clientRegion) {\n        const resolvedRegion = typeof clientRegion === \"function\" ? await clientRegion() : clientRegion;\n        const inferredRegion = await inferPhysicalRegion();\n        if (!inferredRegion) {\n            return \"standard\";\n        }\n        if (resolvedRegion === inferredRegion) {\n            return \"in-region\";\n        } else {\n            return \"cross-region\";\n        }\n    }\n    return \"standard\";\n}, \"resolveNodeDefaultsModeAuto\");\nvar inferPhysicalRegion = /* @__PURE__ */ __name(async ()=>{\n    if (process.env[AWS_EXECUTION_ENV] && (process.env[AWS_REGION_ENV] || process.env[AWS_DEFAULT_REGION_ENV])) {\n        return process.env[AWS_REGION_ENV] ?? process.env[AWS_DEFAULT_REGION_ENV];\n    }\n    if (!process.env[ENV_IMDS_DISABLED]) {\n        try {\n            const { getInstanceMetadataEndpoint, httpRequest } = await Promise.resolve().then(()=>__toESM(__webpack_require__(/*! @smithy/credential-provider-imds */ \"(rsc)/./node_modules/@smithy/credential-provider-imds/dist-cjs/index.js\")));\n            const endpoint = await getInstanceMetadataEndpoint();\n            return (await httpRequest({\n                ...endpoint,\n                path: IMDS_REGION_PATH\n            })).toString();\n        } catch (e) {}\n    }\n}, \"inferPhysicalRegion\");\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/util-defaults-mode-node/dist-cjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/util-endpoints/dist-cjs/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/@smithy/util-endpoints/dist-cjs/index.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value)=>__defProp(target, \"name\", {\n        value,\n        configurable: true\n    });\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n    EndpointCache: ()=>EndpointCache,\n    EndpointError: ()=>EndpointError,\n    customEndpointFunctions: ()=>customEndpointFunctions,\n    isIpAddress: ()=>isIpAddress,\n    isValidHostLabel: ()=>isValidHostLabel,\n    resolveEndpoint: ()=>resolveEndpoint\n});\nmodule.exports = __toCommonJS(src_exports);\n// src/cache/EndpointCache.ts\nvar EndpointCache = class {\n    /**\n   * @param [size] - desired average maximum capacity. A buffer of 10 additional keys will be allowed\n   *                 before keys are dropped.\n   * @param [params] - list of params to consider as part of the cache key.\n   *\n   * If the params list is not populated, no caching will happen.\n   * This may be out of order depending on how the object is created and arrives to this class.\n   */ constructor({ size, params }){\n        this.data = /* @__PURE__ */ new Map();\n        this.parameters = [];\n        this.capacity = size ?? 50;\n        if (params) {\n            this.parameters = params;\n        }\n    }\n    static{\n        __name(this, \"EndpointCache\");\n    }\n    /**\n   * @param endpointParams - query for endpoint.\n   * @param resolver - provider of the value if not present.\n   * @returns endpoint corresponding to the query.\n   */ get(endpointParams, resolver) {\n        const key = this.hash(endpointParams);\n        if (key === false) {\n            return resolver();\n        }\n        if (!this.data.has(key)) {\n            if (this.data.size > this.capacity + 10) {\n                const keys = this.data.keys();\n                let i = 0;\n                while(true){\n                    const { value, done } = keys.next();\n                    this.data.delete(value);\n                    if (done || ++i > 10) {\n                        break;\n                    }\n                }\n            }\n            this.data.set(key, resolver());\n        }\n        return this.data.get(key);\n    }\n    size() {\n        return this.data.size;\n    }\n    /**\n   * @returns cache key or false if not cachable.\n   */ hash(endpointParams) {\n        let buffer = \"\";\n        const { parameters } = this;\n        if (parameters.length === 0) {\n            return false;\n        }\n        for (const param of parameters){\n            const val = String(endpointParams[param] ?? \"\");\n            if (val.includes(\"|;\")) {\n                return false;\n            }\n            buffer += val + \"|;\";\n        }\n        return buffer;\n    }\n};\n// src/lib/isIpAddress.ts\nvar IP_V4_REGEX = new RegExp(`^(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)){3}$`);\nvar isIpAddress = /* @__PURE__ */ __name((value)=>IP_V4_REGEX.test(value) || value.startsWith(\"[\") && value.endsWith(\"]\"), \"isIpAddress\");\n// src/lib/isValidHostLabel.ts\nvar VALID_HOST_LABEL_REGEX = new RegExp(`^(?!.*-$)(?!-)[a-zA-Z0-9-]{1,63}$`);\nvar isValidHostLabel = /* @__PURE__ */ __name((value, allowSubDomains = false)=>{\n    if (!allowSubDomains) {\n        return VALID_HOST_LABEL_REGEX.test(value);\n    }\n    const labels = value.split(\".\");\n    for (const label of labels){\n        if (!isValidHostLabel(label)) {\n            return false;\n        }\n    }\n    return true;\n}, \"isValidHostLabel\");\n// src/utils/customEndpointFunctions.ts\nvar customEndpointFunctions = {};\n// src/debug/debugId.ts\nvar debugId = \"endpoints\";\n// src/debug/toDebugString.ts\nfunction toDebugString(input) {\n    if (typeof input !== \"object\" || input == null) {\n        return input;\n    }\n    if (\"ref\" in input) {\n        return `$${toDebugString(input.ref)}`;\n    }\n    if (\"fn\" in input) {\n        return `${input.fn}(${(input.argv || []).map(toDebugString).join(\", \")})`;\n    }\n    return JSON.stringify(input, null, 2);\n}\n__name(toDebugString, \"toDebugString\");\n// src/types/EndpointError.ts\nvar EndpointError = class extends Error {\n    static{\n        __name(this, \"EndpointError\");\n    }\n    constructor(message){\n        super(message);\n        this.name = \"EndpointError\";\n    }\n};\n// src/lib/booleanEquals.ts\nvar booleanEquals = /* @__PURE__ */ __name((value1, value2)=>value1 === value2, \"booleanEquals\");\n// src/lib/getAttrPathList.ts\nvar getAttrPathList = /* @__PURE__ */ __name((path)=>{\n    const parts = path.split(\".\");\n    const pathList = [];\n    for (const part of parts){\n        const squareBracketIndex = part.indexOf(\"[\");\n        if (squareBracketIndex !== -1) {\n            if (part.indexOf(\"]\") !== part.length - 1) {\n                throw new EndpointError(`Path: '${path}' does not end with ']'`);\n            }\n            const arrayIndex = part.slice(squareBracketIndex + 1, -1);\n            if (Number.isNaN(parseInt(arrayIndex))) {\n                throw new EndpointError(`Invalid array index: '${arrayIndex}' in path: '${path}'`);\n            }\n            if (squareBracketIndex !== 0) {\n                pathList.push(part.slice(0, squareBracketIndex));\n            }\n            pathList.push(arrayIndex);\n        } else {\n            pathList.push(part);\n        }\n    }\n    return pathList;\n}, \"getAttrPathList\");\n// src/lib/getAttr.ts\nvar getAttr = /* @__PURE__ */ __name((value, path)=>getAttrPathList(path).reduce((acc, index)=>{\n        if (typeof acc !== \"object\") {\n            throw new EndpointError(`Index '${index}' in '${path}' not found in '${JSON.stringify(value)}'`);\n        } else if (Array.isArray(acc)) {\n            return acc[parseInt(index)];\n        }\n        return acc[index];\n    }, value), \"getAttr\");\n// src/lib/isSet.ts\nvar isSet = /* @__PURE__ */ __name((value)=>value != null, \"isSet\");\n// src/lib/not.ts\nvar not = /* @__PURE__ */ __name((value)=>!value, \"not\");\n// src/lib/parseURL.ts\nvar import_types3 = __webpack_require__(/*! @smithy/types */ \"(rsc)/./node_modules/@smithy/types/dist-cjs/index.js\");\nvar DEFAULT_PORTS = {\n    [import_types3.EndpointURLScheme.HTTP]: 80,\n    [import_types3.EndpointURLScheme.HTTPS]: 443\n};\nvar parseURL = /* @__PURE__ */ __name((value)=>{\n    const whatwgURL = (()=>{\n        try {\n            if (value instanceof URL) {\n                return value;\n            }\n            if (typeof value === \"object\" && \"hostname\" in value) {\n                const { hostname: hostname2, port, protocol: protocol2 = \"\", path = \"\", query = {} } = value;\n                const url = new URL(`${protocol2}//${hostname2}${port ? `:${port}` : \"\"}${path}`);\n                url.search = Object.entries(query).map(([k, v])=>`${k}=${v}`).join(\"&\");\n                return url;\n            }\n            return new URL(value);\n        } catch (error) {\n            return null;\n        }\n    })();\n    if (!whatwgURL) {\n        console.error(`Unable to parse ${JSON.stringify(value)} as a whatwg URL.`);\n        return null;\n    }\n    const urlString = whatwgURL.href;\n    const { host, hostname, pathname, protocol, search } = whatwgURL;\n    if (search) {\n        return null;\n    }\n    const scheme = protocol.slice(0, -1);\n    if (!Object.values(import_types3.EndpointURLScheme).includes(scheme)) {\n        return null;\n    }\n    const isIp = isIpAddress(hostname);\n    const inputContainsDefaultPort = urlString.includes(`${host}:${DEFAULT_PORTS[scheme]}`) || typeof value === \"string\" && value.includes(`${host}:${DEFAULT_PORTS[scheme]}`);\n    const authority = `${host}${inputContainsDefaultPort ? `:${DEFAULT_PORTS[scheme]}` : ``}`;\n    return {\n        scheme,\n        authority,\n        path: pathname,\n        normalizedPath: pathname.endsWith(\"/\") ? pathname : `${pathname}/`,\n        isIp\n    };\n}, \"parseURL\");\n// src/lib/stringEquals.ts\nvar stringEquals = /* @__PURE__ */ __name((value1, value2)=>value1 === value2, \"stringEquals\");\n// src/lib/substring.ts\nvar substring = /* @__PURE__ */ __name((input, start, stop, reverse)=>{\n    if (start >= stop || input.length < stop) {\n        return null;\n    }\n    if (!reverse) {\n        return input.substring(start, stop);\n    }\n    return input.substring(input.length - stop, input.length - start);\n}, \"substring\");\n// src/lib/uriEncode.ts\nvar uriEncode = /* @__PURE__ */ __name((value)=>encodeURIComponent(value).replace(/[!*'()]/g, (c)=>`%${c.charCodeAt(0).toString(16).toUpperCase()}`), \"uriEncode\");\n// src/utils/endpointFunctions.ts\nvar endpointFunctions = {\n    booleanEquals,\n    getAttr,\n    isSet,\n    isValidHostLabel,\n    not,\n    parseURL,\n    stringEquals,\n    substring,\n    uriEncode\n};\n// src/utils/evaluateTemplate.ts\nvar evaluateTemplate = /* @__PURE__ */ __name((template, options)=>{\n    const evaluatedTemplateArr = [];\n    const templateContext = {\n        ...options.endpointParams,\n        ...options.referenceRecord\n    };\n    let currentIndex = 0;\n    while(currentIndex < template.length){\n        const openingBraceIndex = template.indexOf(\"{\", currentIndex);\n        if (openingBraceIndex === -1) {\n            evaluatedTemplateArr.push(template.slice(currentIndex));\n            break;\n        }\n        evaluatedTemplateArr.push(template.slice(currentIndex, openingBraceIndex));\n        const closingBraceIndex = template.indexOf(\"}\", openingBraceIndex);\n        if (closingBraceIndex === -1) {\n            evaluatedTemplateArr.push(template.slice(openingBraceIndex));\n            break;\n        }\n        if (template[openingBraceIndex + 1] === \"{\" && template[closingBraceIndex + 1] === \"}\") {\n            evaluatedTemplateArr.push(template.slice(openingBraceIndex + 1, closingBraceIndex));\n            currentIndex = closingBraceIndex + 2;\n        }\n        const parameterName = template.substring(openingBraceIndex + 1, closingBraceIndex);\n        if (parameterName.includes(\"#\")) {\n            const [refName, attrName] = parameterName.split(\"#\");\n            evaluatedTemplateArr.push(getAttr(templateContext[refName], attrName));\n        } else {\n            evaluatedTemplateArr.push(templateContext[parameterName]);\n        }\n        currentIndex = closingBraceIndex + 1;\n    }\n    return evaluatedTemplateArr.join(\"\");\n}, \"evaluateTemplate\");\n// src/utils/getReferenceValue.ts\nvar getReferenceValue = /* @__PURE__ */ __name(({ ref }, options)=>{\n    const referenceRecord = {\n        ...options.endpointParams,\n        ...options.referenceRecord\n    };\n    return referenceRecord[ref];\n}, \"getReferenceValue\");\n// src/utils/evaluateExpression.ts\nvar evaluateExpression = /* @__PURE__ */ __name((obj, keyName, options)=>{\n    if (typeof obj === \"string\") {\n        return evaluateTemplate(obj, options);\n    } else if (obj[\"fn\"]) {\n        return callFunction(obj, options);\n    } else if (obj[\"ref\"]) {\n        return getReferenceValue(obj, options);\n    }\n    throw new EndpointError(`'${keyName}': ${String(obj)} is not a string, function or reference.`);\n}, \"evaluateExpression\");\n// src/utils/callFunction.ts\nvar callFunction = /* @__PURE__ */ __name(({ fn, argv }, options)=>{\n    const evaluatedArgs = argv.map((arg)=>[\n            \"boolean\",\n            \"number\"\n        ].includes(typeof arg) ? arg : evaluateExpression(arg, \"arg\", options));\n    const fnSegments = fn.split(\".\");\n    if (fnSegments[0] in customEndpointFunctions && fnSegments[1] != null) {\n        return customEndpointFunctions[fnSegments[0]][fnSegments[1]](...evaluatedArgs);\n    }\n    return endpointFunctions[fn](...evaluatedArgs);\n}, \"callFunction\");\n// src/utils/evaluateCondition.ts\nvar evaluateCondition = /* @__PURE__ */ __name(({ assign, ...fnArgs }, options)=>{\n    if (assign && assign in options.referenceRecord) {\n        throw new EndpointError(`'${assign}' is already defined in Reference Record.`);\n    }\n    const value = callFunction(fnArgs, options);\n    options.logger?.debug?.(`${debugId} evaluateCondition: ${toDebugString(fnArgs)} = ${toDebugString(value)}`);\n    return {\n        result: value === \"\" ? true : !!value,\n        ...assign != null && {\n            toAssign: {\n                name: assign,\n                value\n            }\n        }\n    };\n}, \"evaluateCondition\");\n// src/utils/evaluateConditions.ts\nvar evaluateConditions = /* @__PURE__ */ __name((conditions = [], options)=>{\n    const conditionsReferenceRecord = {};\n    for (const condition of conditions){\n        const { result, toAssign } = evaluateCondition(condition, {\n            ...options,\n            referenceRecord: {\n                ...options.referenceRecord,\n                ...conditionsReferenceRecord\n            }\n        });\n        if (!result) {\n            return {\n                result\n            };\n        }\n        if (toAssign) {\n            conditionsReferenceRecord[toAssign.name] = toAssign.value;\n            options.logger?.debug?.(`${debugId} assign: ${toAssign.name} := ${toDebugString(toAssign.value)}`);\n        }\n    }\n    return {\n        result: true,\n        referenceRecord: conditionsReferenceRecord\n    };\n}, \"evaluateConditions\");\n// src/utils/getEndpointHeaders.ts\nvar getEndpointHeaders = /* @__PURE__ */ __name((headers, options)=>Object.entries(headers).reduce((acc, [headerKey, headerVal])=>({\n            ...acc,\n            [headerKey]: headerVal.map((headerValEntry)=>{\n                const processedExpr = evaluateExpression(headerValEntry, \"Header value entry\", options);\n                if (typeof processedExpr !== \"string\") {\n                    throw new EndpointError(`Header '${headerKey}' value '${processedExpr}' is not a string`);\n                }\n                return processedExpr;\n            })\n        }), {}), \"getEndpointHeaders\");\n// src/utils/getEndpointProperty.ts\nvar getEndpointProperty = /* @__PURE__ */ __name((property, options)=>{\n    if (Array.isArray(property)) {\n        return property.map((propertyEntry)=>getEndpointProperty(propertyEntry, options));\n    }\n    switch(typeof property){\n        case \"string\":\n            return evaluateTemplate(property, options);\n        case \"object\":\n            if (property === null) {\n                throw new EndpointError(`Unexpected endpoint property: ${property}`);\n            }\n            return getEndpointProperties(property, options);\n        case \"boolean\":\n            return property;\n        default:\n            throw new EndpointError(`Unexpected endpoint property type: ${typeof property}`);\n    }\n}, \"getEndpointProperty\");\n// src/utils/getEndpointProperties.ts\nvar getEndpointProperties = /* @__PURE__ */ __name((properties, options)=>Object.entries(properties).reduce((acc, [propertyKey, propertyVal])=>({\n            ...acc,\n            [propertyKey]: getEndpointProperty(propertyVal, options)\n        }), {}), \"getEndpointProperties\");\n// src/utils/getEndpointUrl.ts\nvar getEndpointUrl = /* @__PURE__ */ __name((endpointUrl, options)=>{\n    const expression = evaluateExpression(endpointUrl, \"Endpoint URL\", options);\n    if (typeof expression === \"string\") {\n        try {\n            return new URL(expression);\n        } catch (error) {\n            console.error(`Failed to construct URL with ${expression}`, error);\n            throw error;\n        }\n    }\n    throw new EndpointError(`Endpoint URL must be a string, got ${typeof expression}`);\n}, \"getEndpointUrl\");\n// src/utils/evaluateEndpointRule.ts\nvar evaluateEndpointRule = /* @__PURE__ */ __name((endpointRule, options)=>{\n    const { conditions, endpoint } = endpointRule;\n    const { result, referenceRecord } = evaluateConditions(conditions, options);\n    if (!result) {\n        return;\n    }\n    const endpointRuleOptions = {\n        ...options,\n        referenceRecord: {\n            ...options.referenceRecord,\n            ...referenceRecord\n        }\n    };\n    const { url, properties, headers } = endpoint;\n    options.logger?.debug?.(`${debugId} Resolving endpoint from template: ${toDebugString(endpoint)}`);\n    return {\n        ...headers != void 0 && {\n            headers: getEndpointHeaders(headers, endpointRuleOptions)\n        },\n        ...properties != void 0 && {\n            properties: getEndpointProperties(properties, endpointRuleOptions)\n        },\n        url: getEndpointUrl(url, endpointRuleOptions)\n    };\n}, \"evaluateEndpointRule\");\n// src/utils/evaluateErrorRule.ts\nvar evaluateErrorRule = /* @__PURE__ */ __name((errorRule, options)=>{\n    const { conditions, error } = errorRule;\n    const { result, referenceRecord } = evaluateConditions(conditions, options);\n    if (!result) {\n        return;\n    }\n    throw new EndpointError(evaluateExpression(error, \"Error\", {\n        ...options,\n        referenceRecord: {\n            ...options.referenceRecord,\n            ...referenceRecord\n        }\n    }));\n}, \"evaluateErrorRule\");\n// src/utils/evaluateTreeRule.ts\nvar evaluateTreeRule = /* @__PURE__ */ __name((treeRule, options)=>{\n    const { conditions, rules } = treeRule;\n    const { result, referenceRecord } = evaluateConditions(conditions, options);\n    if (!result) {\n        return;\n    }\n    return evaluateRules(rules, {\n        ...options,\n        referenceRecord: {\n            ...options.referenceRecord,\n            ...referenceRecord\n        }\n    });\n}, \"evaluateTreeRule\");\n// src/utils/evaluateRules.ts\nvar evaluateRules = /* @__PURE__ */ __name((rules, options)=>{\n    for (const rule of rules){\n        if (rule.type === \"endpoint\") {\n            const endpointOrUndefined = evaluateEndpointRule(rule, options);\n            if (endpointOrUndefined) {\n                return endpointOrUndefined;\n            }\n        } else if (rule.type === \"error\") {\n            evaluateErrorRule(rule, options);\n        } else if (rule.type === \"tree\") {\n            const endpointOrUndefined = evaluateTreeRule(rule, options);\n            if (endpointOrUndefined) {\n                return endpointOrUndefined;\n            }\n        } else {\n            throw new EndpointError(`Unknown endpoint rule: ${rule}`);\n        }\n    }\n    throw new EndpointError(`Rules evaluation failed`);\n}, \"evaluateRules\");\n// src/resolveEndpoint.ts\nvar resolveEndpoint = /* @__PURE__ */ __name((ruleSetObject, options)=>{\n    const { endpointParams, logger } = options;\n    const { parameters, rules } = ruleSetObject;\n    options.logger?.debug?.(`${debugId} Initial EndpointParams: ${toDebugString(endpointParams)}`);\n    const paramsWithDefault = Object.entries(parameters).filter(([, v])=>v.default != null).map(([k, v])=>[\n            k,\n            v.default\n        ]);\n    if (paramsWithDefault.length > 0) {\n        for (const [paramKey, paramDefaultValue] of paramsWithDefault){\n            endpointParams[paramKey] = endpointParams[paramKey] ?? paramDefaultValue;\n        }\n    }\n    const requiredParams = Object.entries(parameters).filter(([, v])=>v.required).map(([k])=>k);\n    for (const requiredParam of requiredParams){\n        if (endpointParams[requiredParam] == null) {\n            throw new EndpointError(`Missing required parameter: '${requiredParam}'`);\n        }\n    }\n    const endpoint = evaluateRules(rules, {\n        endpointParams,\n        logger,\n        referenceRecord: {}\n    });\n    options.logger?.debug?.(`${debugId} Resolved endpoint: ${toDebugString(endpoint)}`);\n    return endpoint;\n}, \"resolveEndpoint\");\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/util-endpoints/dist-cjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/util-hex-encoding/dist-cjs/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@smithy/util-hex-encoding/dist-cjs/index.js ***!
  \******************************************************************/
/***/ ((module) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value)=>__defProp(target, \"name\", {\n        value,\n        configurable: true\n    });\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n    fromHex: ()=>fromHex,\n    toHex: ()=>toHex\n});\nmodule.exports = __toCommonJS(src_exports);\nvar SHORT_TO_HEX = {};\nvar HEX_TO_SHORT = {};\nfor(let i = 0; i < 256; i++){\n    let encodedByte = i.toString(16).toLowerCase();\n    if (encodedByte.length === 1) {\n        encodedByte = `0${encodedByte}`;\n    }\n    SHORT_TO_HEX[i] = encodedByte;\n    HEX_TO_SHORT[encodedByte] = i;\n}\nfunction fromHex(encoded) {\n    if (encoded.length % 2 !== 0) {\n        throw new Error(\"Hex encoded strings must have an even number length\");\n    }\n    const out = new Uint8Array(encoded.length / 2);\n    for(let i = 0; i < encoded.length; i += 2){\n        const encodedByte = encoded.slice(i, i + 2).toLowerCase();\n        if (encodedByte in HEX_TO_SHORT) {\n            out[i / 2] = HEX_TO_SHORT[encodedByte];\n        } else {\n            throw new Error(`Cannot decode unrecognized sequence ${encodedByte} as hexadecimal`);\n        }\n    }\n    return out;\n}\n__name(fromHex, \"fromHex\");\nfunction toHex(bytes) {\n    let out = \"\";\n    for(let i = 0; i < bytes.byteLength; i++){\n        out += SHORT_TO_HEX[bytes[i]];\n    }\n    return out;\n}\n__name(toHex, \"toHex\");\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLWhleC1lbmNvZGluZy9kaXN0LWNqcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsSUFBSUEsWUFBWUMsT0FBT0MsY0FBYztBQUNyQyxJQUFJQyxtQkFBbUJGLE9BQU9HLHdCQUF3QjtBQUN0RCxJQUFJQyxvQkFBb0JKLE9BQU9LLG1CQUFtQjtBQUNsRCxJQUFJQyxlQUFlTixPQUFPTyxTQUFTLENBQUNDLGNBQWM7QUFDbEQsSUFBSUMsU0FBUyxDQUFDQyxRQUFRQyxRQUFVWixVQUFVVyxRQUFRLFFBQVE7UUFBRUM7UUFBT0MsY0FBYztJQUFLO0FBQ3RGLElBQUlDLFdBQVcsQ0FBQ0gsUUFBUUk7SUFDdEIsSUFBSyxJQUFJQyxRQUFRRCxJQUNmZixVQUFVVyxRQUFRSyxNQUFNO1FBQUVDLEtBQUtGLEdBQUcsQ0FBQ0MsS0FBSztRQUFFRSxZQUFZO0lBQUs7QUFDL0Q7QUFDQSxJQUFJQyxjQUFjLENBQUNDLElBQUlDLE1BQU1DLFFBQVFDO0lBQ25DLElBQUlGLFFBQVEsT0FBT0EsU0FBUyxZQUFZLE9BQU9BLFNBQVMsWUFBWTtRQUNsRSxLQUFLLElBQUlHLE9BQU9uQixrQkFBa0JnQixNQUNoQyxJQUFJLENBQUNkLGFBQWFrQixJQUFJLENBQUNMLElBQUlJLFFBQVFBLFFBQVFGLFFBQ3pDdEIsVUFBVW9CLElBQUlJLEtBQUs7WUFBRVAsS0FBSyxJQUFNSSxJQUFJLENBQUNHLElBQUk7WUFBRU4sWUFBWSxDQUFFSyxDQUFBQSxPQUFPcEIsaUJBQWlCa0IsTUFBTUcsSUFBRyxLQUFNRCxLQUFLTCxVQUFVO1FBQUM7SUFDdEg7SUFDQSxPQUFPRTtBQUNUO0FBQ0EsSUFBSU0sZUFBZSxDQUFDQyxNQUFRUixZQUFZbkIsVUFBVSxDQUFDLEdBQUcsY0FBYztRQUFFWSxPQUFPO0lBQUssSUFBSWU7QUFFdEYsZUFBZTtBQUNmLElBQUlDLGNBQWMsQ0FBQztBQUNuQmQsU0FBU2MsYUFBYTtJQUNwQkMsU0FBUyxJQUFNQTtJQUNmQyxPQUFPLElBQU1BO0FBQ2Y7QUFDQUMsT0FBT0MsT0FBTyxHQUFHTixhQUFhRTtBQUM5QixJQUFJSyxlQUFlLENBQUM7QUFDcEIsSUFBSUMsZUFBZSxDQUFDO0FBQ3BCLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJLEtBQUtBLElBQUs7SUFDNUIsSUFBSUMsY0FBY0QsRUFBRUUsUUFBUSxDQUFDLElBQUlDLFdBQVc7SUFDNUMsSUFBSUYsWUFBWUcsTUFBTSxLQUFLLEdBQUc7UUFDNUJILGNBQWMsQ0FBQyxDQUFDLEVBQUVBLFlBQVksQ0FBQztJQUNqQztJQUNBSCxZQUFZLENBQUNFLEVBQUUsR0FBR0M7SUFDbEJGLFlBQVksQ0FBQ0UsWUFBWSxHQUFHRDtBQUM5QjtBQUNBLFNBQVNOLFFBQVFXLE9BQU87SUFDdEIsSUFBSUEsUUFBUUQsTUFBTSxHQUFHLE1BQU0sR0FBRztRQUM1QixNQUFNLElBQUlFLE1BQU07SUFDbEI7SUFDQSxNQUFNQyxNQUFNLElBQUlDLFdBQVdILFFBQVFELE1BQU0sR0FBRztJQUM1QyxJQUFLLElBQUlKLElBQUksR0FBR0EsSUFBSUssUUFBUUQsTUFBTSxFQUFFSixLQUFLLEVBQUc7UUFDMUMsTUFBTUMsY0FBY0ksUUFBUUksS0FBSyxDQUFDVCxHQUFHQSxJQUFJLEdBQUdHLFdBQVc7UUFDdkQsSUFBSUYsZUFBZUYsY0FBYztZQUMvQlEsR0FBRyxDQUFDUCxJQUFJLEVBQUUsR0FBR0QsWUFBWSxDQUFDRSxZQUFZO1FBQ3hDLE9BQU87WUFDTCxNQUFNLElBQUlLLE1BQU0sQ0FBQyxvQ0FBb0MsRUFBRUwsWUFBWSxlQUFlLENBQUM7UUFDckY7SUFDRjtJQUNBLE9BQU9NO0FBQ1Q7QUFDQWhDLE9BQU9tQixTQUFTO0FBQ2hCLFNBQVNDLE1BQU1lLEtBQUs7SUFDbEIsSUFBSUgsTUFBTTtJQUNWLElBQUssSUFBSVAsSUFBSSxHQUFHQSxJQUFJVSxNQUFNQyxVQUFVLEVBQUVYLElBQUs7UUFDekNPLE9BQU9ULFlBQVksQ0FBQ1ksS0FBSyxDQUFDVixFQUFFLENBQUM7SUFDL0I7SUFDQSxPQUFPTztBQUNUO0FBQ0FoQyxPQUFPb0IsT0FBTztBQUNkLDZEQUE2RDtBQUU3RCxLQUFNQyxDQUFBQSxDQUdOIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2xvdWRzaGlmdC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3V0aWwtaGV4LWVuY29kaW5nL2Rpc3QtY2pzL2luZGV4LmpzPzk5M2UiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19uYW1lID0gKHRhcmdldCwgdmFsdWUpID0+IF9fZGVmUHJvcCh0YXJnZXQsIFwibmFtZVwiLCB7IHZhbHVlLCBjb25maWd1cmFibGU6IHRydWUgfSk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcblxuLy8gc3JjL2luZGV4LnRzXG52YXIgc3JjX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KHNyY19leHBvcnRzLCB7XG4gIGZyb21IZXg6ICgpID0+IGZyb21IZXgsXG4gIHRvSGV4OiAoKSA9PiB0b0hleFxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhzcmNfZXhwb3J0cyk7XG52YXIgU0hPUlRfVE9fSEVYID0ge307XG52YXIgSEVYX1RPX1NIT1JUID0ge307XG5mb3IgKGxldCBpID0gMDsgaSA8IDI1NjsgaSsrKSB7XG4gIGxldCBlbmNvZGVkQnl0ZSA9IGkudG9TdHJpbmcoMTYpLnRvTG93ZXJDYXNlKCk7XG4gIGlmIChlbmNvZGVkQnl0ZS5sZW5ndGggPT09IDEpIHtcbiAgICBlbmNvZGVkQnl0ZSA9IGAwJHtlbmNvZGVkQnl0ZX1gO1xuICB9XG4gIFNIT1JUX1RPX0hFWFtpXSA9IGVuY29kZWRCeXRlO1xuICBIRVhfVE9fU0hPUlRbZW5jb2RlZEJ5dGVdID0gaTtcbn1cbmZ1bmN0aW9uIGZyb21IZXgoZW5jb2RlZCkge1xuICBpZiAoZW5jb2RlZC5sZW5ndGggJSAyICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiSGV4IGVuY29kZWQgc3RyaW5ncyBtdXN0IGhhdmUgYW4gZXZlbiBudW1iZXIgbGVuZ3RoXCIpO1xuICB9XG4gIGNvbnN0IG91dCA9IG5ldyBVaW50OEFycmF5KGVuY29kZWQubGVuZ3RoIC8gMik7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZW5jb2RlZC5sZW5ndGg7IGkgKz0gMikge1xuICAgIGNvbnN0IGVuY29kZWRCeXRlID0gZW5jb2RlZC5zbGljZShpLCBpICsgMikudG9Mb3dlckNhc2UoKTtcbiAgICBpZiAoZW5jb2RlZEJ5dGUgaW4gSEVYX1RPX1NIT1JUKSB7XG4gICAgICBvdXRbaSAvIDJdID0gSEVYX1RPX1NIT1JUW2VuY29kZWRCeXRlXTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgZGVjb2RlIHVucmVjb2duaXplZCBzZXF1ZW5jZSAke2VuY29kZWRCeXRlfSBhcyBoZXhhZGVjaW1hbGApO1xuICAgIH1cbiAgfVxuICByZXR1cm4gb3V0O1xufVxuX19uYW1lKGZyb21IZXgsIFwiZnJvbUhleFwiKTtcbmZ1bmN0aW9uIHRvSGV4KGJ5dGVzKSB7XG4gIGxldCBvdXQgPSBcIlwiO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGJ5dGVzLmJ5dGVMZW5ndGg7IGkrKykge1xuICAgIG91dCArPSBTSE9SVF9UT19IRVhbYnl0ZXNbaV1dO1xuICB9XG4gIHJldHVybiBvdXQ7XG59XG5fX25hbWUodG9IZXgsIFwidG9IZXhcIik7XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG5cbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBmcm9tSGV4LFxuICB0b0hleFxufSk7XG5cbiJdLCJuYW1lcyI6WyJfX2RlZlByb3AiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsIl9fZ2V0T3duUHJvcERlc2MiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJfX2dldE93blByb3BOYW1lcyIsImdldE93blByb3BlcnR5TmFtZXMiLCJfX2hhc093blByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsIl9fbmFtZSIsInRhcmdldCIsInZhbHVlIiwiY29uZmlndXJhYmxlIiwiX19leHBvcnQiLCJhbGwiLCJuYW1lIiwiZ2V0IiwiZW51bWVyYWJsZSIsIl9fY29weVByb3BzIiwidG8iLCJmcm9tIiwiZXhjZXB0IiwiZGVzYyIsImtleSIsImNhbGwiLCJfX3RvQ29tbW9uSlMiLCJtb2QiLCJzcmNfZXhwb3J0cyIsImZyb21IZXgiLCJ0b0hleCIsIm1vZHVsZSIsImV4cG9ydHMiLCJTSE9SVF9UT19IRVgiLCJIRVhfVE9fU0hPUlQiLCJpIiwiZW5jb2RlZEJ5dGUiLCJ0b1N0cmluZyIsInRvTG93ZXJDYXNlIiwibGVuZ3RoIiwiZW5jb2RlZCIsIkVycm9yIiwib3V0IiwiVWludDhBcnJheSIsInNsaWNlIiwiYnl0ZXMiLCJieXRlTGVuZ3RoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/util-hex-encoding/dist-cjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/util-middleware/dist-cjs/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@smithy/util-middleware/dist-cjs/index.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value)=>__defProp(target, \"name\", {\n        value,\n        configurable: true\n    });\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n    getSmithyContext: ()=>getSmithyContext,\n    normalizeProvider: ()=>normalizeProvider\n});\nmodule.exports = __toCommonJS(src_exports);\n// src/getSmithyContext.ts\nvar import_types = __webpack_require__(/*! @smithy/types */ \"(rsc)/./node_modules/@smithy/types/dist-cjs/index.js\");\nvar getSmithyContext = /* @__PURE__ */ __name((context)=>context[import_types.SMITHY_CONTEXT_KEY] || (context[import_types.SMITHY_CONTEXT_KEY] = {}), \"getSmithyContext\");\n// src/normalizeProvider.ts\nvar normalizeProvider = /* @__PURE__ */ __name((input)=>{\n    if (typeof input === \"function\") return input;\n    const promisified = Promise.resolve(input);\n    return ()=>promisified;\n}, \"normalizeProvider\");\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLW1pZGRsZXdhcmUvZGlzdC1janMvaW5kZXguanMiLCJtYXBwaW5ncyI6IjtBQUFBLElBQUlBLFlBQVlDLE9BQU9DLGNBQWM7QUFDckMsSUFBSUMsbUJBQW1CRixPQUFPRyx3QkFBd0I7QUFDdEQsSUFBSUMsb0JBQW9CSixPQUFPSyxtQkFBbUI7QUFDbEQsSUFBSUMsZUFBZU4sT0FBT08sU0FBUyxDQUFDQyxjQUFjO0FBQ2xELElBQUlDLFNBQVMsQ0FBQ0MsUUFBUUMsUUFBVVosVUFBVVcsUUFBUSxRQUFRO1FBQUVDO1FBQU9DLGNBQWM7SUFBSztBQUN0RixJQUFJQyxXQUFXLENBQUNILFFBQVFJO0lBQ3RCLElBQUssSUFBSUMsUUFBUUQsSUFDZmYsVUFBVVcsUUFBUUssTUFBTTtRQUFFQyxLQUFLRixHQUFHLENBQUNDLEtBQUs7UUFBRUUsWUFBWTtJQUFLO0FBQy9EO0FBQ0EsSUFBSUMsY0FBYyxDQUFDQyxJQUFJQyxNQUFNQyxRQUFRQztJQUNuQyxJQUFJRixRQUFRLE9BQU9BLFNBQVMsWUFBWSxPQUFPQSxTQUFTLFlBQVk7UUFDbEUsS0FBSyxJQUFJRyxPQUFPbkIsa0JBQWtCZ0IsTUFDaEMsSUFBSSxDQUFDZCxhQUFha0IsSUFBSSxDQUFDTCxJQUFJSSxRQUFRQSxRQUFRRixRQUN6Q3RCLFVBQVVvQixJQUFJSSxLQUFLO1lBQUVQLEtBQUssSUFBTUksSUFBSSxDQUFDRyxJQUFJO1lBQUVOLFlBQVksQ0FBRUssQ0FBQUEsT0FBT3BCLGlCQUFpQmtCLE1BQU1HLElBQUcsS0FBTUQsS0FBS0wsVUFBVTtRQUFDO0lBQ3RIO0lBQ0EsT0FBT0U7QUFDVDtBQUNBLElBQUlNLGVBQWUsQ0FBQ0MsTUFBUVIsWUFBWW5CLFVBQVUsQ0FBQyxHQUFHLGNBQWM7UUFBRVksT0FBTztJQUFLLElBQUllO0FBRXRGLGVBQWU7QUFDZixJQUFJQyxjQUFjLENBQUM7QUFDbkJkLFNBQVNjLGFBQWE7SUFDcEJDLGtCQUFrQixJQUFNQTtJQUN4QkMsbUJBQW1CLElBQU1BO0FBQzNCO0FBQ0FDLE9BQU9DLE9BQU8sR0FBR04sYUFBYUU7QUFFOUIsMEJBQTBCO0FBQzFCLElBQUlLLGVBQWVDLG1CQUFPQSxDQUFDLDJFQUFlO0FBQzFDLElBQUlMLG1CQUFtQixhQUFhLEdBQUduQixPQUFPLENBQUN5QixVQUFZQSxPQUFPLENBQUNGLGFBQWFHLGtCQUFrQixDQUFDLElBQUtELENBQUFBLE9BQU8sQ0FBQ0YsYUFBYUcsa0JBQWtCLENBQUMsR0FBRyxDQUFDLElBQUk7QUFFeEosMkJBQTJCO0FBQzNCLElBQUlOLG9CQUFvQixhQUFhLEdBQUdwQixPQUFPLENBQUMyQjtJQUM5QyxJQUFJLE9BQU9BLFVBQVUsWUFDbkIsT0FBT0E7SUFDVCxNQUFNQyxjQUFjQyxRQUFRQyxPQUFPLENBQUNIO0lBQ3BDLE9BQU8sSUFBTUM7QUFDZixHQUFHO0FBQ0gsNkRBQTZEO0FBRTdELEtBQU1QLENBQUFBLENBR04iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbG91ZHNoaWZ0Ly4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvdXRpbC1taWRkbGV3YXJlL2Rpc3QtY2pzL2luZGV4LmpzP2IzNzYiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19uYW1lID0gKHRhcmdldCwgdmFsdWUpID0+IF9fZGVmUHJvcCh0YXJnZXQsIFwibmFtZVwiLCB7IHZhbHVlLCBjb25maWd1cmFibGU6IHRydWUgfSk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcblxuLy8gc3JjL2luZGV4LnRzXG52YXIgc3JjX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KHNyY19leHBvcnRzLCB7XG4gIGdldFNtaXRoeUNvbnRleHQ6ICgpID0+IGdldFNtaXRoeUNvbnRleHQsXG4gIG5vcm1hbGl6ZVByb3ZpZGVyOiAoKSA9PiBub3JtYWxpemVQcm92aWRlclxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhzcmNfZXhwb3J0cyk7XG5cbi8vIHNyYy9nZXRTbWl0aHlDb250ZXh0LnRzXG52YXIgaW1wb3J0X3R5cGVzID0gcmVxdWlyZShcIkBzbWl0aHkvdHlwZXNcIik7XG52YXIgZ2V0U21pdGh5Q29udGV4dCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGNvbnRleHQpID0+IGNvbnRleHRbaW1wb3J0X3R5cGVzLlNNSVRIWV9DT05URVhUX0tFWV0gfHwgKGNvbnRleHRbaW1wb3J0X3R5cGVzLlNNSVRIWV9DT05URVhUX0tFWV0gPSB7fSksIFwiZ2V0U21pdGh5Q29udGV4dFwiKTtcblxuLy8gc3JjL25vcm1hbGl6ZVByb3ZpZGVyLnRzXG52YXIgbm9ybWFsaXplUHJvdmlkZXIgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChpbnB1dCkgPT4ge1xuICBpZiAodHlwZW9mIGlucHV0ID09PSBcImZ1bmN0aW9uXCIpXG4gICAgcmV0dXJuIGlucHV0O1xuICBjb25zdCBwcm9taXNpZmllZCA9IFByb21pc2UucmVzb2x2ZShpbnB1dCk7XG4gIHJldHVybiAoKSA9PiBwcm9taXNpZmllZDtcbn0sIFwibm9ybWFsaXplUHJvdmlkZXJcIik7XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG5cbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRTbWl0aHlDb250ZXh0LFxuICBub3JtYWxpemVQcm92aWRlclxufSk7XG5cbiJdLCJuYW1lcyI6WyJfX2RlZlByb3AiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsIl9fZ2V0T3duUHJvcERlc2MiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJfX2dldE93blByb3BOYW1lcyIsImdldE93blByb3BlcnR5TmFtZXMiLCJfX2hhc093blByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsIl9fbmFtZSIsInRhcmdldCIsInZhbHVlIiwiY29uZmlndXJhYmxlIiwiX19leHBvcnQiLCJhbGwiLCJuYW1lIiwiZ2V0IiwiZW51bWVyYWJsZSIsIl9fY29weVByb3BzIiwidG8iLCJmcm9tIiwiZXhjZXB0IiwiZGVzYyIsImtleSIsImNhbGwiLCJfX3RvQ29tbW9uSlMiLCJtb2QiLCJzcmNfZXhwb3J0cyIsImdldFNtaXRoeUNvbnRleHQiLCJub3JtYWxpemVQcm92aWRlciIsIm1vZHVsZSIsImV4cG9ydHMiLCJpbXBvcnRfdHlwZXMiLCJyZXF1aXJlIiwiY29udGV4dCIsIlNNSVRIWV9DT05URVhUX0tFWSIsImlucHV0IiwicHJvbWlzaWZpZWQiLCJQcm9taXNlIiwicmVzb2x2ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/util-middleware/dist-cjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/util-retry/dist-cjs/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@smithy/util-retry/dist-cjs/index.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value)=>__defProp(target, \"name\", {\n        value,\n        configurable: true\n    });\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n    AdaptiveRetryStrategy: ()=>AdaptiveRetryStrategy,\n    ConfiguredRetryStrategy: ()=>ConfiguredRetryStrategy,\n    DEFAULT_MAX_ATTEMPTS: ()=>DEFAULT_MAX_ATTEMPTS,\n    DEFAULT_RETRY_DELAY_BASE: ()=>DEFAULT_RETRY_DELAY_BASE,\n    DEFAULT_RETRY_MODE: ()=>DEFAULT_RETRY_MODE,\n    DefaultRateLimiter: ()=>DefaultRateLimiter,\n    INITIAL_RETRY_TOKENS: ()=>INITIAL_RETRY_TOKENS,\n    INVOCATION_ID_HEADER: ()=>INVOCATION_ID_HEADER,\n    MAXIMUM_RETRY_DELAY: ()=>MAXIMUM_RETRY_DELAY,\n    NO_RETRY_INCREMENT: ()=>NO_RETRY_INCREMENT,\n    REQUEST_HEADER: ()=>REQUEST_HEADER,\n    RETRY_COST: ()=>RETRY_COST,\n    RETRY_MODES: ()=>RETRY_MODES,\n    StandardRetryStrategy: ()=>StandardRetryStrategy,\n    THROTTLING_RETRY_DELAY_BASE: ()=>THROTTLING_RETRY_DELAY_BASE,\n    TIMEOUT_RETRY_COST: ()=>TIMEOUT_RETRY_COST\n});\nmodule.exports = __toCommonJS(src_exports);\n// src/config.ts\nvar RETRY_MODES = /* @__PURE__ */ ((RETRY_MODES2)=>{\n    RETRY_MODES2[\"STANDARD\"] = \"standard\";\n    RETRY_MODES2[\"ADAPTIVE\"] = \"adaptive\";\n    return RETRY_MODES2;\n})(RETRY_MODES || {});\nvar DEFAULT_MAX_ATTEMPTS = 3;\nvar DEFAULT_RETRY_MODE = \"standard\" /* STANDARD */ ;\n// src/DefaultRateLimiter.ts\nvar import_service_error_classification = __webpack_require__(/*! @smithy/service-error-classification */ \"(rsc)/./node_modules/@smithy/service-error-classification/dist-cjs/index.js\");\nvar DefaultRateLimiter = class _DefaultRateLimiter {\n    constructor(options){\n        // Pre-set state variables\n        this.currentCapacity = 0;\n        this.enabled = false;\n        this.lastMaxRate = 0;\n        this.measuredTxRate = 0;\n        this.requestCount = 0;\n        this.lastTimestamp = 0;\n        this.timeWindow = 0;\n        this.beta = options?.beta ?? 0.7;\n        this.minCapacity = options?.minCapacity ?? 1;\n        this.minFillRate = options?.minFillRate ?? 0.5;\n        this.scaleConstant = options?.scaleConstant ?? 0.4;\n        this.smooth = options?.smooth ?? 0.8;\n        const currentTimeInSeconds = this.getCurrentTimeInSeconds();\n        this.lastThrottleTime = currentTimeInSeconds;\n        this.lastTxRateBucket = Math.floor(this.getCurrentTimeInSeconds());\n        this.fillRate = this.minFillRate;\n        this.maxCapacity = this.minCapacity;\n    }\n    static{\n        __name(this, \"DefaultRateLimiter\");\n    }\n    static{\n        /**\n     * Only used in testing.\n     */ this.setTimeoutFn = setTimeout;\n    }\n    getCurrentTimeInSeconds() {\n        return Date.now() / 1e3;\n    }\n    async getSendToken() {\n        return this.acquireTokenBucket(1);\n    }\n    async acquireTokenBucket(amount) {\n        if (!this.enabled) {\n            return;\n        }\n        this.refillTokenBucket();\n        if (amount > this.currentCapacity) {\n            const delay = (amount - this.currentCapacity) / this.fillRate * 1e3;\n            await new Promise((resolve)=>_DefaultRateLimiter.setTimeoutFn(resolve, delay));\n        }\n        this.currentCapacity = this.currentCapacity - amount;\n    }\n    refillTokenBucket() {\n        const timestamp = this.getCurrentTimeInSeconds();\n        if (!this.lastTimestamp) {\n            this.lastTimestamp = timestamp;\n            return;\n        }\n        const fillAmount = (timestamp - this.lastTimestamp) * this.fillRate;\n        this.currentCapacity = Math.min(this.maxCapacity, this.currentCapacity + fillAmount);\n        this.lastTimestamp = timestamp;\n    }\n    updateClientSendingRate(response) {\n        let calculatedRate;\n        this.updateMeasuredRate();\n        if ((0, import_service_error_classification.isThrottlingError)(response)) {\n            const rateToUse = !this.enabled ? this.measuredTxRate : Math.min(this.measuredTxRate, this.fillRate);\n            this.lastMaxRate = rateToUse;\n            this.calculateTimeWindow();\n            this.lastThrottleTime = this.getCurrentTimeInSeconds();\n            calculatedRate = this.cubicThrottle(rateToUse);\n            this.enableTokenBucket();\n        } else {\n            this.calculateTimeWindow();\n            calculatedRate = this.cubicSuccess(this.getCurrentTimeInSeconds());\n        }\n        const newRate = Math.min(calculatedRate, 2 * this.measuredTxRate);\n        this.updateTokenBucketRate(newRate);\n    }\n    calculateTimeWindow() {\n        this.timeWindow = this.getPrecise(Math.pow(this.lastMaxRate * (1 - this.beta) / this.scaleConstant, 1 / 3));\n    }\n    cubicThrottle(rateToUse) {\n        return this.getPrecise(rateToUse * this.beta);\n    }\n    cubicSuccess(timestamp) {\n        return this.getPrecise(this.scaleConstant * Math.pow(timestamp - this.lastThrottleTime - this.timeWindow, 3) + this.lastMaxRate);\n    }\n    enableTokenBucket() {\n        this.enabled = true;\n    }\n    updateTokenBucketRate(newRate) {\n        this.refillTokenBucket();\n        this.fillRate = Math.max(newRate, this.minFillRate);\n        this.maxCapacity = Math.max(newRate, this.minCapacity);\n        this.currentCapacity = Math.min(this.currentCapacity, this.maxCapacity);\n    }\n    updateMeasuredRate() {\n        const t = this.getCurrentTimeInSeconds();\n        const timeBucket = Math.floor(t * 2) / 2;\n        this.requestCount++;\n        if (timeBucket > this.lastTxRateBucket) {\n            const currentRate = this.requestCount / (timeBucket - this.lastTxRateBucket);\n            this.measuredTxRate = this.getPrecise(currentRate * this.smooth + this.measuredTxRate * (1 - this.smooth));\n            this.requestCount = 0;\n            this.lastTxRateBucket = timeBucket;\n        }\n    }\n    getPrecise(num) {\n        return parseFloat(num.toFixed(8));\n    }\n};\n// src/constants.ts\nvar DEFAULT_RETRY_DELAY_BASE = 100;\nvar MAXIMUM_RETRY_DELAY = 20 * 1e3;\nvar THROTTLING_RETRY_DELAY_BASE = 500;\nvar INITIAL_RETRY_TOKENS = 500;\nvar RETRY_COST = 5;\nvar TIMEOUT_RETRY_COST = 10;\nvar NO_RETRY_INCREMENT = 1;\nvar INVOCATION_ID_HEADER = \"amz-sdk-invocation-id\";\nvar REQUEST_HEADER = \"amz-sdk-request\";\n// src/defaultRetryBackoffStrategy.ts\nvar getDefaultRetryBackoffStrategy = /* @__PURE__ */ __name(()=>{\n    let delayBase = DEFAULT_RETRY_DELAY_BASE;\n    const computeNextBackoffDelay = /* @__PURE__ */ __name((attempts)=>{\n        return Math.floor(Math.min(MAXIMUM_RETRY_DELAY, Math.random() * 2 ** attempts * delayBase));\n    }, \"computeNextBackoffDelay\");\n    const setDelayBase = /* @__PURE__ */ __name((delay)=>{\n        delayBase = delay;\n    }, \"setDelayBase\");\n    return {\n        computeNextBackoffDelay,\n        setDelayBase\n    };\n}, \"getDefaultRetryBackoffStrategy\");\n// src/defaultRetryToken.ts\nvar createDefaultRetryToken = /* @__PURE__ */ __name(({ retryDelay, retryCount, retryCost })=>{\n    const getRetryCount = /* @__PURE__ */ __name(()=>retryCount, \"getRetryCount\");\n    const getRetryDelay = /* @__PURE__ */ __name(()=>Math.min(MAXIMUM_RETRY_DELAY, retryDelay), \"getRetryDelay\");\n    const getRetryCost = /* @__PURE__ */ __name(()=>retryCost, \"getRetryCost\");\n    return {\n        getRetryCount,\n        getRetryDelay,\n        getRetryCost\n    };\n}, \"createDefaultRetryToken\");\n// src/StandardRetryStrategy.ts\nvar StandardRetryStrategy = class {\n    constructor(maxAttempts){\n        this.maxAttempts = maxAttempts;\n        this.mode = \"standard\" /* STANDARD */ ;\n        this.capacity = INITIAL_RETRY_TOKENS;\n        this.retryBackoffStrategy = getDefaultRetryBackoffStrategy();\n        this.maxAttemptsProvider = typeof maxAttempts === \"function\" ? maxAttempts : async ()=>maxAttempts;\n    }\n    static{\n        __name(this, \"StandardRetryStrategy\");\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    async acquireInitialRetryToken(retryTokenScope) {\n        return createDefaultRetryToken({\n            retryDelay: DEFAULT_RETRY_DELAY_BASE,\n            retryCount: 0\n        });\n    }\n    async refreshRetryTokenForRetry(token, errorInfo) {\n        const maxAttempts = await this.getMaxAttempts();\n        if (this.shouldRetry(token, errorInfo, maxAttempts)) {\n            const errorType = errorInfo.errorType;\n            this.retryBackoffStrategy.setDelayBase(errorType === \"THROTTLING\" ? THROTTLING_RETRY_DELAY_BASE : DEFAULT_RETRY_DELAY_BASE);\n            const delayFromErrorType = this.retryBackoffStrategy.computeNextBackoffDelay(token.getRetryCount());\n            const retryDelay = errorInfo.retryAfterHint ? Math.max(errorInfo.retryAfterHint.getTime() - Date.now() || 0, delayFromErrorType) : delayFromErrorType;\n            const capacityCost = this.getCapacityCost(errorType);\n            this.capacity -= capacityCost;\n            return createDefaultRetryToken({\n                retryDelay,\n                retryCount: token.getRetryCount() + 1,\n                retryCost: capacityCost\n            });\n        }\n        throw new Error(\"No retry token available\");\n    }\n    recordSuccess(token) {\n        this.capacity = Math.max(INITIAL_RETRY_TOKENS, this.capacity + (token.getRetryCost() ?? NO_RETRY_INCREMENT));\n    }\n    /**\n   * @returns the current available retry capacity.\n   *\n   * This number decreases when retries are executed and refills when requests or retries succeed.\n   */ getCapacity() {\n        return this.capacity;\n    }\n    async getMaxAttempts() {\n        try {\n            return await this.maxAttemptsProvider();\n        } catch (error) {\n            console.warn(`Max attempts provider could not resolve. Using default of ${DEFAULT_MAX_ATTEMPTS}`);\n            return DEFAULT_MAX_ATTEMPTS;\n        }\n    }\n    shouldRetry(tokenToRenew, errorInfo, maxAttempts) {\n        const attempts = tokenToRenew.getRetryCount() + 1;\n        return attempts < maxAttempts && this.capacity >= this.getCapacityCost(errorInfo.errorType) && this.isRetryableError(errorInfo.errorType);\n    }\n    getCapacityCost(errorType) {\n        return errorType === \"TRANSIENT\" ? TIMEOUT_RETRY_COST : RETRY_COST;\n    }\n    isRetryableError(errorType) {\n        return errorType === \"THROTTLING\" || errorType === \"TRANSIENT\";\n    }\n};\n// src/AdaptiveRetryStrategy.ts\nvar AdaptiveRetryStrategy = class {\n    constructor(maxAttemptsProvider, options){\n        this.maxAttemptsProvider = maxAttemptsProvider;\n        this.mode = \"adaptive\" /* ADAPTIVE */ ;\n        const { rateLimiter } = options ?? {};\n        this.rateLimiter = rateLimiter ?? new DefaultRateLimiter();\n        this.standardRetryStrategy = new StandardRetryStrategy(maxAttemptsProvider);\n    }\n    static{\n        __name(this, \"AdaptiveRetryStrategy\");\n    }\n    async acquireInitialRetryToken(retryTokenScope) {\n        await this.rateLimiter.getSendToken();\n        return this.standardRetryStrategy.acquireInitialRetryToken(retryTokenScope);\n    }\n    async refreshRetryTokenForRetry(tokenToRenew, errorInfo) {\n        this.rateLimiter.updateClientSendingRate(errorInfo);\n        return this.standardRetryStrategy.refreshRetryTokenForRetry(tokenToRenew, errorInfo);\n    }\n    recordSuccess(token) {\n        this.rateLimiter.updateClientSendingRate({});\n        this.standardRetryStrategy.recordSuccess(token);\n    }\n};\n// src/ConfiguredRetryStrategy.ts\nvar ConfiguredRetryStrategy = class extends StandardRetryStrategy {\n    static{\n        __name(this, \"ConfiguredRetryStrategy\");\n    }\n    /**\n   * @param maxAttempts - the maximum number of retry attempts allowed.\n   *                      e.g., if set to 3, then 4 total requests are possible.\n   * @param computeNextBackoffDelay - a millisecond delay for each retry or a function that takes the retry attempt\n   *                                  and returns the delay.\n   *\n   * @example exponential backoff.\n   * ```js\n   * new Client({\n   *   retryStrategy: new ConfiguredRetryStrategy(3, (attempt) => attempt ** 2)\n   * });\n   * ```\n   * @example constant delay.\n   * ```js\n   * new Client({\n   *   retryStrategy: new ConfiguredRetryStrategy(3, 2000)\n   * });\n   * ```\n   */ constructor(maxAttempts, computeNextBackoffDelay = DEFAULT_RETRY_DELAY_BASE){\n        super(typeof maxAttempts === \"function\" ? maxAttempts : async ()=>maxAttempts);\n        if (typeof computeNextBackoffDelay === \"number\") {\n            this.computeNextBackoffDelay = ()=>computeNextBackoffDelay;\n        } else {\n            this.computeNextBackoffDelay = computeNextBackoffDelay;\n        }\n    }\n    async refreshRetryTokenForRetry(tokenToRenew, errorInfo) {\n        const token = await super.refreshRetryTokenForRetry(tokenToRenew, errorInfo);\n        token.getRetryDelay = ()=>this.computeNextBackoffDelay(token.getRetryCount());\n        return token;\n    }\n};\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/util-retry/dist-cjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/util-stream/dist-cjs/ByteArrayCollector.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@smithy/util-stream/dist-cjs/ByteArrayCollector.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ByteArrayCollector = void 0;\nclass ByteArrayCollector {\n    constructor(allocByteArray){\n        this.allocByteArray = allocByteArray;\n        this.byteLength = 0;\n        this.byteArrays = [];\n    }\n    push(byteArray) {\n        this.byteArrays.push(byteArray);\n        this.byteLength += byteArray.byteLength;\n    }\n    flush() {\n        if (this.byteArrays.length === 1) {\n            const bytes = this.byteArrays[0];\n            this.reset();\n            return bytes;\n        }\n        const aggregation = this.allocByteArray(this.byteLength);\n        let cursor = 0;\n        for(let i = 0; i < this.byteArrays.length; ++i){\n            const bytes = this.byteArrays[i];\n            aggregation.set(bytes, cursor);\n            cursor += bytes.byteLength;\n        }\n        this.reset();\n        return aggregation;\n    }\n    reset() {\n        this.byteArrays = [];\n        this.byteLength = 0;\n    }\n}\nexports.ByteArrayCollector = ByteArrayCollector;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLXN0cmVhbS9kaXN0LWNqcy9CeXRlQXJyYXlDb2xsZWN0b3IuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELDBCQUEwQixHQUFHLEtBQUs7QUFDbEMsTUFBTUU7SUFDRkMsWUFBWUMsY0FBYyxDQUFFO1FBQ3hCLElBQUksQ0FBQ0EsY0FBYyxHQUFHQTtRQUN0QixJQUFJLENBQUNDLFVBQVUsR0FBRztRQUNsQixJQUFJLENBQUNDLFVBQVUsR0FBRyxFQUFFO0lBQ3hCO0lBQ0FDLEtBQUtDLFNBQVMsRUFBRTtRQUNaLElBQUksQ0FBQ0YsVUFBVSxDQUFDQyxJQUFJLENBQUNDO1FBQ3JCLElBQUksQ0FBQ0gsVUFBVSxJQUFJRyxVQUFVSCxVQUFVO0lBQzNDO0lBQ0FJLFFBQVE7UUFDSixJQUFJLElBQUksQ0FBQ0gsVUFBVSxDQUFDSSxNQUFNLEtBQUssR0FBRztZQUM5QixNQUFNQyxRQUFRLElBQUksQ0FBQ0wsVUFBVSxDQUFDLEVBQUU7WUFDaEMsSUFBSSxDQUFDTSxLQUFLO1lBQ1YsT0FBT0Q7UUFDWDtRQUNBLE1BQU1FLGNBQWMsSUFBSSxDQUFDVCxjQUFjLENBQUMsSUFBSSxDQUFDQyxVQUFVO1FBQ3ZELElBQUlTLFNBQVM7UUFDYixJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSSxJQUFJLENBQUNULFVBQVUsQ0FBQ0ksTUFBTSxFQUFFLEVBQUVLLEVBQUc7WUFDN0MsTUFBTUosUUFBUSxJQUFJLENBQUNMLFVBQVUsQ0FBQ1MsRUFBRTtZQUNoQ0YsWUFBWUcsR0FBRyxDQUFDTCxPQUFPRztZQUN2QkEsVUFBVUgsTUFBTU4sVUFBVTtRQUM5QjtRQUNBLElBQUksQ0FBQ08sS0FBSztRQUNWLE9BQU9DO0lBQ1g7SUFDQUQsUUFBUTtRQUNKLElBQUksQ0FBQ04sVUFBVSxHQUFHLEVBQUU7UUFDcEIsSUFBSSxDQUFDRCxVQUFVLEdBQUc7SUFDdEI7QUFDSjtBQUNBTCwwQkFBMEIsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbG91ZHNoaWZ0Ly4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvdXRpbC1zdHJlYW0vZGlzdC1janMvQnl0ZUFycmF5Q29sbGVjdG9yLmpzP2U3NWQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkJ5dGVBcnJheUNvbGxlY3RvciA9IHZvaWQgMDtcbmNsYXNzIEJ5dGVBcnJheUNvbGxlY3RvciB7XG4gICAgY29uc3RydWN0b3IoYWxsb2NCeXRlQXJyYXkpIHtcbiAgICAgICAgdGhpcy5hbGxvY0J5dGVBcnJheSA9IGFsbG9jQnl0ZUFycmF5O1xuICAgICAgICB0aGlzLmJ5dGVMZW5ndGggPSAwO1xuICAgICAgICB0aGlzLmJ5dGVBcnJheXMgPSBbXTtcbiAgICB9XG4gICAgcHVzaChieXRlQXJyYXkpIHtcbiAgICAgICAgdGhpcy5ieXRlQXJyYXlzLnB1c2goYnl0ZUFycmF5KTtcbiAgICAgICAgdGhpcy5ieXRlTGVuZ3RoICs9IGJ5dGVBcnJheS5ieXRlTGVuZ3RoO1xuICAgIH1cbiAgICBmbHVzaCgpIHtcbiAgICAgICAgaWYgKHRoaXMuYnl0ZUFycmF5cy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIGNvbnN0IGJ5dGVzID0gdGhpcy5ieXRlQXJyYXlzWzBdO1xuICAgICAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgICAgICAgICAgcmV0dXJuIGJ5dGVzO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGFnZ3JlZ2F0aW9uID0gdGhpcy5hbGxvY0J5dGVBcnJheSh0aGlzLmJ5dGVMZW5ndGgpO1xuICAgICAgICBsZXQgY3Vyc29yID0gMDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmJ5dGVBcnJheXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IGJ5dGVzID0gdGhpcy5ieXRlQXJyYXlzW2ldO1xuICAgICAgICAgICAgYWdncmVnYXRpb24uc2V0KGJ5dGVzLCBjdXJzb3IpO1xuICAgICAgICAgICAgY3Vyc29yICs9IGJ5dGVzLmJ5dGVMZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgICAgICByZXR1cm4gYWdncmVnYXRpb247XG4gICAgfVxuICAgIHJlc2V0KCkge1xuICAgICAgICB0aGlzLmJ5dGVBcnJheXMgPSBbXTtcbiAgICAgICAgdGhpcy5ieXRlTGVuZ3RoID0gMDtcbiAgICB9XG59XG5leHBvcnRzLkJ5dGVBcnJheUNvbGxlY3RvciA9IEJ5dGVBcnJheUNvbGxlY3RvcjtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkJ5dGVBcnJheUNvbGxlY3RvciIsImNvbnN0cnVjdG9yIiwiYWxsb2NCeXRlQXJyYXkiLCJieXRlTGVuZ3RoIiwiYnl0ZUFycmF5cyIsInB1c2giLCJieXRlQXJyYXkiLCJmbHVzaCIsImxlbmd0aCIsImJ5dGVzIiwicmVzZXQiLCJhZ2dyZWdhdGlvbiIsImN1cnNvciIsImkiLCJzZXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/util-stream/dist-cjs/ByteArrayCollector.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/util-stream/dist-cjs/checksum/ChecksumStream.browser.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@smithy/util-stream/dist-cjs/checksum/ChecksumStream.browser.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ChecksumStream = void 0;\nconst ReadableStreamRef = typeof ReadableStream === \"function\" ? ReadableStream : function() {};\nclass ChecksumStream extends ReadableStreamRef {\n}\nexports.ChecksumStream = ChecksumStream;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLXN0cmVhbS9kaXN0LWNqcy9jaGVja3N1bS9DaGVja3N1bVN0cmVhbS5icm93c2VyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxzQkFBc0IsR0FBRyxLQUFLO0FBQzlCLE1BQU1HLG9CQUFvQixPQUFPQyxtQkFBbUIsYUFBYUEsaUJBQWlCLFlBQWM7QUFDaEcsTUFBTUYsdUJBQXVCQztBQUM3QjtBQUNBSCxzQkFBc0IsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbG91ZHNoaWZ0Ly4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvdXRpbC1zdHJlYW0vZGlzdC1janMvY2hlY2tzdW0vQ2hlY2tzdW1TdHJlYW0uYnJvd3Nlci5qcz80NTQ1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5DaGVja3N1bVN0cmVhbSA9IHZvaWQgMDtcbmNvbnN0IFJlYWRhYmxlU3RyZWFtUmVmID0gdHlwZW9mIFJlYWRhYmxlU3RyZWFtID09PSBcImZ1bmN0aW9uXCIgPyBSZWFkYWJsZVN0cmVhbSA6IGZ1bmN0aW9uICgpIHsgfTtcbmNsYXNzIENoZWNrc3VtU3RyZWFtIGV4dGVuZHMgUmVhZGFibGVTdHJlYW1SZWYge1xufVxuZXhwb3J0cy5DaGVja3N1bVN0cmVhbSA9IENoZWNrc3VtU3RyZWFtO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiQ2hlY2tzdW1TdHJlYW0iLCJSZWFkYWJsZVN0cmVhbVJlZiIsIlJlYWRhYmxlU3RyZWFtIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/util-stream/dist-cjs/checksum/ChecksumStream.browser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/util-stream/dist-cjs/checksum/ChecksumStream.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@smithy/util-stream/dist-cjs/checksum/ChecksumStream.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ChecksumStream = void 0;\nconst util_base64_1 = __webpack_require__(/*! @smithy/util-base64 */ \"(rsc)/./node_modules/@smithy/util-base64/dist-cjs/index.js\");\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\nclass ChecksumStream extends stream_1.Duplex {\n    constructor({ expectedChecksum, checksum, source, checksumSourceLocation, base64Encoder }){\n        var _a, _b;\n        super();\n        if (typeof source.pipe === \"function\") {\n            this.source = source;\n        } else {\n            throw new Error(`@smithy/util-stream: unsupported source type ${(_b = (_a = source === null || source === void 0 ? void 0 : source.constructor) === null || _a === void 0 ? void 0 : _a.name) !== null && _b !== void 0 ? _b : source} in ChecksumStream.`);\n        }\n        this.base64Encoder = base64Encoder !== null && base64Encoder !== void 0 ? base64Encoder : util_base64_1.toBase64;\n        this.expectedChecksum = expectedChecksum;\n        this.checksum = checksum;\n        this.checksumSourceLocation = checksumSourceLocation;\n        this.source.pipe(this);\n    }\n    _read(size) {}\n    _write(chunk, encoding, callback) {\n        try {\n            this.checksum.update(chunk);\n            this.push(chunk);\n        } catch (e) {\n            return callback(e);\n        }\n        return callback();\n    }\n    async _final(callback) {\n        try {\n            const digest = await this.checksum.digest();\n            const received = this.base64Encoder(digest);\n            if (this.expectedChecksum !== received) {\n                return callback(new Error(`Checksum mismatch: expected \"${this.expectedChecksum}\" but received \"${received}\"` + ` in response header \"${this.checksumSourceLocation}\".`));\n            }\n        } catch (e) {\n            return callback(e);\n        }\n        this.push(null);\n        return callback();\n    }\n}\nexports.ChecksumStream = ChecksumStream;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLXN0cmVhbS9kaXN0LWNqcy9jaGVja3N1bS9DaGVja3N1bVN0cmVhbS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsc0JBQXNCLEdBQUcsS0FBSztBQUM5QixNQUFNRyxnQkFBZ0JDLG1CQUFPQSxDQUFDLHVGQUFxQjtBQUNuRCxNQUFNQyxXQUFXRCxtQkFBT0EsQ0FBQyxzQkFBUTtBQUNqQyxNQUFNRix1QkFBdUJHLFNBQVNDLE1BQU07SUFDeENDLFlBQVksRUFBRUMsZ0JBQWdCLEVBQUVDLFFBQVEsRUFBRUMsTUFBTSxFQUFFQyxzQkFBc0IsRUFBRUMsYUFBYSxFQUFHLENBQUU7UUFDeEYsSUFBSUMsSUFBSUM7UUFDUixLQUFLO1FBQ0wsSUFBSSxPQUFPSixPQUFPSyxJQUFJLEtBQUssWUFBWTtZQUNuQyxJQUFJLENBQUNMLE1BQU0sR0FBR0E7UUFDbEIsT0FDSztZQUNELE1BQU0sSUFBSU0sTUFBTSxDQUFDLDZDQUE2QyxFQUFFLENBQUNGLEtBQUssQ0FBQ0QsS0FBS0gsV0FBVyxRQUFRQSxXQUFXLEtBQUssSUFBSSxLQUFLLElBQUlBLE9BQU9ILFdBQVcsTUFBTSxRQUFRTSxPQUFPLEtBQUssSUFBSSxLQUFLLElBQUlBLEdBQUdJLElBQUksTUFBTSxRQUFRSCxPQUFPLEtBQUssSUFBSUEsS0FBS0osT0FBTyxtQkFBbUIsQ0FBQztRQUM5UDtRQUNBLElBQUksQ0FBQ0UsYUFBYSxHQUFHQSxrQkFBa0IsUUFBUUEsa0JBQWtCLEtBQUssSUFBSUEsZ0JBQWdCVCxjQUFjZSxRQUFRO1FBQ2hILElBQUksQ0FBQ1YsZ0JBQWdCLEdBQUdBO1FBQ3hCLElBQUksQ0FBQ0MsUUFBUSxHQUFHQTtRQUNoQixJQUFJLENBQUNFLHNCQUFzQixHQUFHQTtRQUM5QixJQUFJLENBQUNELE1BQU0sQ0FBQ0ssSUFBSSxDQUFDLElBQUk7SUFDekI7SUFDQUksTUFBTUMsSUFBSSxFQUFFLENBQUU7SUFDZEMsT0FBT0MsS0FBSyxFQUFFQyxRQUFRLEVBQUVDLFFBQVEsRUFBRTtRQUM5QixJQUFJO1lBQ0EsSUFBSSxDQUFDZixRQUFRLENBQUNnQixNQUFNLENBQUNIO1lBQ3JCLElBQUksQ0FBQ0ksSUFBSSxDQUFDSjtRQUNkLEVBQ0EsT0FBT0ssR0FBRztZQUNOLE9BQU9ILFNBQVNHO1FBQ3BCO1FBQ0EsT0FBT0g7SUFDWDtJQUNBLE1BQU1JLE9BQU9KLFFBQVEsRUFBRTtRQUNuQixJQUFJO1lBQ0EsTUFBTUssU0FBUyxNQUFNLElBQUksQ0FBQ3BCLFFBQVEsQ0FBQ29CLE1BQU07WUFDekMsTUFBTUMsV0FBVyxJQUFJLENBQUNsQixhQUFhLENBQUNpQjtZQUNwQyxJQUFJLElBQUksQ0FBQ3JCLGdCQUFnQixLQUFLc0IsVUFBVTtnQkFDcEMsT0FBT04sU0FBUyxJQUFJUixNQUFNLENBQUMsNkJBQTZCLEVBQUUsSUFBSSxDQUFDUixnQkFBZ0IsQ0FBQyxnQkFBZ0IsRUFBRXNCLFNBQVMsQ0FBQyxDQUFDLEdBQ3pHLENBQUMscUJBQXFCLEVBQUUsSUFBSSxDQUFDbkIsc0JBQXNCLENBQUMsRUFBRSxDQUFDO1lBQy9EO1FBQ0osRUFDQSxPQUFPZ0IsR0FBRztZQUNOLE9BQU9ILFNBQVNHO1FBQ3BCO1FBQ0EsSUFBSSxDQUFDRCxJQUFJLENBQUM7UUFDVixPQUFPRjtJQUNYO0FBQ0o7QUFDQXhCLHNCQUFzQixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL2Nsb3Vkc2hpZnQvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLXN0cmVhbS9kaXN0LWNqcy9jaGVja3N1bS9DaGVja3N1bVN0cmVhbS5qcz9mZjUxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5DaGVja3N1bVN0cmVhbSA9IHZvaWQgMDtcbmNvbnN0IHV0aWxfYmFzZTY0XzEgPSByZXF1aXJlKFwiQHNtaXRoeS91dGlsLWJhc2U2NFwiKTtcbmNvbnN0IHN0cmVhbV8xID0gcmVxdWlyZShcInN0cmVhbVwiKTtcbmNsYXNzIENoZWNrc3VtU3RyZWFtIGV4dGVuZHMgc3RyZWFtXzEuRHVwbGV4IHtcbiAgICBjb25zdHJ1Y3Rvcih7IGV4cGVjdGVkQ2hlY2tzdW0sIGNoZWNrc3VtLCBzb3VyY2UsIGNoZWNrc3VtU291cmNlTG9jYXRpb24sIGJhc2U2NEVuY29kZXIsIH0pIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgaWYgKHR5cGVvZiBzb3VyY2UucGlwZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQHNtaXRoeS91dGlsLXN0cmVhbTogdW5zdXBwb3J0ZWQgc291cmNlIHR5cGUgJHsoX2IgPSAoX2EgPSBzb3VyY2UgPT09IG51bGwgfHwgc291cmNlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzb3VyY2UuY29uc3RydWN0b3IpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5uYW1lKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBzb3VyY2V9IGluIENoZWNrc3VtU3RyZWFtLmApO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYmFzZTY0RW5jb2RlciA9IGJhc2U2NEVuY29kZXIgIT09IG51bGwgJiYgYmFzZTY0RW5jb2RlciAhPT0gdm9pZCAwID8gYmFzZTY0RW5jb2RlciA6IHV0aWxfYmFzZTY0XzEudG9CYXNlNjQ7XG4gICAgICAgIHRoaXMuZXhwZWN0ZWRDaGVja3N1bSA9IGV4cGVjdGVkQ2hlY2tzdW07XG4gICAgICAgIHRoaXMuY2hlY2tzdW0gPSBjaGVja3N1bTtcbiAgICAgICAgdGhpcy5jaGVja3N1bVNvdXJjZUxvY2F0aW9uID0gY2hlY2tzdW1Tb3VyY2VMb2NhdGlvbjtcbiAgICAgICAgdGhpcy5zb3VyY2UucGlwZSh0aGlzKTtcbiAgICB9XG4gICAgX3JlYWQoc2l6ZSkgeyB9XG4gICAgX3dyaXRlKGNodW5rLCBlbmNvZGluZywgY2FsbGJhY2spIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuY2hlY2tzdW0udXBkYXRlKGNodW5rKTtcbiAgICAgICAgICAgIHRoaXMucHVzaChjaHVuayk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICB9XG4gICAgYXN5bmMgX2ZpbmFsKGNhbGxiYWNrKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBkaWdlc3QgPSBhd2FpdCB0aGlzLmNoZWNrc3VtLmRpZ2VzdCgpO1xuICAgICAgICAgICAgY29uc3QgcmVjZWl2ZWQgPSB0aGlzLmJhc2U2NEVuY29kZXIoZGlnZXN0KTtcbiAgICAgICAgICAgIGlmICh0aGlzLmV4cGVjdGVkQ2hlY2tzdW0gIT09IHJlY2VpdmVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG5ldyBFcnJvcihgQ2hlY2tzdW0gbWlzbWF0Y2g6IGV4cGVjdGVkIFwiJHt0aGlzLmV4cGVjdGVkQ2hlY2tzdW19XCIgYnV0IHJlY2VpdmVkIFwiJHtyZWNlaXZlZH1cImAgK1xuICAgICAgICAgICAgICAgICAgICBgIGluIHJlc3BvbnNlIGhlYWRlciBcIiR7dGhpcy5jaGVja3N1bVNvdXJjZUxvY2F0aW9ufVwiLmApKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucHVzaChudWxsKTtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgfVxufVxuZXhwb3J0cy5DaGVja3N1bVN0cmVhbSA9IENoZWNrc3VtU3RyZWFtO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiQ2hlY2tzdW1TdHJlYW0iLCJ1dGlsX2Jhc2U2NF8xIiwicmVxdWlyZSIsInN0cmVhbV8xIiwiRHVwbGV4IiwiY29uc3RydWN0b3IiLCJleHBlY3RlZENoZWNrc3VtIiwiY2hlY2tzdW0iLCJzb3VyY2UiLCJjaGVja3N1bVNvdXJjZUxvY2F0aW9uIiwiYmFzZTY0RW5jb2RlciIsIl9hIiwiX2IiLCJwaXBlIiwiRXJyb3IiLCJuYW1lIiwidG9CYXNlNjQiLCJfcmVhZCIsInNpemUiLCJfd3JpdGUiLCJjaHVuayIsImVuY29kaW5nIiwiY2FsbGJhY2siLCJ1cGRhdGUiLCJwdXNoIiwiZSIsIl9maW5hbCIsImRpZ2VzdCIsInJlY2VpdmVkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/util-stream/dist-cjs/checksum/ChecksumStream.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/util-stream/dist-cjs/checksum/createChecksumStream.browser.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@smithy/util-stream/dist-cjs/checksum/createChecksumStream.browser.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.createChecksumStream = void 0;\nconst util_base64_1 = __webpack_require__(/*! @smithy/util-base64 */ \"(rsc)/./node_modules/@smithy/util-base64/dist-cjs/index.js\");\nconst stream_type_check_1 = __webpack_require__(/*! ../stream-type-check */ \"(rsc)/./node_modules/@smithy/util-stream/dist-cjs/stream-type-check.js\");\nconst ChecksumStream_browser_1 = __webpack_require__(/*! ./ChecksumStream.browser */ \"(rsc)/./node_modules/@smithy/util-stream/dist-cjs/checksum/ChecksumStream.browser.js\");\nconst createChecksumStream = ({ expectedChecksum, checksum, source, checksumSourceLocation, base64Encoder })=>{\n    var _a, _b;\n    if (!(0, stream_type_check_1.isReadableStream)(source)) {\n        throw new Error(`@smithy/util-stream: unsupported source type ${(_b = (_a = source === null || source === void 0 ? void 0 : source.constructor) === null || _a === void 0 ? void 0 : _a.name) !== null && _b !== void 0 ? _b : source} in ChecksumStream.`);\n    }\n    const encoder = base64Encoder !== null && base64Encoder !== void 0 ? base64Encoder : util_base64_1.toBase64;\n    if (typeof TransformStream !== \"function\") {\n        throw new Error(\"@smithy/util-stream: unable to instantiate ChecksumStream because API unavailable: ReadableStream/TransformStream.\");\n    }\n    const transform = new TransformStream({\n        start () {},\n        async transform (chunk, controller) {\n            checksum.update(chunk);\n            controller.enqueue(chunk);\n        },\n        async flush (controller) {\n            const digest = await checksum.digest();\n            const received = encoder(digest);\n            if (expectedChecksum !== received) {\n                const error = new Error(`Checksum mismatch: expected \"${expectedChecksum}\" but received \"${received}\"` + ` in response header \"${checksumSourceLocation}\".`);\n                controller.error(error);\n            } else {\n                controller.terminate();\n            }\n        }\n    });\n    source.pipeThrough(transform);\n    const readable = transform.readable;\n    Object.setPrototypeOf(readable, ChecksumStream_browser_1.ChecksumStream.prototype);\n    return readable;\n};\nexports.createChecksumStream = createChecksumStream;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLXN0cmVhbS9kaXN0LWNqcy9jaGVja3N1bS9jcmVhdGVDaGVja3N1bVN0cmVhbS5icm93c2VyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCw0QkFBNEIsR0FBRyxLQUFLO0FBQ3BDLE1BQU1HLGdCQUFnQkMsbUJBQU9BLENBQUMsdUZBQXFCO0FBQ25ELE1BQU1DLHNCQUFzQkQsbUJBQU9BLENBQUMsb0dBQXNCO0FBQzFELE1BQU1FLDJCQUEyQkYsbUJBQU9BLENBQUMsc0hBQTBCO0FBQ25FLE1BQU1GLHVCQUF1QixDQUFDLEVBQUVLLGdCQUFnQixFQUFFQyxRQUFRLEVBQUVDLE1BQU0sRUFBRUMsc0JBQXNCLEVBQUVDLGFBQWEsRUFBRztJQUN4RyxJQUFJQyxJQUFJQztJQUNSLElBQUksQ0FBQyxDQUFDLEdBQUdSLG9CQUFvQlMsZ0JBQWdCLEVBQUVMLFNBQVM7UUFDcEQsTUFBTSxJQUFJTSxNQUFNLENBQUMsNkNBQTZDLEVBQUUsQ0FBQ0YsS0FBSyxDQUFDRCxLQUFLSCxXQUFXLFFBQVFBLFdBQVcsS0FBSyxJQUFJLEtBQUssSUFBSUEsT0FBT08sV0FBVyxNQUFNLFFBQVFKLE9BQU8sS0FBSyxJQUFJLEtBQUssSUFBSUEsR0FBR0ssSUFBSSxNQUFNLFFBQVFKLE9BQU8sS0FBSyxJQUFJQSxLQUFLSixPQUFPLG1CQUFtQixDQUFDO0lBQzlQO0lBQ0EsTUFBTVMsVUFBVVAsa0JBQWtCLFFBQVFBLGtCQUFrQixLQUFLLElBQUlBLGdCQUFnQlIsY0FBY2dCLFFBQVE7SUFDM0csSUFBSSxPQUFPQyxvQkFBb0IsWUFBWTtRQUN2QyxNQUFNLElBQUlMLE1BQU07SUFDcEI7SUFDQSxNQUFNTSxZQUFZLElBQUlELGdCQUFnQjtRQUNsQ0UsVUFBVTtRQUNWLE1BQU1ELFdBQVVFLEtBQUssRUFBRUMsVUFBVTtZQUM3QmhCLFNBQVNpQixNQUFNLENBQUNGO1lBQ2hCQyxXQUFXRSxPQUFPLENBQUNIO1FBQ3ZCO1FBQ0EsTUFBTUksT0FBTUgsVUFBVTtZQUNsQixNQUFNSSxTQUFTLE1BQU1wQixTQUFTb0IsTUFBTTtZQUNwQyxNQUFNQyxXQUFXWCxRQUFRVTtZQUN6QixJQUFJckIscUJBQXFCc0IsVUFBVTtnQkFDL0IsTUFBTUMsUUFBUSxJQUFJZixNQUFNLENBQUMsNkJBQTZCLEVBQUVSLGlCQUFpQixnQkFBZ0IsRUFBRXNCLFNBQVMsQ0FBQyxDQUFDLEdBQ2xHLENBQUMscUJBQXFCLEVBQUVuQix1QkFBdUIsRUFBRSxDQUFDO2dCQUN0RGMsV0FBV00sS0FBSyxDQUFDQTtZQUNyQixPQUNLO2dCQUNETixXQUFXTyxTQUFTO1lBQ3hCO1FBQ0o7SUFDSjtJQUNBdEIsT0FBT3VCLFdBQVcsQ0FBQ1g7SUFDbkIsTUFBTVksV0FBV1osVUFBVVksUUFBUTtJQUNuQ25DLE9BQU9vQyxjQUFjLENBQUNELFVBQVUzQix5QkFBeUI2QixjQUFjLENBQUNDLFNBQVM7SUFDakYsT0FBT0g7QUFDWDtBQUNBakMsNEJBQTRCLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2xvdWRzaGlmdC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3V0aWwtc3RyZWFtL2Rpc3QtY2pzL2NoZWNrc3VtL2NyZWF0ZUNoZWNrc3VtU3RyZWFtLmJyb3dzZXIuanM/MTllNyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY3JlYXRlQ2hlY2tzdW1TdHJlYW0gPSB2b2lkIDA7XG5jb25zdCB1dGlsX2Jhc2U2NF8xID0gcmVxdWlyZShcIkBzbWl0aHkvdXRpbC1iYXNlNjRcIik7XG5jb25zdCBzdHJlYW1fdHlwZV9jaGVja18xID0gcmVxdWlyZShcIi4uL3N0cmVhbS10eXBlLWNoZWNrXCIpO1xuY29uc3QgQ2hlY2tzdW1TdHJlYW1fYnJvd3Nlcl8xID0gcmVxdWlyZShcIi4vQ2hlY2tzdW1TdHJlYW0uYnJvd3NlclwiKTtcbmNvbnN0IGNyZWF0ZUNoZWNrc3VtU3RyZWFtID0gKHsgZXhwZWN0ZWRDaGVja3N1bSwgY2hlY2tzdW0sIHNvdXJjZSwgY2hlY2tzdW1Tb3VyY2VMb2NhdGlvbiwgYmFzZTY0RW5jb2RlciwgfSkgPT4ge1xuICAgIHZhciBfYSwgX2I7XG4gICAgaWYgKCEoMCwgc3RyZWFtX3R5cGVfY2hlY2tfMS5pc1JlYWRhYmxlU3RyZWFtKShzb3VyY2UpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQHNtaXRoeS91dGlsLXN0cmVhbTogdW5zdXBwb3J0ZWQgc291cmNlIHR5cGUgJHsoX2IgPSAoX2EgPSBzb3VyY2UgPT09IG51bGwgfHwgc291cmNlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzb3VyY2UuY29uc3RydWN0b3IpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5uYW1lKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBzb3VyY2V9IGluIENoZWNrc3VtU3RyZWFtLmApO1xuICAgIH1cbiAgICBjb25zdCBlbmNvZGVyID0gYmFzZTY0RW5jb2RlciAhPT0gbnVsbCAmJiBiYXNlNjRFbmNvZGVyICE9PSB2b2lkIDAgPyBiYXNlNjRFbmNvZGVyIDogdXRpbF9iYXNlNjRfMS50b0Jhc2U2NDtcbiAgICBpZiAodHlwZW9mIFRyYW5zZm9ybVN0cmVhbSAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkBzbWl0aHkvdXRpbC1zdHJlYW06IHVuYWJsZSB0byBpbnN0YW50aWF0ZSBDaGVja3N1bVN0cmVhbSBiZWNhdXNlIEFQSSB1bmF2YWlsYWJsZTogUmVhZGFibGVTdHJlYW0vVHJhbnNmb3JtU3RyZWFtLlwiKTtcbiAgICB9XG4gICAgY29uc3QgdHJhbnNmb3JtID0gbmV3IFRyYW5zZm9ybVN0cmVhbSh7XG4gICAgICAgIHN0YXJ0KCkgeyB9LFxuICAgICAgICBhc3luYyB0cmFuc2Zvcm0oY2h1bmssIGNvbnRyb2xsZXIpIHtcbiAgICAgICAgICAgIGNoZWNrc3VtLnVwZGF0ZShjaHVuayk7XG4gICAgICAgICAgICBjb250cm9sbGVyLmVucXVldWUoY2h1bmspO1xuICAgICAgICB9LFxuICAgICAgICBhc3luYyBmbHVzaChjb250cm9sbGVyKSB7XG4gICAgICAgICAgICBjb25zdCBkaWdlc3QgPSBhd2FpdCBjaGVja3N1bS5kaWdlc3QoKTtcbiAgICAgICAgICAgIGNvbnN0IHJlY2VpdmVkID0gZW5jb2RlcihkaWdlc3QpO1xuICAgICAgICAgICAgaWYgKGV4cGVjdGVkQ2hlY2tzdW0gIT09IHJlY2VpdmVkKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoYENoZWNrc3VtIG1pc21hdGNoOiBleHBlY3RlZCBcIiR7ZXhwZWN0ZWRDaGVja3N1bX1cIiBidXQgcmVjZWl2ZWQgXCIke3JlY2VpdmVkfVwiYCArXG4gICAgICAgICAgICAgICAgICAgIGAgaW4gcmVzcG9uc2UgaGVhZGVyIFwiJHtjaGVja3N1bVNvdXJjZUxvY2F0aW9ufVwiLmApO1xuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuZXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29udHJvbGxlci50ZXJtaW5hdGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICB9KTtcbiAgICBzb3VyY2UucGlwZVRocm91Z2godHJhbnNmb3JtKTtcbiAgICBjb25zdCByZWFkYWJsZSA9IHRyYW5zZm9ybS5yZWFkYWJsZTtcbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YocmVhZGFibGUsIENoZWNrc3VtU3RyZWFtX2Jyb3dzZXJfMS5DaGVja3N1bVN0cmVhbS5wcm90b3R5cGUpO1xuICAgIHJldHVybiByZWFkYWJsZTtcbn07XG5leHBvcnRzLmNyZWF0ZUNoZWNrc3VtU3RyZWFtID0gY3JlYXRlQ2hlY2tzdW1TdHJlYW07XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJjcmVhdGVDaGVja3N1bVN0cmVhbSIsInV0aWxfYmFzZTY0XzEiLCJyZXF1aXJlIiwic3RyZWFtX3R5cGVfY2hlY2tfMSIsIkNoZWNrc3VtU3RyZWFtX2Jyb3dzZXJfMSIsImV4cGVjdGVkQ2hlY2tzdW0iLCJjaGVja3N1bSIsInNvdXJjZSIsImNoZWNrc3VtU291cmNlTG9jYXRpb24iLCJiYXNlNjRFbmNvZGVyIiwiX2EiLCJfYiIsImlzUmVhZGFibGVTdHJlYW0iLCJFcnJvciIsImNvbnN0cnVjdG9yIiwibmFtZSIsImVuY29kZXIiLCJ0b0Jhc2U2NCIsIlRyYW5zZm9ybVN0cmVhbSIsInRyYW5zZm9ybSIsInN0YXJ0IiwiY2h1bmsiLCJjb250cm9sbGVyIiwidXBkYXRlIiwiZW5xdWV1ZSIsImZsdXNoIiwiZGlnZXN0IiwicmVjZWl2ZWQiLCJlcnJvciIsInRlcm1pbmF0ZSIsInBpcGVUaHJvdWdoIiwicmVhZGFibGUiLCJzZXRQcm90b3R5cGVPZiIsIkNoZWNrc3VtU3RyZWFtIiwicHJvdG90eXBlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/util-stream/dist-cjs/checksum/createChecksumStream.browser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/util-stream/dist-cjs/checksum/createChecksumStream.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@smithy/util-stream/dist-cjs/checksum/createChecksumStream.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.createChecksumStream = void 0;\nconst stream_type_check_1 = __webpack_require__(/*! ../stream-type-check */ \"(rsc)/./node_modules/@smithy/util-stream/dist-cjs/stream-type-check.js\");\nconst ChecksumStream_1 = __webpack_require__(/*! ./ChecksumStream */ \"(rsc)/./node_modules/@smithy/util-stream/dist-cjs/checksum/ChecksumStream.js\");\nconst createChecksumStream_browser_1 = __webpack_require__(/*! ./createChecksumStream.browser */ \"(rsc)/./node_modules/@smithy/util-stream/dist-cjs/checksum/createChecksumStream.browser.js\");\nfunction createChecksumStream(init) {\n    if (typeof ReadableStream === \"function\" && (0, stream_type_check_1.isReadableStream)(init.source)) {\n        return (0, createChecksumStream_browser_1.createChecksumStream)(init);\n    }\n    return new ChecksumStream_1.ChecksumStream(init);\n}\nexports.createChecksumStream = createChecksumStream;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLXN0cmVhbS9kaXN0LWNqcy9jaGVja3N1bS9jcmVhdGVDaGVja3N1bVN0cmVhbS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsNEJBQTRCLEdBQUcsS0FBSztBQUNwQyxNQUFNRyxzQkFBc0JDLG1CQUFPQSxDQUFDLG9HQUFzQjtBQUMxRCxNQUFNQyxtQkFBbUJELG1CQUFPQSxDQUFDLHNHQUFrQjtBQUNuRCxNQUFNRSxpQ0FBaUNGLG1CQUFPQSxDQUFDLGtJQUFnQztBQUMvRSxTQUFTRixxQkFBcUJLLElBQUk7SUFDOUIsSUFBSSxPQUFPQyxtQkFBbUIsY0FBYyxDQUFDLEdBQUdMLG9CQUFvQk0sZ0JBQWdCLEVBQUVGLEtBQUtHLE1BQU0sR0FBRztRQUNoRyxPQUFPLENBQUMsR0FBR0osK0JBQStCSixvQkFBb0IsRUFBRUs7SUFDcEU7SUFDQSxPQUFPLElBQUlGLGlCQUFpQk0sY0FBYyxDQUFDSjtBQUMvQztBQUNBUCw0QkFBNEIsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbG91ZHNoaWZ0Ly4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvdXRpbC1zdHJlYW0vZGlzdC1janMvY2hlY2tzdW0vY3JlYXRlQ2hlY2tzdW1TdHJlYW0uanM/MzljNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY3JlYXRlQ2hlY2tzdW1TdHJlYW0gPSB2b2lkIDA7XG5jb25zdCBzdHJlYW1fdHlwZV9jaGVja18xID0gcmVxdWlyZShcIi4uL3N0cmVhbS10eXBlLWNoZWNrXCIpO1xuY29uc3QgQ2hlY2tzdW1TdHJlYW1fMSA9IHJlcXVpcmUoXCIuL0NoZWNrc3VtU3RyZWFtXCIpO1xuY29uc3QgY3JlYXRlQ2hlY2tzdW1TdHJlYW1fYnJvd3Nlcl8xID0gcmVxdWlyZShcIi4vY3JlYXRlQ2hlY2tzdW1TdHJlYW0uYnJvd3NlclwiKTtcbmZ1bmN0aW9uIGNyZWF0ZUNoZWNrc3VtU3RyZWFtKGluaXQpIHtcbiAgICBpZiAodHlwZW9mIFJlYWRhYmxlU3RyZWFtID09PSBcImZ1bmN0aW9uXCIgJiYgKDAsIHN0cmVhbV90eXBlX2NoZWNrXzEuaXNSZWFkYWJsZVN0cmVhbSkoaW5pdC5zb3VyY2UpKSB7XG4gICAgICAgIHJldHVybiAoMCwgY3JlYXRlQ2hlY2tzdW1TdHJlYW1fYnJvd3Nlcl8xLmNyZWF0ZUNoZWNrc3VtU3RyZWFtKShpbml0KTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBDaGVja3N1bVN0cmVhbV8xLkNoZWNrc3VtU3RyZWFtKGluaXQpO1xufVxuZXhwb3J0cy5jcmVhdGVDaGVja3N1bVN0cmVhbSA9IGNyZWF0ZUNoZWNrc3VtU3RyZWFtO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiY3JlYXRlQ2hlY2tzdW1TdHJlYW0iLCJzdHJlYW1fdHlwZV9jaGVja18xIiwicmVxdWlyZSIsIkNoZWNrc3VtU3RyZWFtXzEiLCJjcmVhdGVDaGVja3N1bVN0cmVhbV9icm93c2VyXzEiLCJpbml0IiwiUmVhZGFibGVTdHJlYW0iLCJpc1JlYWRhYmxlU3RyZWFtIiwic291cmNlIiwiQ2hlY2tzdW1TdHJlYW0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/util-stream/dist-cjs/checksum/createChecksumStream.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/util-stream/dist-cjs/createBufferedReadable.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@smithy/util-stream/dist-cjs/createBufferedReadable.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.createBufferedReadable = void 0;\nconst node_stream_1 = __webpack_require__(/*! node:stream */ \"node:stream\");\nconst ByteArrayCollector_1 = __webpack_require__(/*! ./ByteArrayCollector */ \"(rsc)/./node_modules/@smithy/util-stream/dist-cjs/ByteArrayCollector.js\");\nconst createBufferedReadableStream_1 = __webpack_require__(/*! ./createBufferedReadableStream */ \"(rsc)/./node_modules/@smithy/util-stream/dist-cjs/createBufferedReadableStream.js\");\nconst stream_type_check_1 = __webpack_require__(/*! ./stream-type-check */ \"(rsc)/./node_modules/@smithy/util-stream/dist-cjs/stream-type-check.js\");\nfunction createBufferedReadable(upstream, size, logger) {\n    if ((0, stream_type_check_1.isReadableStream)(upstream)) {\n        return (0, createBufferedReadableStream_1.createBufferedReadableStream)(upstream, size, logger);\n    }\n    const downstream = new node_stream_1.Readable({\n        read () {}\n    });\n    let streamBufferingLoggedWarning = false;\n    let bytesSeen = 0;\n    const buffers = [\n        \"\",\n        new ByteArrayCollector_1.ByteArrayCollector((size)=>new Uint8Array(size)),\n        new ByteArrayCollector_1.ByteArrayCollector((size)=>Buffer.from(new Uint8Array(size)))\n    ];\n    let mode = -1;\n    upstream.on(\"data\", (chunk)=>{\n        const chunkMode = (0, createBufferedReadableStream_1.modeOf)(chunk, true);\n        if (mode !== chunkMode) {\n            if (mode >= 0) {\n                downstream.push((0, createBufferedReadableStream_1.flush)(buffers, mode));\n            }\n            mode = chunkMode;\n        }\n        if (mode === -1) {\n            downstream.push(chunk);\n            return;\n        }\n        const chunkSize = (0, createBufferedReadableStream_1.sizeOf)(chunk);\n        bytesSeen += chunkSize;\n        const bufferSize = (0, createBufferedReadableStream_1.sizeOf)(buffers[mode]);\n        if (chunkSize >= size && bufferSize === 0) {\n            downstream.push(chunk);\n        } else {\n            const newSize = (0, createBufferedReadableStream_1.merge)(buffers, mode, chunk);\n            if (!streamBufferingLoggedWarning && bytesSeen > size * 2) {\n                streamBufferingLoggedWarning = true;\n                logger === null || logger === void 0 ? void 0 : logger.warn(`@smithy/util-stream - stream chunk size ${chunkSize} is below threshold of ${size}, automatically buffering.`);\n            }\n            if (newSize >= size) {\n                downstream.push((0, createBufferedReadableStream_1.flush)(buffers, mode));\n            }\n        }\n    });\n    upstream.on(\"end\", ()=>{\n        if (mode !== -1) {\n            const remainder = (0, createBufferedReadableStream_1.flush)(buffers, mode);\n            if ((0, createBufferedReadableStream_1.sizeOf)(remainder) > 0) {\n                downstream.push(remainder);\n            }\n        }\n        downstream.push(null);\n    });\n    return downstream;\n}\nexports.createBufferedReadable = createBufferedReadable;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLXN0cmVhbS9kaXN0LWNqcy9jcmVhdGVCdWZmZXJlZFJlYWRhYmxlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCw4QkFBOEIsR0FBRyxLQUFLO0FBQ3RDLE1BQU1HLGdCQUFnQkMsbUJBQU9BLENBQUMsZ0NBQWE7QUFDM0MsTUFBTUMsdUJBQXVCRCxtQkFBT0EsQ0FBQyxxR0FBc0I7QUFDM0QsTUFBTUUsaUNBQWlDRixtQkFBT0EsQ0FBQyx5SEFBZ0M7QUFDL0UsTUFBTUcsc0JBQXNCSCxtQkFBT0EsQ0FBQyxtR0FBcUI7QUFDekQsU0FBU0YsdUJBQXVCTSxRQUFRLEVBQUVDLElBQUksRUFBRUMsTUFBTTtJQUNsRCxJQUFJLENBQUMsR0FBR0gsb0JBQW9CSSxnQkFBZ0IsRUFBRUgsV0FBVztRQUNyRCxPQUFPLENBQUMsR0FBR0YsK0JBQStCTSw0QkFBNEIsRUFBRUosVUFBVUMsTUFBTUM7SUFDNUY7SUFDQSxNQUFNRyxhQUFhLElBQUlWLGNBQWNXLFFBQVEsQ0FBQztRQUFFQyxTQUFTO0lBQUU7SUFDM0QsSUFBSUMsK0JBQStCO0lBQ25DLElBQUlDLFlBQVk7SUFDaEIsTUFBTUMsVUFBVTtRQUNaO1FBQ0EsSUFBSWIscUJBQXFCYyxrQkFBa0IsQ0FBQyxDQUFDVixPQUFTLElBQUlXLFdBQVdYO1FBQ3JFLElBQUlKLHFCQUFxQmMsa0JBQWtCLENBQUMsQ0FBQ1YsT0FBU1ksT0FBT0MsSUFBSSxDQUFDLElBQUlGLFdBQVdYO0tBQ3BGO0lBQ0QsSUFBSWMsT0FBTyxDQUFDO0lBQ1pmLFNBQVNnQixFQUFFLENBQUMsUUFBUSxDQUFDQztRQUNqQixNQUFNQyxZQUFZLENBQUMsR0FBR3BCLCtCQUErQnFCLE1BQU0sRUFBRUYsT0FBTztRQUNwRSxJQUFJRixTQUFTRyxXQUFXO1lBQ3BCLElBQUlILFFBQVEsR0FBRztnQkFDWFYsV0FBV2UsSUFBSSxDQUFDLENBQUMsR0FBR3RCLCtCQUErQnVCLEtBQUssRUFBRVgsU0FBU0s7WUFDdkU7WUFDQUEsT0FBT0c7UUFDWDtRQUNBLElBQUlILFNBQVMsQ0FBQyxHQUFHO1lBQ2JWLFdBQVdlLElBQUksQ0FBQ0g7WUFDaEI7UUFDSjtRQUNBLE1BQU1LLFlBQVksQ0FBQyxHQUFHeEIsK0JBQStCeUIsTUFBTSxFQUFFTjtRQUM3RFIsYUFBYWE7UUFDYixNQUFNRSxhQUFhLENBQUMsR0FBRzFCLCtCQUErQnlCLE1BQU0sRUFBRWIsT0FBTyxDQUFDSyxLQUFLO1FBQzNFLElBQUlPLGFBQWFyQixRQUFRdUIsZUFBZSxHQUFHO1lBQ3ZDbkIsV0FBV2UsSUFBSSxDQUFDSDtRQUNwQixPQUNLO1lBQ0QsTUFBTVEsVUFBVSxDQUFDLEdBQUczQiwrQkFBK0I0QixLQUFLLEVBQUVoQixTQUFTSyxNQUFNRTtZQUN6RSxJQUFJLENBQUNULGdDQUFnQ0MsWUFBWVIsT0FBTyxHQUFHO2dCQUN2RE8sK0JBQStCO2dCQUMvQk4sV0FBVyxRQUFRQSxXQUFXLEtBQUssSUFBSSxLQUFLLElBQUlBLE9BQU95QixJQUFJLENBQUMsQ0FBQyx3Q0FBd0MsRUFBRUwsVUFBVSx1QkFBdUIsRUFBRXJCLEtBQUssMEJBQTBCLENBQUM7WUFDOUs7WUFDQSxJQUFJd0IsV0FBV3hCLE1BQU07Z0JBQ2pCSSxXQUFXZSxJQUFJLENBQUMsQ0FBQyxHQUFHdEIsK0JBQStCdUIsS0FBSyxFQUFFWCxTQUFTSztZQUN2RTtRQUNKO0lBQ0o7SUFDQWYsU0FBU2dCLEVBQUUsQ0FBQyxPQUFPO1FBQ2YsSUFBSUQsU0FBUyxDQUFDLEdBQUc7WUFDYixNQUFNYSxZQUFZLENBQUMsR0FBRzlCLCtCQUErQnVCLEtBQUssRUFBRVgsU0FBU0s7WUFDckUsSUFBSSxDQUFDLEdBQUdqQiwrQkFBK0J5QixNQUFNLEVBQUVLLGFBQWEsR0FBRztnQkFDM0R2QixXQUFXZSxJQUFJLENBQUNRO1lBQ3BCO1FBQ0o7UUFDQXZCLFdBQVdlLElBQUksQ0FBQztJQUNwQjtJQUNBLE9BQU9mO0FBQ1g7QUFDQWIsOEJBQThCLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2xvdWRzaGlmdC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3V0aWwtc3RyZWFtL2Rpc3QtY2pzL2NyZWF0ZUJ1ZmZlcmVkUmVhZGFibGUuanM/YmVhOSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY3JlYXRlQnVmZmVyZWRSZWFkYWJsZSA9IHZvaWQgMDtcbmNvbnN0IG5vZGVfc3RyZWFtXzEgPSByZXF1aXJlKFwibm9kZTpzdHJlYW1cIik7XG5jb25zdCBCeXRlQXJyYXlDb2xsZWN0b3JfMSA9IHJlcXVpcmUoXCIuL0J5dGVBcnJheUNvbGxlY3RvclwiKTtcbmNvbnN0IGNyZWF0ZUJ1ZmZlcmVkUmVhZGFibGVTdHJlYW1fMSA9IHJlcXVpcmUoXCIuL2NyZWF0ZUJ1ZmZlcmVkUmVhZGFibGVTdHJlYW1cIik7XG5jb25zdCBzdHJlYW1fdHlwZV9jaGVja18xID0gcmVxdWlyZShcIi4vc3RyZWFtLXR5cGUtY2hlY2tcIik7XG5mdW5jdGlvbiBjcmVhdGVCdWZmZXJlZFJlYWRhYmxlKHVwc3RyZWFtLCBzaXplLCBsb2dnZXIpIHtcbiAgICBpZiAoKDAsIHN0cmVhbV90eXBlX2NoZWNrXzEuaXNSZWFkYWJsZVN0cmVhbSkodXBzdHJlYW0pKSB7XG4gICAgICAgIHJldHVybiAoMCwgY3JlYXRlQnVmZmVyZWRSZWFkYWJsZVN0cmVhbV8xLmNyZWF0ZUJ1ZmZlcmVkUmVhZGFibGVTdHJlYW0pKHVwc3RyZWFtLCBzaXplLCBsb2dnZXIpO1xuICAgIH1cbiAgICBjb25zdCBkb3duc3RyZWFtID0gbmV3IG5vZGVfc3RyZWFtXzEuUmVhZGFibGUoeyByZWFkKCkgeyB9IH0pO1xuICAgIGxldCBzdHJlYW1CdWZmZXJpbmdMb2dnZWRXYXJuaW5nID0gZmFsc2U7XG4gICAgbGV0IGJ5dGVzU2VlbiA9IDA7XG4gICAgY29uc3QgYnVmZmVycyA9IFtcbiAgICAgICAgXCJcIixcbiAgICAgICAgbmV3IEJ5dGVBcnJheUNvbGxlY3Rvcl8xLkJ5dGVBcnJheUNvbGxlY3Rvcigoc2l6ZSkgPT4gbmV3IFVpbnQ4QXJyYXkoc2l6ZSkpLFxuICAgICAgICBuZXcgQnl0ZUFycmF5Q29sbGVjdG9yXzEuQnl0ZUFycmF5Q29sbGVjdG9yKChzaXplKSA9PiBCdWZmZXIuZnJvbShuZXcgVWludDhBcnJheShzaXplKSkpLFxuICAgIF07XG4gICAgbGV0IG1vZGUgPSAtMTtcbiAgICB1cHN0cmVhbS5vbihcImRhdGFcIiwgKGNodW5rKSA9PiB7XG4gICAgICAgIGNvbnN0IGNodW5rTW9kZSA9ICgwLCBjcmVhdGVCdWZmZXJlZFJlYWRhYmxlU3RyZWFtXzEubW9kZU9mKShjaHVuaywgdHJ1ZSk7XG4gICAgICAgIGlmIChtb2RlICE9PSBjaHVua01vZGUpIHtcbiAgICAgICAgICAgIGlmIChtb2RlID49IDApIHtcbiAgICAgICAgICAgICAgICBkb3duc3RyZWFtLnB1c2goKDAsIGNyZWF0ZUJ1ZmZlcmVkUmVhZGFibGVTdHJlYW1fMS5mbHVzaCkoYnVmZmVycywgbW9kZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbW9kZSA9IGNodW5rTW9kZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobW9kZSA9PT0gLTEpIHtcbiAgICAgICAgICAgIGRvd25zdHJlYW0ucHVzaChjaHVuayk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY2h1bmtTaXplID0gKDAsIGNyZWF0ZUJ1ZmZlcmVkUmVhZGFibGVTdHJlYW1fMS5zaXplT2YpKGNodW5rKTtcbiAgICAgICAgYnl0ZXNTZWVuICs9IGNodW5rU2l6ZTtcbiAgICAgICAgY29uc3QgYnVmZmVyU2l6ZSA9ICgwLCBjcmVhdGVCdWZmZXJlZFJlYWRhYmxlU3RyZWFtXzEuc2l6ZU9mKShidWZmZXJzW21vZGVdKTtcbiAgICAgICAgaWYgKGNodW5rU2l6ZSA+PSBzaXplICYmIGJ1ZmZlclNpemUgPT09IDApIHtcbiAgICAgICAgICAgIGRvd25zdHJlYW0ucHVzaChjaHVuayk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBuZXdTaXplID0gKDAsIGNyZWF0ZUJ1ZmZlcmVkUmVhZGFibGVTdHJlYW1fMS5tZXJnZSkoYnVmZmVycywgbW9kZSwgY2h1bmspO1xuICAgICAgICAgICAgaWYgKCFzdHJlYW1CdWZmZXJpbmdMb2dnZWRXYXJuaW5nICYmIGJ5dGVzU2VlbiA+IHNpemUgKiAyKSB7XG4gICAgICAgICAgICAgICAgc3RyZWFtQnVmZmVyaW5nTG9nZ2VkV2FybmluZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgbG9nZ2VyID09PSBudWxsIHx8IGxvZ2dlciA9PT0gdm9pZCAwID8gdm9pZCAwIDogbG9nZ2VyLndhcm4oYEBzbWl0aHkvdXRpbC1zdHJlYW0gLSBzdHJlYW0gY2h1bmsgc2l6ZSAke2NodW5rU2l6ZX0gaXMgYmVsb3cgdGhyZXNob2xkIG9mICR7c2l6ZX0sIGF1dG9tYXRpY2FsbHkgYnVmZmVyaW5nLmApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG5ld1NpemUgPj0gc2l6ZSkge1xuICAgICAgICAgICAgICAgIGRvd25zdHJlYW0ucHVzaCgoMCwgY3JlYXRlQnVmZmVyZWRSZWFkYWJsZVN0cmVhbV8xLmZsdXNoKShidWZmZXJzLCBtb2RlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICB1cHN0cmVhbS5vbihcImVuZFwiLCAoKSA9PiB7XG4gICAgICAgIGlmIChtb2RlICE9PSAtMSkge1xuICAgICAgICAgICAgY29uc3QgcmVtYWluZGVyID0gKDAsIGNyZWF0ZUJ1ZmZlcmVkUmVhZGFibGVTdHJlYW1fMS5mbHVzaCkoYnVmZmVycywgbW9kZSk7XG4gICAgICAgICAgICBpZiAoKDAsIGNyZWF0ZUJ1ZmZlcmVkUmVhZGFibGVTdHJlYW1fMS5zaXplT2YpKHJlbWFpbmRlcikgPiAwKSB7XG4gICAgICAgICAgICAgICAgZG93bnN0cmVhbS5wdXNoKHJlbWFpbmRlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZG93bnN0cmVhbS5wdXNoKG51bGwpO1xuICAgIH0pO1xuICAgIHJldHVybiBkb3duc3RyZWFtO1xufVxuZXhwb3J0cy5jcmVhdGVCdWZmZXJlZFJlYWRhYmxlID0gY3JlYXRlQnVmZmVyZWRSZWFkYWJsZTtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImNyZWF0ZUJ1ZmZlcmVkUmVhZGFibGUiLCJub2RlX3N0cmVhbV8xIiwicmVxdWlyZSIsIkJ5dGVBcnJheUNvbGxlY3Rvcl8xIiwiY3JlYXRlQnVmZmVyZWRSZWFkYWJsZVN0cmVhbV8xIiwic3RyZWFtX3R5cGVfY2hlY2tfMSIsInVwc3RyZWFtIiwic2l6ZSIsImxvZ2dlciIsImlzUmVhZGFibGVTdHJlYW0iLCJjcmVhdGVCdWZmZXJlZFJlYWRhYmxlU3RyZWFtIiwiZG93bnN0cmVhbSIsIlJlYWRhYmxlIiwicmVhZCIsInN0cmVhbUJ1ZmZlcmluZ0xvZ2dlZFdhcm5pbmciLCJieXRlc1NlZW4iLCJidWZmZXJzIiwiQnl0ZUFycmF5Q29sbGVjdG9yIiwiVWludDhBcnJheSIsIkJ1ZmZlciIsImZyb20iLCJtb2RlIiwib24iLCJjaHVuayIsImNodW5rTW9kZSIsIm1vZGVPZiIsInB1c2giLCJmbHVzaCIsImNodW5rU2l6ZSIsInNpemVPZiIsImJ1ZmZlclNpemUiLCJuZXdTaXplIiwibWVyZ2UiLCJ3YXJuIiwicmVtYWluZGVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/util-stream/dist-cjs/createBufferedReadable.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/util-stream/dist-cjs/createBufferedReadableStream.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@smithy/util-stream/dist-cjs/createBufferedReadableStream.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.modeOf = exports.sizeOf = exports.flush = exports.merge = exports.createBufferedReadable = exports.createBufferedReadableStream = void 0;\nconst ByteArrayCollector_1 = __webpack_require__(/*! ./ByteArrayCollector */ \"(rsc)/./node_modules/@smithy/util-stream/dist-cjs/ByteArrayCollector.js\");\nfunction createBufferedReadableStream(upstream, size, logger) {\n    const reader = upstream.getReader();\n    let streamBufferingLoggedWarning = false;\n    let bytesSeen = 0;\n    const buffers = [\n        \"\",\n        new ByteArrayCollector_1.ByteArrayCollector((size)=>new Uint8Array(size))\n    ];\n    let mode = -1;\n    const pull = async (controller)=>{\n        const { value, done } = await reader.read();\n        const chunk = value;\n        if (done) {\n            if (mode !== -1) {\n                const remainder = flush(buffers, mode);\n                if (sizeOf(remainder) > 0) {\n                    controller.enqueue(remainder);\n                }\n            }\n            controller.close();\n        } else {\n            const chunkMode = modeOf(chunk, false);\n            if (mode !== chunkMode) {\n                if (mode >= 0) {\n                    controller.enqueue(flush(buffers, mode));\n                }\n                mode = chunkMode;\n            }\n            if (mode === -1) {\n                controller.enqueue(chunk);\n                return;\n            }\n            const chunkSize = sizeOf(chunk);\n            bytesSeen += chunkSize;\n            const bufferSize = sizeOf(buffers[mode]);\n            if (chunkSize >= size && bufferSize === 0) {\n                controller.enqueue(chunk);\n            } else {\n                const newSize = merge(buffers, mode, chunk);\n                if (!streamBufferingLoggedWarning && bytesSeen > size * 2) {\n                    streamBufferingLoggedWarning = true;\n                    logger === null || logger === void 0 ? void 0 : logger.warn(`@smithy/util-stream - stream chunk size ${chunkSize} is below threshold of ${size}, automatically buffering.`);\n                }\n                if (newSize >= size) {\n                    controller.enqueue(flush(buffers, mode));\n                } else {\n                    await pull(controller);\n                }\n            }\n        }\n    };\n    return new ReadableStream({\n        pull\n    });\n}\nexports.createBufferedReadableStream = createBufferedReadableStream;\nexports.createBufferedReadable = createBufferedReadableStream;\nfunction merge(buffers, mode, chunk) {\n    switch(mode){\n        case 0:\n            buffers[0] += chunk;\n            return sizeOf(buffers[0]);\n        case 1:\n        case 2:\n            buffers[mode].push(chunk);\n            return sizeOf(buffers[mode]);\n    }\n}\nexports.merge = merge;\nfunction flush(buffers, mode) {\n    switch(mode){\n        case 0:\n            const s = buffers[0];\n            buffers[0] = \"\";\n            return s;\n        case 1:\n        case 2:\n            return buffers[mode].flush();\n    }\n    throw new Error(`@smithy/util-stream - invalid index ${mode} given to flush()`);\n}\nexports.flush = flush;\nfunction sizeOf(chunk) {\n    var _a, _b;\n    return (_b = (_a = chunk === null || chunk === void 0 ? void 0 : chunk.byteLength) !== null && _a !== void 0 ? _a : chunk === null || chunk === void 0 ? void 0 : chunk.length) !== null && _b !== void 0 ? _b : 0;\n}\nexports.sizeOf = sizeOf;\nfunction modeOf(chunk, allowBuffer = true) {\n    if (allowBuffer && typeof Buffer !== \"undefined\" && chunk instanceof Buffer) {\n        return 2;\n    }\n    if (chunk instanceof Uint8Array) {\n        return 1;\n    }\n    if (typeof chunk === \"string\") {\n        return 0;\n    }\n    return -1;\n}\nexports.modeOf = modeOf;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/util-stream/dist-cjs/createBufferedReadableStream.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/util-stream/dist-cjs/getAwsChunkedEncodingStream.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@smithy/util-stream/dist-cjs/getAwsChunkedEncodingStream.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getAwsChunkedEncodingStream = void 0;\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\nconst getAwsChunkedEncodingStream = (readableStream, options)=>{\n    const { base64Encoder, bodyLengthChecker, checksumAlgorithmFn, checksumLocationName, streamHasher } = options;\n    const checksumRequired = base64Encoder !== undefined && checksumAlgorithmFn !== undefined && checksumLocationName !== undefined && streamHasher !== undefined;\n    const digest = checksumRequired ? streamHasher(checksumAlgorithmFn, readableStream) : undefined;\n    const awsChunkedEncodingStream = new stream_1.Readable({\n        read: ()=>{}\n    });\n    readableStream.on(\"data\", (data)=>{\n        const length = bodyLengthChecker(data) || 0;\n        awsChunkedEncodingStream.push(`${length.toString(16)}\\r\\n`);\n        awsChunkedEncodingStream.push(data);\n        awsChunkedEncodingStream.push(\"\\r\\n\");\n    });\n    readableStream.on(\"end\", async ()=>{\n        awsChunkedEncodingStream.push(`0\\r\\n`);\n        if (checksumRequired) {\n            const checksum = base64Encoder(await digest);\n            awsChunkedEncodingStream.push(`${checksumLocationName}:${checksum}\\r\\n`);\n            awsChunkedEncodingStream.push(`\\r\\n`);\n        }\n        awsChunkedEncodingStream.push(null);\n    });\n    return awsChunkedEncodingStream;\n};\nexports.getAwsChunkedEncodingStream = getAwsChunkedEncodingStream;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLXN0cmVhbS9kaXN0LWNqcy9nZXRBd3NDaHVua2VkRW5jb2RpbmdTdHJlYW0uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELG1DQUFtQyxHQUFHLEtBQUs7QUFDM0MsTUFBTUcsV0FBV0MsbUJBQU9BLENBQUMsc0JBQVE7QUFDakMsTUFBTUYsOEJBQThCLENBQUNHLGdCQUFnQkM7SUFDakQsTUFBTSxFQUFFQyxhQUFhLEVBQUVDLGlCQUFpQixFQUFFQyxtQkFBbUIsRUFBRUMsb0JBQW9CLEVBQUVDLFlBQVksRUFBRSxHQUFHTDtJQUN0RyxNQUFNTSxtQkFBbUJMLGtCQUFrQk0sYUFDdkNKLHdCQUF3QkksYUFDeEJILHlCQUF5QkcsYUFDekJGLGlCQUFpQkU7SUFDckIsTUFBTUMsU0FBU0YsbUJBQW1CRCxhQUFhRixxQkFBcUJKLGtCQUFrQlE7SUFDdEYsTUFBTUUsMkJBQTJCLElBQUlaLFNBQVNhLFFBQVEsQ0FBQztRQUFFQyxNQUFNLEtBQVE7SUFBRTtJQUN6RVosZUFBZWEsRUFBRSxDQUFDLFFBQVEsQ0FBQ0M7UUFDdkIsTUFBTUMsU0FBU1osa0JBQWtCVyxTQUFTO1FBQzFDSix5QkFBeUJNLElBQUksQ0FBQyxDQUFDLEVBQUVELE9BQU9FLFFBQVEsQ0FBQyxJQUFJLElBQUksQ0FBQztRQUMxRFAseUJBQXlCTSxJQUFJLENBQUNGO1FBQzlCSix5QkFBeUJNLElBQUksQ0FBQztJQUNsQztJQUNBaEIsZUFBZWEsRUFBRSxDQUFDLE9BQU87UUFDckJILHlCQUF5Qk0sSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDO1FBQ3JDLElBQUlULGtCQUFrQjtZQUNsQixNQUFNVyxXQUFXaEIsY0FBYyxNQUFNTztZQUNyQ0MseUJBQXlCTSxJQUFJLENBQUMsQ0FBQyxFQUFFWCxxQkFBcUIsQ0FBQyxFQUFFYSxTQUFTLElBQUksQ0FBQztZQUN2RVIseUJBQXlCTSxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDeEM7UUFDQU4seUJBQXlCTSxJQUFJLENBQUM7SUFDbEM7SUFDQSxPQUFPTjtBQUNYO0FBQ0FmLG1DQUFtQyxHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL2Nsb3Vkc2hpZnQvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLXN0cmVhbS9kaXN0LWNqcy9nZXRBd3NDaHVua2VkRW5jb2RpbmdTdHJlYW0uanM/YWU3YSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0QXdzQ2h1bmtlZEVuY29kaW5nU3RyZWFtID0gdm9pZCAwO1xuY29uc3Qgc3RyZWFtXzEgPSByZXF1aXJlKFwic3RyZWFtXCIpO1xuY29uc3QgZ2V0QXdzQ2h1bmtlZEVuY29kaW5nU3RyZWFtID0gKHJlYWRhYmxlU3RyZWFtLCBvcHRpb25zKSA9PiB7XG4gICAgY29uc3QgeyBiYXNlNjRFbmNvZGVyLCBib2R5TGVuZ3RoQ2hlY2tlciwgY2hlY2tzdW1BbGdvcml0aG1GbiwgY2hlY2tzdW1Mb2NhdGlvbk5hbWUsIHN0cmVhbUhhc2hlciB9ID0gb3B0aW9ucztcbiAgICBjb25zdCBjaGVja3N1bVJlcXVpcmVkID0gYmFzZTY0RW5jb2RlciAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgIGNoZWNrc3VtQWxnb3JpdGhtRm4gIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICBjaGVja3N1bUxvY2F0aW9uTmFtZSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgIHN0cmVhbUhhc2hlciAhPT0gdW5kZWZpbmVkO1xuICAgIGNvbnN0IGRpZ2VzdCA9IGNoZWNrc3VtUmVxdWlyZWQgPyBzdHJlYW1IYXNoZXIoY2hlY2tzdW1BbGdvcml0aG1GbiwgcmVhZGFibGVTdHJlYW0pIDogdW5kZWZpbmVkO1xuICAgIGNvbnN0IGF3c0NodW5rZWRFbmNvZGluZ1N0cmVhbSA9IG5ldyBzdHJlYW1fMS5SZWFkYWJsZSh7IHJlYWQ6ICgpID0+IHsgfSB9KTtcbiAgICByZWFkYWJsZVN0cmVhbS5vbihcImRhdGFcIiwgKGRhdGEpID0+IHtcbiAgICAgICAgY29uc3QgbGVuZ3RoID0gYm9keUxlbmd0aENoZWNrZXIoZGF0YSkgfHwgMDtcbiAgICAgICAgYXdzQ2h1bmtlZEVuY29kaW5nU3RyZWFtLnB1c2goYCR7bGVuZ3RoLnRvU3RyaW5nKDE2KX1cXHJcXG5gKTtcbiAgICAgICAgYXdzQ2h1bmtlZEVuY29kaW5nU3RyZWFtLnB1c2goZGF0YSk7XG4gICAgICAgIGF3c0NodW5rZWRFbmNvZGluZ1N0cmVhbS5wdXNoKFwiXFxyXFxuXCIpO1xuICAgIH0pO1xuICAgIHJlYWRhYmxlU3RyZWFtLm9uKFwiZW5kXCIsIGFzeW5jICgpID0+IHtcbiAgICAgICAgYXdzQ2h1bmtlZEVuY29kaW5nU3RyZWFtLnB1c2goYDBcXHJcXG5gKTtcbiAgICAgICAgaWYgKGNoZWNrc3VtUmVxdWlyZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IGNoZWNrc3VtID0gYmFzZTY0RW5jb2Rlcihhd2FpdCBkaWdlc3QpO1xuICAgICAgICAgICAgYXdzQ2h1bmtlZEVuY29kaW5nU3RyZWFtLnB1c2goYCR7Y2hlY2tzdW1Mb2NhdGlvbk5hbWV9OiR7Y2hlY2tzdW19XFxyXFxuYCk7XG4gICAgICAgICAgICBhd3NDaHVua2VkRW5jb2RpbmdTdHJlYW0ucHVzaChgXFxyXFxuYCk7XG4gICAgICAgIH1cbiAgICAgICAgYXdzQ2h1bmtlZEVuY29kaW5nU3RyZWFtLnB1c2gobnVsbCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGF3c0NodW5rZWRFbmNvZGluZ1N0cmVhbTtcbn07XG5leHBvcnRzLmdldEF3c0NodW5rZWRFbmNvZGluZ1N0cmVhbSA9IGdldEF3c0NodW5rZWRFbmNvZGluZ1N0cmVhbTtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImdldEF3c0NodW5rZWRFbmNvZGluZ1N0cmVhbSIsInN0cmVhbV8xIiwicmVxdWlyZSIsInJlYWRhYmxlU3RyZWFtIiwib3B0aW9ucyIsImJhc2U2NEVuY29kZXIiLCJib2R5TGVuZ3RoQ2hlY2tlciIsImNoZWNrc3VtQWxnb3JpdGhtRm4iLCJjaGVja3N1bUxvY2F0aW9uTmFtZSIsInN0cmVhbUhhc2hlciIsImNoZWNrc3VtUmVxdWlyZWQiLCJ1bmRlZmluZWQiLCJkaWdlc3QiLCJhd3NDaHVua2VkRW5jb2RpbmdTdHJlYW0iLCJSZWFkYWJsZSIsInJlYWQiLCJvbiIsImRhdGEiLCJsZW5ndGgiLCJwdXNoIiwidG9TdHJpbmciLCJjaGVja3N1bSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/util-stream/dist-cjs/getAwsChunkedEncodingStream.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/util-stream/dist-cjs/headStream.browser.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@smithy/util-stream/dist-cjs/headStream.browser.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.headStream = void 0;\nasync function headStream(stream, bytes) {\n    var _a;\n    let byteLengthCounter = 0;\n    const chunks = [];\n    const reader = stream.getReader();\n    let isDone = false;\n    while(!isDone){\n        const { done, value } = await reader.read();\n        if (value) {\n            chunks.push(value);\n            byteLengthCounter += (_a = value === null || value === void 0 ? void 0 : value.byteLength) !== null && _a !== void 0 ? _a : 0;\n        }\n        if (byteLengthCounter >= bytes) {\n            break;\n        }\n        isDone = done;\n    }\n    reader.releaseLock();\n    const collected = new Uint8Array(Math.min(bytes, byteLengthCounter));\n    let offset = 0;\n    for (const chunk of chunks){\n        if (chunk.byteLength > collected.byteLength - offset) {\n            collected.set(chunk.subarray(0, collected.byteLength - offset), offset);\n            break;\n        } else {\n            collected.set(chunk, offset);\n        }\n        offset += chunk.length;\n    }\n    return collected;\n}\nexports.headStream = headStream;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLXN0cmVhbS9kaXN0LWNqcy9oZWFkU3RyZWFtLmJyb3dzZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGtCQUFrQixHQUFHLEtBQUs7QUFDMUIsZUFBZUUsV0FBV0MsTUFBTSxFQUFFQyxLQUFLO0lBQ25DLElBQUlDO0lBQ0osSUFBSUMsb0JBQW9CO0lBQ3hCLE1BQU1DLFNBQVMsRUFBRTtJQUNqQixNQUFNQyxTQUFTTCxPQUFPTSxTQUFTO0lBQy9CLElBQUlDLFNBQVM7SUFDYixNQUFPLENBQUNBLE9BQVE7UUFDWixNQUFNLEVBQUVDLElBQUksRUFBRVYsS0FBSyxFQUFFLEdBQUcsTUFBTU8sT0FBT0ksSUFBSTtRQUN6QyxJQUFJWCxPQUFPO1lBQ1BNLE9BQU9NLElBQUksQ0FBQ1o7WUFDWksscUJBQXFCLENBQUNELEtBQUtKLFVBQVUsUUFBUUEsVUFBVSxLQUFLLElBQUksS0FBSyxJQUFJQSxNQUFNYSxVQUFVLE1BQU0sUUFBUVQsT0FBTyxLQUFLLElBQUlBLEtBQUs7UUFDaEk7UUFDQSxJQUFJQyxxQkFBcUJGLE9BQU87WUFDNUI7UUFDSjtRQUNBTSxTQUFTQztJQUNiO0lBQ0FILE9BQU9PLFdBQVc7SUFDbEIsTUFBTUMsWUFBWSxJQUFJQyxXQUFXQyxLQUFLQyxHQUFHLENBQUNmLE9BQU9FO0lBQ2pELElBQUljLFNBQVM7SUFDYixLQUFLLE1BQU1DLFNBQVNkLE9BQVE7UUFDeEIsSUFBSWMsTUFBTVAsVUFBVSxHQUFHRSxVQUFVRixVQUFVLEdBQUdNLFFBQVE7WUFDbERKLFVBQVVNLEdBQUcsQ0FBQ0QsTUFBTUUsUUFBUSxDQUFDLEdBQUdQLFVBQVVGLFVBQVUsR0FBR00sU0FBU0E7WUFDaEU7UUFDSixPQUNLO1lBQ0RKLFVBQVVNLEdBQUcsQ0FBQ0QsT0FBT0Q7UUFDekI7UUFDQUEsVUFBVUMsTUFBTUcsTUFBTTtJQUMxQjtJQUNBLE9BQU9SO0FBQ1g7QUFDQWhCLGtCQUFrQixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL2Nsb3Vkc2hpZnQvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLXN0cmVhbS9kaXN0LWNqcy9oZWFkU3RyZWFtLmJyb3dzZXIuanM/YzRhMyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaGVhZFN0cmVhbSA9IHZvaWQgMDtcbmFzeW5jIGZ1bmN0aW9uIGhlYWRTdHJlYW0oc3RyZWFtLCBieXRlcykge1xuICAgIHZhciBfYTtcbiAgICBsZXQgYnl0ZUxlbmd0aENvdW50ZXIgPSAwO1xuICAgIGNvbnN0IGNodW5rcyA9IFtdO1xuICAgIGNvbnN0IHJlYWRlciA9IHN0cmVhbS5nZXRSZWFkZXIoKTtcbiAgICBsZXQgaXNEb25lID0gZmFsc2U7XG4gICAgd2hpbGUgKCFpc0RvbmUpIHtcbiAgICAgICAgY29uc3QgeyBkb25lLCB2YWx1ZSB9ID0gYXdhaXQgcmVhZGVyLnJlYWQoKTtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICBjaHVua3MucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgICBieXRlTGVuZ3RoQ291bnRlciArPSAoX2EgPSB2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogdmFsdWUuYnl0ZUxlbmd0aCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYnl0ZUxlbmd0aENvdW50ZXIgPj0gYnl0ZXMpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlzRG9uZSA9IGRvbmU7XG4gICAgfVxuICAgIHJlYWRlci5yZWxlYXNlTG9jaygpO1xuICAgIGNvbnN0IGNvbGxlY3RlZCA9IG5ldyBVaW50OEFycmF5KE1hdGgubWluKGJ5dGVzLCBieXRlTGVuZ3RoQ291bnRlcikpO1xuICAgIGxldCBvZmZzZXQgPSAwO1xuICAgIGZvciAoY29uc3QgY2h1bmsgb2YgY2h1bmtzKSB7XG4gICAgICAgIGlmIChjaHVuay5ieXRlTGVuZ3RoID4gY29sbGVjdGVkLmJ5dGVMZW5ndGggLSBvZmZzZXQpIHtcbiAgICAgICAgICAgIGNvbGxlY3RlZC5zZXQoY2h1bmsuc3ViYXJyYXkoMCwgY29sbGVjdGVkLmJ5dGVMZW5ndGggLSBvZmZzZXQpLCBvZmZzZXQpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb2xsZWN0ZWQuc2V0KGNodW5rLCBvZmZzZXQpO1xuICAgICAgICB9XG4gICAgICAgIG9mZnNldCArPSBjaHVuay5sZW5ndGg7XG4gICAgfVxuICAgIHJldHVybiBjb2xsZWN0ZWQ7XG59XG5leHBvcnRzLmhlYWRTdHJlYW0gPSBoZWFkU3RyZWFtO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiaGVhZFN0cmVhbSIsInN0cmVhbSIsImJ5dGVzIiwiX2EiLCJieXRlTGVuZ3RoQ291bnRlciIsImNodW5rcyIsInJlYWRlciIsImdldFJlYWRlciIsImlzRG9uZSIsImRvbmUiLCJyZWFkIiwicHVzaCIsImJ5dGVMZW5ndGgiLCJyZWxlYXNlTG9jayIsImNvbGxlY3RlZCIsIlVpbnQ4QXJyYXkiLCJNYXRoIiwibWluIiwib2Zmc2V0IiwiY2h1bmsiLCJzZXQiLCJzdWJhcnJheSIsImxlbmd0aCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/util-stream/dist-cjs/headStream.browser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/util-stream/dist-cjs/headStream.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@smithy/util-stream/dist-cjs/headStream.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.headStream = void 0;\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\nconst headStream_browser_1 = __webpack_require__(/*! ./headStream.browser */ \"(rsc)/./node_modules/@smithy/util-stream/dist-cjs/headStream.browser.js\");\nconst stream_type_check_1 = __webpack_require__(/*! ./stream-type-check */ \"(rsc)/./node_modules/@smithy/util-stream/dist-cjs/stream-type-check.js\");\nconst headStream = (stream, bytes)=>{\n    if ((0, stream_type_check_1.isReadableStream)(stream)) {\n        return (0, headStream_browser_1.headStream)(stream, bytes);\n    }\n    return new Promise((resolve, reject)=>{\n        const collector = new Collector();\n        collector.limit = bytes;\n        stream.pipe(collector);\n        stream.on(\"error\", (err)=>{\n            collector.end();\n            reject(err);\n        });\n        collector.on(\"error\", reject);\n        collector.on(\"finish\", function() {\n            const bytes = new Uint8Array(Buffer.concat(this.buffers));\n            resolve(bytes);\n        });\n    });\n};\nexports.headStream = headStream;\nclass Collector extends stream_1.Writable {\n    constructor(){\n        super(...arguments);\n        this.buffers = [];\n        this.limit = Infinity;\n        this.bytesBuffered = 0;\n    }\n    _write(chunk, encoding, callback) {\n        var _a;\n        this.buffers.push(chunk);\n        this.bytesBuffered += (_a = chunk.byteLength) !== null && _a !== void 0 ? _a : 0;\n        if (this.bytesBuffered >= this.limit) {\n            const excess = this.bytesBuffered - this.limit;\n            const tailBuffer = this.buffers[this.buffers.length - 1];\n            this.buffers[this.buffers.length - 1] = tailBuffer.subarray(0, tailBuffer.byteLength - excess);\n            this.emit(\"finish\");\n        }\n        callback();\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLXN0cmVhbS9kaXN0LWNqcy9oZWFkU3RyZWFtLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxrQkFBa0IsR0FBRyxLQUFLO0FBQzFCLE1BQU1HLFdBQVdDLG1CQUFPQSxDQUFDLHNCQUFRO0FBQ2pDLE1BQU1DLHVCQUF1QkQsbUJBQU9BLENBQUMscUdBQXNCO0FBQzNELE1BQU1FLHNCQUFzQkYsbUJBQU9BLENBQUMsbUdBQXFCO0FBQ3pELE1BQU1GLGFBQWEsQ0FBQ0ssUUFBUUM7SUFDeEIsSUFBSSxDQUFDLEdBQUdGLG9CQUFvQkcsZ0JBQWdCLEVBQUVGLFNBQVM7UUFDbkQsT0FBTyxDQUFDLEdBQUdGLHFCQUFxQkgsVUFBVSxFQUFFSyxRQUFRQztJQUN4RDtJQUNBLE9BQU8sSUFBSUUsUUFBUSxDQUFDQyxTQUFTQztRQUN6QixNQUFNQyxZQUFZLElBQUlDO1FBQ3RCRCxVQUFVRSxLQUFLLEdBQUdQO1FBQ2xCRCxPQUFPUyxJQUFJLENBQUNIO1FBQ1pOLE9BQU9VLEVBQUUsQ0FBQyxTQUFTLENBQUNDO1lBQ2hCTCxVQUFVTSxHQUFHO1lBQ2JQLE9BQU9NO1FBQ1g7UUFDQUwsVUFBVUksRUFBRSxDQUFDLFNBQVNMO1FBQ3RCQyxVQUFVSSxFQUFFLENBQUMsVUFBVTtZQUNuQixNQUFNVCxRQUFRLElBQUlZLFdBQVdDLE9BQU9DLE1BQU0sQ0FBQyxJQUFJLENBQUNDLE9BQU87WUFDdkRaLFFBQVFIO1FBQ1o7SUFDSjtBQUNKO0FBQ0FSLGtCQUFrQixHQUFHRTtBQUNyQixNQUFNWSxrQkFBa0JYLFNBQVNxQixRQUFRO0lBQ3JDQyxhQUFjO1FBQ1YsS0FBSyxJQUFJQztRQUNULElBQUksQ0FBQ0gsT0FBTyxHQUFHLEVBQUU7UUFDakIsSUFBSSxDQUFDUixLQUFLLEdBQUdZO1FBQ2IsSUFBSSxDQUFDQyxhQUFhLEdBQUc7SUFDekI7SUFDQUMsT0FBT0MsS0FBSyxFQUFFQyxRQUFRLEVBQUVDLFFBQVEsRUFBRTtRQUM5QixJQUFJQztRQUNKLElBQUksQ0FBQ1YsT0FBTyxDQUFDVyxJQUFJLENBQUNKO1FBQ2xCLElBQUksQ0FBQ0YsYUFBYSxJQUFJLENBQUNLLEtBQUtILE1BQU1LLFVBQVUsTUFBTSxRQUFRRixPQUFPLEtBQUssSUFBSUEsS0FBSztRQUMvRSxJQUFJLElBQUksQ0FBQ0wsYUFBYSxJQUFJLElBQUksQ0FBQ2IsS0FBSyxFQUFFO1lBQ2xDLE1BQU1xQixTQUFTLElBQUksQ0FBQ1IsYUFBYSxHQUFHLElBQUksQ0FBQ2IsS0FBSztZQUM5QyxNQUFNc0IsYUFBYSxJQUFJLENBQUNkLE9BQU8sQ0FBQyxJQUFJLENBQUNBLE9BQU8sQ0FBQ2UsTUFBTSxHQUFHLEVBQUU7WUFDeEQsSUFBSSxDQUFDZixPQUFPLENBQUMsSUFBSSxDQUFDQSxPQUFPLENBQUNlLE1BQU0sR0FBRyxFQUFFLEdBQUdELFdBQVdFLFFBQVEsQ0FBQyxHQUFHRixXQUFXRixVQUFVLEdBQUdDO1lBQ3ZGLElBQUksQ0FBQ0ksSUFBSSxDQUFDO1FBQ2Q7UUFDQVI7SUFDSjtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2xvdWRzaGlmdC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3V0aWwtc3RyZWFtL2Rpc3QtY2pzL2hlYWRTdHJlYW0uanM/MTU3NyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaGVhZFN0cmVhbSA9IHZvaWQgMDtcbmNvbnN0IHN0cmVhbV8xID0gcmVxdWlyZShcInN0cmVhbVwiKTtcbmNvbnN0IGhlYWRTdHJlYW1fYnJvd3Nlcl8xID0gcmVxdWlyZShcIi4vaGVhZFN0cmVhbS5icm93c2VyXCIpO1xuY29uc3Qgc3RyZWFtX3R5cGVfY2hlY2tfMSA9IHJlcXVpcmUoXCIuL3N0cmVhbS10eXBlLWNoZWNrXCIpO1xuY29uc3QgaGVhZFN0cmVhbSA9IChzdHJlYW0sIGJ5dGVzKSA9PiB7XG4gICAgaWYgKCgwLCBzdHJlYW1fdHlwZV9jaGVja18xLmlzUmVhZGFibGVTdHJlYW0pKHN0cmVhbSkpIHtcbiAgICAgICAgcmV0dXJuICgwLCBoZWFkU3RyZWFtX2Jyb3dzZXJfMS5oZWFkU3RyZWFtKShzdHJlYW0sIGJ5dGVzKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgY29uc3QgY29sbGVjdG9yID0gbmV3IENvbGxlY3RvcigpO1xuICAgICAgICBjb2xsZWN0b3IubGltaXQgPSBieXRlcztcbiAgICAgICAgc3RyZWFtLnBpcGUoY29sbGVjdG9yKTtcbiAgICAgICAgc3RyZWFtLm9uKFwiZXJyb3JcIiwgKGVycikgPT4ge1xuICAgICAgICAgICAgY29sbGVjdG9yLmVuZCgpO1xuICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgIH0pO1xuICAgICAgICBjb2xsZWN0b3Iub24oXCJlcnJvclwiLCByZWplY3QpO1xuICAgICAgICBjb2xsZWN0b3Iub24oXCJmaW5pc2hcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY29uc3QgYnl0ZXMgPSBuZXcgVWludDhBcnJheShCdWZmZXIuY29uY2F0KHRoaXMuYnVmZmVycykpO1xuICAgICAgICAgICAgcmVzb2x2ZShieXRlcyk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufTtcbmV4cG9ydHMuaGVhZFN0cmVhbSA9IGhlYWRTdHJlYW07XG5jbGFzcyBDb2xsZWN0b3IgZXh0ZW5kcyBzdHJlYW1fMS5Xcml0YWJsZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuYnVmZmVycyA9IFtdO1xuICAgICAgICB0aGlzLmxpbWl0ID0gSW5maW5pdHk7XG4gICAgICAgIHRoaXMuYnl0ZXNCdWZmZXJlZCA9IDA7XG4gICAgfVxuICAgIF93cml0ZShjaHVuaywgZW5jb2RpbmcsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgdGhpcy5idWZmZXJzLnB1c2goY2h1bmspO1xuICAgICAgICB0aGlzLmJ5dGVzQnVmZmVyZWQgKz0gKF9hID0gY2h1bmsuYnl0ZUxlbmd0aCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogMDtcbiAgICAgICAgaWYgKHRoaXMuYnl0ZXNCdWZmZXJlZCA+PSB0aGlzLmxpbWl0KSB7XG4gICAgICAgICAgICBjb25zdCBleGNlc3MgPSB0aGlzLmJ5dGVzQnVmZmVyZWQgLSB0aGlzLmxpbWl0O1xuICAgICAgICAgICAgY29uc3QgdGFpbEJ1ZmZlciA9IHRoaXMuYnVmZmVyc1t0aGlzLmJ1ZmZlcnMubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICB0aGlzLmJ1ZmZlcnNbdGhpcy5idWZmZXJzLmxlbmd0aCAtIDFdID0gdGFpbEJ1ZmZlci5zdWJhcnJheSgwLCB0YWlsQnVmZmVyLmJ5dGVMZW5ndGggLSBleGNlc3MpO1xuICAgICAgICAgICAgdGhpcy5lbWl0KFwiZmluaXNoXCIpO1xuICAgICAgICB9XG4gICAgICAgIGNhbGxiYWNrKCk7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiaGVhZFN0cmVhbSIsInN0cmVhbV8xIiwicmVxdWlyZSIsImhlYWRTdHJlYW1fYnJvd3Nlcl8xIiwic3RyZWFtX3R5cGVfY2hlY2tfMSIsInN0cmVhbSIsImJ5dGVzIiwiaXNSZWFkYWJsZVN0cmVhbSIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiY29sbGVjdG9yIiwiQ29sbGVjdG9yIiwibGltaXQiLCJwaXBlIiwib24iLCJlcnIiLCJlbmQiLCJVaW50OEFycmF5IiwiQnVmZmVyIiwiY29uY2F0IiwiYnVmZmVycyIsIldyaXRhYmxlIiwiY29uc3RydWN0b3IiLCJhcmd1bWVudHMiLCJJbmZpbml0eSIsImJ5dGVzQnVmZmVyZWQiLCJfd3JpdGUiLCJjaHVuayIsImVuY29kaW5nIiwiY2FsbGJhY2siLCJfYSIsInB1c2giLCJieXRlTGVuZ3RoIiwiZXhjZXNzIiwidGFpbEJ1ZmZlciIsImxlbmd0aCIsInN1YmFycmF5IiwiZW1pdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/util-stream/dist-cjs/headStream.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/util-stream/dist-cjs/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@smithy/util-stream/dist-cjs/index.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value)=>__defProp(target, \"name\", {\n        value,\n        configurable: true\n    });\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __reExport = (target, mod, secondTarget)=>(__copyProps(target, mod, \"default\"), secondTarget && __copyProps(secondTarget, mod, \"default\"));\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n    Uint8ArrayBlobAdapter: ()=>Uint8ArrayBlobAdapter\n});\nmodule.exports = __toCommonJS(src_exports);\n// src/blob/transforms.ts\nvar import_util_base64 = __webpack_require__(/*! @smithy/util-base64 */ \"(rsc)/./node_modules/@smithy/util-base64/dist-cjs/index.js\");\nvar import_util_utf8 = __webpack_require__(/*! @smithy/util-utf8 */ \"(rsc)/./node_modules/@smithy/util-utf8/dist-cjs/index.js\");\nfunction transformToString(payload, encoding = \"utf-8\") {\n    if (encoding === \"base64\") {\n        return (0, import_util_base64.toBase64)(payload);\n    }\n    return (0, import_util_utf8.toUtf8)(payload);\n}\n__name(transformToString, \"transformToString\");\nfunction transformFromString(str, encoding) {\n    if (encoding === \"base64\") {\n        return Uint8ArrayBlobAdapter.mutate((0, import_util_base64.fromBase64)(str));\n    }\n    return Uint8ArrayBlobAdapter.mutate((0, import_util_utf8.fromUtf8)(str));\n}\n__name(transformFromString, \"transformFromString\");\n// src/blob/Uint8ArrayBlobAdapter.ts\nvar Uint8ArrayBlobAdapter = class _Uint8ArrayBlobAdapter extends Uint8Array {\n    static{\n        __name(this, \"Uint8ArrayBlobAdapter\");\n    }\n    /**\n   * @param source - such as a string or Stream.\n   * @returns a new Uint8ArrayBlobAdapter extending Uint8Array.\n   */ static fromString(source, encoding = \"utf-8\") {\n        switch(typeof source){\n            case \"string\":\n                return transformFromString(source, encoding);\n            default:\n                throw new Error(`Unsupported conversion from ${typeof source} to Uint8ArrayBlobAdapter.`);\n        }\n    }\n    /**\n   * @param source - Uint8Array to be mutated.\n   * @returns the same Uint8Array but with prototype switched to Uint8ArrayBlobAdapter.\n   */ static mutate(source) {\n        Object.setPrototypeOf(source, _Uint8ArrayBlobAdapter.prototype);\n        return source;\n    }\n    /**\n   * @param encoding - default 'utf-8'.\n   * @returns the blob as string.\n   */ transformToString(encoding = \"utf-8\") {\n        return transformToString(this, encoding);\n    }\n};\n// src/index.ts\n__reExport(src_exports, __webpack_require__(/*! ./checksum/ChecksumStream */ \"(rsc)/./node_modules/@smithy/util-stream/dist-cjs/checksum/ChecksumStream.js\"), module.exports);\n__reExport(src_exports, __webpack_require__(/*! ./checksum/createChecksumStream */ \"(rsc)/./node_modules/@smithy/util-stream/dist-cjs/checksum/createChecksumStream.js\"), module.exports);\n__reExport(src_exports, __webpack_require__(/*! ././createBufferedReadable */ \"(rsc)/./node_modules/@smithy/util-stream/dist-cjs/createBufferedReadable.js\"), module.exports);\n__reExport(src_exports, __webpack_require__(/*! ././getAwsChunkedEncodingStream */ \"(rsc)/./node_modules/@smithy/util-stream/dist-cjs/getAwsChunkedEncodingStream.js\"), module.exports);\n__reExport(src_exports, __webpack_require__(/*! ././headStream */ \"(rsc)/./node_modules/@smithy/util-stream/dist-cjs/headStream.js\"), module.exports);\n__reExport(src_exports, __webpack_require__(/*! ././sdk-stream-mixin */ \"(rsc)/./node_modules/@smithy/util-stream/dist-cjs/sdk-stream-mixin.js\"), module.exports);\n__reExport(src_exports, __webpack_require__(/*! ././splitStream */ \"(rsc)/./node_modules/@smithy/util-stream/dist-cjs/splitStream.js\"), module.exports);\n__reExport(src_exports, __webpack_require__(/*! ././stream-type-check */ \"(rsc)/./node_modules/@smithy/util-stream/dist-cjs/stream-type-check.js\"), module.exports);\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/util-stream/dist-cjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/util-stream/dist-cjs/sdk-stream-mixin.browser.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@smithy/util-stream/dist-cjs/sdk-stream-mixin.browser.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.sdkStreamMixin = void 0;\nconst fetch_http_handler_1 = __webpack_require__(/*! @smithy/fetch-http-handler */ \"(rsc)/./node_modules/@smithy/fetch-http-handler/dist-cjs/index.js\");\nconst util_base64_1 = __webpack_require__(/*! @smithy/util-base64 */ \"(rsc)/./node_modules/@smithy/util-base64/dist-cjs/index.js\");\nconst util_hex_encoding_1 = __webpack_require__(/*! @smithy/util-hex-encoding */ \"(rsc)/./node_modules/@smithy/util-hex-encoding/dist-cjs/index.js\");\nconst util_utf8_1 = __webpack_require__(/*! @smithy/util-utf8 */ \"(rsc)/./node_modules/@smithy/util-utf8/dist-cjs/index.js\");\nconst stream_type_check_1 = __webpack_require__(/*! ./stream-type-check */ \"(rsc)/./node_modules/@smithy/util-stream/dist-cjs/stream-type-check.js\");\nconst ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED = \"The stream has already been transformed.\";\nconst sdkStreamMixin = (stream)=>{\n    var _a, _b;\n    if (!isBlobInstance(stream) && !(0, stream_type_check_1.isReadableStream)(stream)) {\n        const name = ((_b = (_a = stream === null || stream === void 0 ? void 0 : stream.__proto__) === null || _a === void 0 ? void 0 : _a.constructor) === null || _b === void 0 ? void 0 : _b.name) || stream;\n        throw new Error(`Unexpected stream implementation, expect Blob or ReadableStream, got ${name}`);\n    }\n    let transformed = false;\n    const transformToByteArray = async ()=>{\n        if (transformed) {\n            throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);\n        }\n        transformed = true;\n        return await (0, fetch_http_handler_1.streamCollector)(stream);\n    };\n    const blobToWebStream = (blob)=>{\n        if (typeof blob.stream !== \"function\") {\n            throw new Error(\"Cannot transform payload Blob to web stream. Please make sure the Blob.stream() is polyfilled.\\n\" + \"If you are using React Native, this API is not yet supported, see: https://react-native.canny.io/feature-requests/p/fetch-streaming-body\");\n        }\n        return blob.stream();\n    };\n    return Object.assign(stream, {\n        transformToByteArray: transformToByteArray,\n        transformToString: async (encoding)=>{\n            const buf = await transformToByteArray();\n            if (encoding === \"base64\") {\n                return (0, util_base64_1.toBase64)(buf);\n            } else if (encoding === \"hex\") {\n                return (0, util_hex_encoding_1.toHex)(buf);\n            } else if (encoding === undefined || encoding === \"utf8\" || encoding === \"utf-8\") {\n                return (0, util_utf8_1.toUtf8)(buf);\n            } else if (typeof TextDecoder === \"function\") {\n                return new TextDecoder(encoding).decode(buf);\n            } else {\n                throw new Error(\"TextDecoder is not available, please make sure polyfill is provided.\");\n            }\n        },\n        transformToWebStream: ()=>{\n            if (transformed) {\n                throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);\n            }\n            transformed = true;\n            if (isBlobInstance(stream)) {\n                return blobToWebStream(stream);\n            } else if ((0, stream_type_check_1.isReadableStream)(stream)) {\n                return stream;\n            } else {\n                throw new Error(`Cannot transform payload to web stream, got ${stream}`);\n            }\n        }\n    });\n};\nexports.sdkStreamMixin = sdkStreamMixin;\nconst isBlobInstance = (stream)=>typeof Blob === \"function\" && stream instanceof Blob;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLXN0cmVhbS9kaXN0LWNqcy9zZGstc3RyZWFtLW1peGluLmJyb3dzZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHNCQUFzQixHQUFHLEtBQUs7QUFDOUIsTUFBTUcsdUJBQXVCQyxtQkFBT0EsQ0FBQyxxR0FBNEI7QUFDakUsTUFBTUMsZ0JBQWdCRCxtQkFBT0EsQ0FBQyx1RkFBcUI7QUFDbkQsTUFBTUUsc0JBQXNCRixtQkFBT0EsQ0FBQyxtR0FBMkI7QUFDL0QsTUFBTUcsY0FBY0gsbUJBQU9BLENBQUMsbUZBQW1CO0FBQy9DLE1BQU1JLHNCQUFzQkosbUJBQU9BLENBQUMsbUdBQXFCO0FBQ3pELE1BQU1LLHNDQUFzQztBQUM1QyxNQUFNUCxpQkFBaUIsQ0FBQ1E7SUFDcEIsSUFBSUMsSUFBSUM7SUFDUixJQUFJLENBQUNDLGVBQWVILFdBQVcsQ0FBQyxDQUFDLEdBQUdGLG9CQUFvQk0sZ0JBQWdCLEVBQUVKLFNBQVM7UUFDL0UsTUFBTUssT0FBTyxDQUFDLENBQUNILEtBQUssQ0FBQ0QsS0FBS0QsV0FBVyxRQUFRQSxXQUFXLEtBQUssSUFBSSxLQUFLLElBQUlBLE9BQU9NLFNBQVMsTUFBTSxRQUFRTCxPQUFPLEtBQUssSUFBSSxLQUFLLElBQUlBLEdBQUdNLFdBQVcsTUFBTSxRQUFRTCxPQUFPLEtBQUssSUFBSSxLQUFLLElBQUlBLEdBQUdHLElBQUksS0FBS0w7UUFDbE0sTUFBTSxJQUFJUSxNQUFNLENBQUMscUVBQXFFLEVBQUVILEtBQUssQ0FBQztJQUNsRztJQUNBLElBQUlJLGNBQWM7SUFDbEIsTUFBTUMsdUJBQXVCO1FBQ3pCLElBQUlELGFBQWE7WUFDYixNQUFNLElBQUlELE1BQU1UO1FBQ3BCO1FBQ0FVLGNBQWM7UUFDZCxPQUFPLE1BQU0sQ0FBQyxHQUFHaEIscUJBQXFCa0IsZUFBZSxFQUFFWDtJQUMzRDtJQUNBLE1BQU1ZLGtCQUFrQixDQUFDQztRQUNyQixJQUFJLE9BQU9BLEtBQUtiLE1BQU0sS0FBSyxZQUFZO1lBQ25DLE1BQU0sSUFBSVEsTUFBTSxxR0FDWjtRQUNSO1FBQ0EsT0FBT0ssS0FBS2IsTUFBTTtJQUN0QjtJQUNBLE9BQU9aLE9BQU8wQixNQUFNLENBQUNkLFFBQVE7UUFDekJVLHNCQUFzQkE7UUFDdEJLLG1CQUFtQixPQUFPQztZQUN0QixNQUFNQyxNQUFNLE1BQU1QO1lBQ2xCLElBQUlNLGFBQWEsVUFBVTtnQkFDdkIsT0FBTyxDQUFDLEdBQUdyQixjQUFjdUIsUUFBUSxFQUFFRDtZQUN2QyxPQUNLLElBQUlELGFBQWEsT0FBTztnQkFDekIsT0FBTyxDQUFDLEdBQUdwQixvQkFBb0J1QixLQUFLLEVBQUVGO1lBQzFDLE9BQ0ssSUFBSUQsYUFBYUksYUFBYUosYUFBYSxVQUFVQSxhQUFhLFNBQVM7Z0JBQzVFLE9BQU8sQ0FBQyxHQUFHbkIsWUFBWXdCLE1BQU0sRUFBRUo7WUFDbkMsT0FDSyxJQUFJLE9BQU9LLGdCQUFnQixZQUFZO2dCQUN4QyxPQUFPLElBQUlBLFlBQVlOLFVBQVVPLE1BQU0sQ0FBQ047WUFDNUMsT0FDSztnQkFDRCxNQUFNLElBQUlULE1BQU07WUFDcEI7UUFDSjtRQUNBZ0Isc0JBQXNCO1lBQ2xCLElBQUlmLGFBQWE7Z0JBQ2IsTUFBTSxJQUFJRCxNQUFNVDtZQUNwQjtZQUNBVSxjQUFjO1lBQ2QsSUFBSU4sZUFBZUgsU0FBUztnQkFDeEIsT0FBT1ksZ0JBQWdCWjtZQUMzQixPQUNLLElBQUksQ0FBQyxHQUFHRixvQkFBb0JNLGdCQUFnQixFQUFFSixTQUFTO2dCQUN4RCxPQUFPQTtZQUNYLE9BQ0s7Z0JBQ0QsTUFBTSxJQUFJUSxNQUFNLENBQUMsNENBQTRDLEVBQUVSLE9BQU8sQ0FBQztZQUMzRTtRQUNKO0lBQ0o7QUFDSjtBQUNBVixzQkFBc0IsR0FBR0U7QUFDekIsTUFBTVcsaUJBQWlCLENBQUNILFNBQVcsT0FBT3lCLFNBQVMsY0FBY3pCLGtCQUFrQnlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2xvdWRzaGlmdC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3V0aWwtc3RyZWFtL2Rpc3QtY2pzL3Nkay1zdHJlYW0tbWl4aW4uYnJvd3Nlci5qcz80MDdlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zZGtTdHJlYW1NaXhpbiA9IHZvaWQgMDtcbmNvbnN0IGZldGNoX2h0dHBfaGFuZGxlcl8xID0gcmVxdWlyZShcIkBzbWl0aHkvZmV0Y2gtaHR0cC1oYW5kbGVyXCIpO1xuY29uc3QgdXRpbF9iYXNlNjRfMSA9IHJlcXVpcmUoXCJAc21pdGh5L3V0aWwtYmFzZTY0XCIpO1xuY29uc3QgdXRpbF9oZXhfZW5jb2RpbmdfMSA9IHJlcXVpcmUoXCJAc21pdGh5L3V0aWwtaGV4LWVuY29kaW5nXCIpO1xuY29uc3QgdXRpbF91dGY4XzEgPSByZXF1aXJlKFwiQHNtaXRoeS91dGlsLXV0ZjhcIik7XG5jb25zdCBzdHJlYW1fdHlwZV9jaGVja18xID0gcmVxdWlyZShcIi4vc3RyZWFtLXR5cGUtY2hlY2tcIik7XG5jb25zdCBFUlJfTVNHX1NUUkVBTV9IQVNfQkVFTl9UUkFOU0ZPUk1FRCA9IFwiVGhlIHN0cmVhbSBoYXMgYWxyZWFkeSBiZWVuIHRyYW5zZm9ybWVkLlwiO1xuY29uc3Qgc2RrU3RyZWFtTWl4aW4gPSAoc3RyZWFtKSA9PiB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICBpZiAoIWlzQmxvYkluc3RhbmNlKHN0cmVhbSkgJiYgISgwLCBzdHJlYW1fdHlwZV9jaGVja18xLmlzUmVhZGFibGVTdHJlYW0pKHN0cmVhbSkpIHtcbiAgICAgICAgY29uc3QgbmFtZSA9ICgoX2IgPSAoX2EgPSBzdHJlYW0gPT09IG51bGwgfHwgc3RyZWFtID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzdHJlYW0uX19wcm90b19fKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY29uc3RydWN0b3IpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5uYW1lKSB8fCBzdHJlYW07XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5leHBlY3RlZCBzdHJlYW0gaW1wbGVtZW50YXRpb24sIGV4cGVjdCBCbG9iIG9yIFJlYWRhYmxlU3RyZWFtLCBnb3QgJHtuYW1lfWApO1xuICAgIH1cbiAgICBsZXQgdHJhbnNmb3JtZWQgPSBmYWxzZTtcbiAgICBjb25zdCB0cmFuc2Zvcm1Ub0J5dGVBcnJheSA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgaWYgKHRyYW5zZm9ybWVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoRVJSX01TR19TVFJFQU1fSEFTX0JFRU5fVFJBTlNGT1JNRUQpO1xuICAgICAgICB9XG4gICAgICAgIHRyYW5zZm9ybWVkID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIGF3YWl0ICgwLCBmZXRjaF9odHRwX2hhbmRsZXJfMS5zdHJlYW1Db2xsZWN0b3IpKHN0cmVhbSk7XG4gICAgfTtcbiAgICBjb25zdCBibG9iVG9XZWJTdHJlYW0gPSAoYmxvYikgPT4ge1xuICAgICAgICBpZiAodHlwZW9mIGJsb2Iuc3RyZWFtICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCB0cmFuc2Zvcm0gcGF5bG9hZCBCbG9iIHRvIHdlYiBzdHJlYW0uIFBsZWFzZSBtYWtlIHN1cmUgdGhlIEJsb2Iuc3RyZWFtKCkgaXMgcG9seWZpbGxlZC5cXG5cIiArXG4gICAgICAgICAgICAgICAgXCJJZiB5b3UgYXJlIHVzaW5nIFJlYWN0IE5hdGl2ZSwgdGhpcyBBUEkgaXMgbm90IHlldCBzdXBwb3J0ZWQsIHNlZTogaHR0cHM6Ly9yZWFjdC1uYXRpdmUuY2FubnkuaW8vZmVhdHVyZS1yZXF1ZXN0cy9wL2ZldGNoLXN0cmVhbWluZy1ib2R5XCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBibG9iLnN0cmVhbSgpO1xuICAgIH07XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oc3RyZWFtLCB7XG4gICAgICAgIHRyYW5zZm9ybVRvQnl0ZUFycmF5OiB0cmFuc2Zvcm1Ub0J5dGVBcnJheSxcbiAgICAgICAgdHJhbnNmb3JtVG9TdHJpbmc6IGFzeW5jIChlbmNvZGluZykgPT4ge1xuICAgICAgICAgICAgY29uc3QgYnVmID0gYXdhaXQgdHJhbnNmb3JtVG9CeXRlQXJyYXkoKTtcbiAgICAgICAgICAgIGlmIChlbmNvZGluZyA9PT0gXCJiYXNlNjRcIikge1xuICAgICAgICAgICAgICAgIHJldHVybiAoMCwgdXRpbF9iYXNlNjRfMS50b0Jhc2U2NCkoYnVmKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGVuY29kaW5nID09PSBcImhleFwiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICgwLCB1dGlsX2hleF9lbmNvZGluZ18xLnRvSGV4KShidWYpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoZW5jb2RpbmcgPT09IHVuZGVmaW5lZCB8fCBlbmNvZGluZyA9PT0gXCJ1dGY4XCIgfHwgZW5jb2RpbmcgPT09IFwidXRmLThcIikge1xuICAgICAgICAgICAgICAgIHJldHVybiAoMCwgdXRpbF91dGY4XzEudG9VdGY4KShidWYpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIFRleHREZWNvZGVyID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFRleHREZWNvZGVyKGVuY29kaW5nKS5kZWNvZGUoYnVmKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRleHREZWNvZGVyIGlzIG5vdCBhdmFpbGFibGUsIHBsZWFzZSBtYWtlIHN1cmUgcG9seWZpbGwgaXMgcHJvdmlkZWQuXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB0cmFuc2Zvcm1Ub1dlYlN0cmVhbTogKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRyYW5zZm9ybWVkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKEVSUl9NU0dfU1RSRUFNX0hBU19CRUVOX1RSQU5TRk9STUVEKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRyYW5zZm9ybWVkID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmIChpc0Jsb2JJbnN0YW5jZShzdHJlYW0pKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGJsb2JUb1dlYlN0cmVhbShzdHJlYW0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoKDAsIHN0cmVhbV90eXBlX2NoZWNrXzEuaXNSZWFkYWJsZVN0cmVhbSkoc3RyZWFtKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzdHJlYW07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCB0cmFuc2Zvcm0gcGF5bG9hZCB0byB3ZWIgc3RyZWFtLCBnb3QgJHtzdHJlYW19YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgfSk7XG59O1xuZXhwb3J0cy5zZGtTdHJlYW1NaXhpbiA9IHNka1N0cmVhbU1peGluO1xuY29uc3QgaXNCbG9iSW5zdGFuY2UgPSAoc3RyZWFtKSA9PiB0eXBlb2YgQmxvYiA9PT0gXCJmdW5jdGlvblwiICYmIHN0cmVhbSBpbnN0YW5jZW9mIEJsb2I7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJzZGtTdHJlYW1NaXhpbiIsImZldGNoX2h0dHBfaGFuZGxlcl8xIiwicmVxdWlyZSIsInV0aWxfYmFzZTY0XzEiLCJ1dGlsX2hleF9lbmNvZGluZ18xIiwidXRpbF91dGY4XzEiLCJzdHJlYW1fdHlwZV9jaGVja18xIiwiRVJSX01TR19TVFJFQU1fSEFTX0JFRU5fVFJBTlNGT1JNRUQiLCJzdHJlYW0iLCJfYSIsIl9iIiwiaXNCbG9iSW5zdGFuY2UiLCJpc1JlYWRhYmxlU3RyZWFtIiwibmFtZSIsIl9fcHJvdG9fXyIsImNvbnN0cnVjdG9yIiwiRXJyb3IiLCJ0cmFuc2Zvcm1lZCIsInRyYW5zZm9ybVRvQnl0ZUFycmF5Iiwic3RyZWFtQ29sbGVjdG9yIiwiYmxvYlRvV2ViU3RyZWFtIiwiYmxvYiIsImFzc2lnbiIsInRyYW5zZm9ybVRvU3RyaW5nIiwiZW5jb2RpbmciLCJidWYiLCJ0b0Jhc2U2NCIsInRvSGV4IiwidW5kZWZpbmVkIiwidG9VdGY4IiwiVGV4dERlY29kZXIiLCJkZWNvZGUiLCJ0cmFuc2Zvcm1Ub1dlYlN0cmVhbSIsIkJsb2IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/util-stream/dist-cjs/sdk-stream-mixin.browser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/util-stream/dist-cjs/sdk-stream-mixin.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@smithy/util-stream/dist-cjs/sdk-stream-mixin.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.sdkStreamMixin = void 0;\nconst node_http_handler_1 = __webpack_require__(/*! @smithy/node-http-handler */ \"(rsc)/./node_modules/@smithy/node-http-handler/dist-cjs/index.js\");\nconst util_buffer_from_1 = __webpack_require__(/*! @smithy/util-buffer-from */ \"(rsc)/./node_modules/@smithy/util-buffer-from/dist-cjs/index.js\");\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\nconst sdk_stream_mixin_browser_1 = __webpack_require__(/*! ./sdk-stream-mixin.browser */ \"(rsc)/./node_modules/@smithy/util-stream/dist-cjs/sdk-stream-mixin.browser.js\");\nconst ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED = \"The stream has already been transformed.\";\nconst sdkStreamMixin = (stream)=>{\n    var _a, _b;\n    if (!(stream instanceof stream_1.Readable)) {\n        try {\n            return (0, sdk_stream_mixin_browser_1.sdkStreamMixin)(stream);\n        } catch (e) {\n            const name = ((_b = (_a = stream === null || stream === void 0 ? void 0 : stream.__proto__) === null || _a === void 0 ? void 0 : _a.constructor) === null || _b === void 0 ? void 0 : _b.name) || stream;\n            throw new Error(`Unexpected stream implementation, expect Stream.Readable instance, got ${name}`);\n        }\n    }\n    let transformed = false;\n    const transformToByteArray = async ()=>{\n        if (transformed) {\n            throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);\n        }\n        transformed = true;\n        return await (0, node_http_handler_1.streamCollector)(stream);\n    };\n    return Object.assign(stream, {\n        transformToByteArray,\n        transformToString: async (encoding)=>{\n            const buf = await transformToByteArray();\n            if (encoding === undefined || Buffer.isEncoding(encoding)) {\n                return (0, util_buffer_from_1.fromArrayBuffer)(buf.buffer, buf.byteOffset, buf.byteLength).toString(encoding);\n            } else {\n                const decoder = new TextDecoder(encoding);\n                return decoder.decode(buf);\n            }\n        },\n        transformToWebStream: ()=>{\n            if (transformed) {\n                throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);\n            }\n            if (stream.readableFlowing !== null) {\n                throw new Error(\"The stream has been consumed by other callbacks.\");\n            }\n            if (typeof stream_1.Readable.toWeb !== \"function\") {\n                throw new Error(\"Readable.toWeb() is not supported. Please ensure a polyfill is available.\");\n            }\n            transformed = true;\n            return stream_1.Readable.toWeb(stream);\n        }\n    });\n};\nexports.sdkStreamMixin = sdkStreamMixin;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLXN0cmVhbS9kaXN0LWNqcy9zZGstc3RyZWFtLW1peGluLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxzQkFBc0IsR0FBRyxLQUFLO0FBQzlCLE1BQU1HLHNCQUFzQkMsbUJBQU9BLENBQUMsbUdBQTJCO0FBQy9ELE1BQU1DLHFCQUFxQkQsbUJBQU9BLENBQUMsaUdBQTBCO0FBQzdELE1BQU1FLFdBQVdGLG1CQUFPQSxDQUFDLHNCQUFRO0FBQ2pDLE1BQU1HLDZCQUE2QkgsbUJBQU9BLENBQUMsaUhBQTRCO0FBQ3ZFLE1BQU1JLHNDQUFzQztBQUM1QyxNQUFNTixpQkFBaUIsQ0FBQ087SUFDcEIsSUFBSUMsSUFBSUM7SUFDUixJQUFJLENBQUVGLENBQUFBLGtCQUFrQkgsU0FBU00sUUFBUSxHQUFHO1FBQ3hDLElBQUk7WUFDQSxPQUFPLENBQUMsR0FBR0wsMkJBQTJCTCxjQUFjLEVBQUVPO1FBQzFELEVBQ0EsT0FBT0ksR0FBRztZQUNOLE1BQU1DLE9BQU8sQ0FBQyxDQUFDSCxLQUFLLENBQUNELEtBQUtELFdBQVcsUUFBUUEsV0FBVyxLQUFLLElBQUksS0FBSyxJQUFJQSxPQUFPTSxTQUFTLE1BQU0sUUFBUUwsT0FBTyxLQUFLLElBQUksS0FBSyxJQUFJQSxHQUFHTSxXQUFXLE1BQU0sUUFBUUwsT0FBTyxLQUFLLElBQUksS0FBSyxJQUFJQSxHQUFHRyxJQUFJLEtBQUtMO1lBQ2xNLE1BQU0sSUFBSVEsTUFBTSxDQUFDLHVFQUF1RSxFQUFFSCxLQUFLLENBQUM7UUFDcEc7SUFDSjtJQUNBLElBQUlJLGNBQWM7SUFDbEIsTUFBTUMsdUJBQXVCO1FBQ3pCLElBQUlELGFBQWE7WUFDYixNQUFNLElBQUlELE1BQU1UO1FBQ3BCO1FBQ0FVLGNBQWM7UUFDZCxPQUFPLE1BQU0sQ0FBQyxHQUFHZixvQkFBb0JpQixlQUFlLEVBQUVYO0lBQzFEO0lBQ0EsT0FBT1gsT0FBT3VCLE1BQU0sQ0FBQ1osUUFBUTtRQUN6QlU7UUFDQUcsbUJBQW1CLE9BQU9DO1lBQ3RCLE1BQU1DLE1BQU0sTUFBTUw7WUFDbEIsSUFBSUksYUFBYUUsYUFBYUMsT0FBT0MsVUFBVSxDQUFDSixXQUFXO2dCQUN2RCxPQUFPLENBQUMsR0FBR2xCLG1CQUFtQnVCLGVBQWUsRUFBRUosSUFBSUssTUFBTSxFQUFFTCxJQUFJTSxVQUFVLEVBQUVOLElBQUlPLFVBQVUsRUFBRUMsUUFBUSxDQUFDVDtZQUN4RyxPQUNLO2dCQUNELE1BQU1VLFVBQVUsSUFBSUMsWUFBWVg7Z0JBQ2hDLE9BQU9VLFFBQVFFLE1BQU0sQ0FBQ1g7WUFDMUI7UUFDSjtRQUNBWSxzQkFBc0I7WUFDbEIsSUFBSWxCLGFBQWE7Z0JBQ2IsTUFBTSxJQUFJRCxNQUFNVDtZQUNwQjtZQUNBLElBQUlDLE9BQU80QixlQUFlLEtBQUssTUFBTTtnQkFDakMsTUFBTSxJQUFJcEIsTUFBTTtZQUNwQjtZQUNBLElBQUksT0FBT1gsU0FBU00sUUFBUSxDQUFDMEIsS0FBSyxLQUFLLFlBQVk7Z0JBQy9DLE1BQU0sSUFBSXJCLE1BQU07WUFDcEI7WUFDQUMsY0FBYztZQUNkLE9BQU9aLFNBQVNNLFFBQVEsQ0FBQzBCLEtBQUssQ0FBQzdCO1FBQ25DO0lBQ0o7QUFDSjtBQUNBVCxzQkFBc0IsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbG91ZHNoaWZ0Ly4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvdXRpbC1zdHJlYW0vZGlzdC1janMvc2RrLXN0cmVhbS1taXhpbi5qcz80YjFiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zZGtTdHJlYW1NaXhpbiA9IHZvaWQgMDtcbmNvbnN0IG5vZGVfaHR0cF9oYW5kbGVyXzEgPSByZXF1aXJlKFwiQHNtaXRoeS9ub2RlLWh0dHAtaGFuZGxlclwiKTtcbmNvbnN0IHV0aWxfYnVmZmVyX2Zyb21fMSA9IHJlcXVpcmUoXCJAc21pdGh5L3V0aWwtYnVmZmVyLWZyb21cIik7XG5jb25zdCBzdHJlYW1fMSA9IHJlcXVpcmUoXCJzdHJlYW1cIik7XG5jb25zdCBzZGtfc3RyZWFtX21peGluX2Jyb3dzZXJfMSA9IHJlcXVpcmUoXCIuL3Nkay1zdHJlYW0tbWl4aW4uYnJvd3NlclwiKTtcbmNvbnN0IEVSUl9NU0dfU1RSRUFNX0hBU19CRUVOX1RSQU5TRk9STUVEID0gXCJUaGUgc3RyZWFtIGhhcyBhbHJlYWR5IGJlZW4gdHJhbnNmb3JtZWQuXCI7XG5jb25zdCBzZGtTdHJlYW1NaXhpbiA9IChzdHJlYW0pID0+IHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIGlmICghKHN0cmVhbSBpbnN0YW5jZW9mIHN0cmVhbV8xLlJlYWRhYmxlKSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuICgwLCBzZGtfc3RyZWFtX21peGluX2Jyb3dzZXJfMS5zZGtTdHJlYW1NaXhpbikoc3RyZWFtKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgY29uc3QgbmFtZSA9ICgoX2IgPSAoX2EgPSBzdHJlYW0gPT09IG51bGwgfHwgc3RyZWFtID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzdHJlYW0uX19wcm90b19fKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY29uc3RydWN0b3IpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5uYW1lKSB8fCBzdHJlYW07XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuZXhwZWN0ZWQgc3RyZWFtIGltcGxlbWVudGF0aW9uLCBleHBlY3QgU3RyZWFtLlJlYWRhYmxlIGluc3RhbmNlLCBnb3QgJHtuYW1lfWApO1xuICAgICAgICB9XG4gICAgfVxuICAgIGxldCB0cmFuc2Zvcm1lZCA9IGZhbHNlO1xuICAgIGNvbnN0IHRyYW5zZm9ybVRvQnl0ZUFycmF5ID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICBpZiAodHJhbnNmb3JtZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihFUlJfTVNHX1NUUkVBTV9IQVNfQkVFTl9UUkFOU0ZPUk1FRCk7XG4gICAgICAgIH1cbiAgICAgICAgdHJhbnNmb3JtZWQgPSB0cnVlO1xuICAgICAgICByZXR1cm4gYXdhaXQgKDAsIG5vZGVfaHR0cF9oYW5kbGVyXzEuc3RyZWFtQ29sbGVjdG9yKShzdHJlYW0pO1xuICAgIH07XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oc3RyZWFtLCB7XG4gICAgICAgIHRyYW5zZm9ybVRvQnl0ZUFycmF5LFxuICAgICAgICB0cmFuc2Zvcm1Ub1N0cmluZzogYXN5bmMgKGVuY29kaW5nKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBidWYgPSBhd2FpdCB0cmFuc2Zvcm1Ub0J5dGVBcnJheSgpO1xuICAgICAgICAgICAgaWYgKGVuY29kaW5nID09PSB1bmRlZmluZWQgfHwgQnVmZmVyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICgwLCB1dGlsX2J1ZmZlcl9mcm9tXzEuZnJvbUFycmF5QnVmZmVyKShidWYuYnVmZmVyLCBidWYuYnl0ZU9mZnNldCwgYnVmLmJ5dGVMZW5ndGgpLnRvU3RyaW5nKGVuY29kaW5nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRlY29kZXIgPSBuZXcgVGV4dERlY29kZXIoZW5jb2RpbmcpO1xuICAgICAgICAgICAgICAgIHJldHVybiBkZWNvZGVyLmRlY29kZShidWYpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB0cmFuc2Zvcm1Ub1dlYlN0cmVhbTogKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRyYW5zZm9ybWVkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKEVSUl9NU0dfU1RSRUFNX0hBU19CRUVOX1RSQU5TRk9STUVEKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzdHJlYW0ucmVhZGFibGVGbG93aW5nICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlIHN0cmVhbSBoYXMgYmVlbiBjb25zdW1lZCBieSBvdGhlciBjYWxsYmFja3MuXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBzdHJlYW1fMS5SZWFkYWJsZS50b1dlYiAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUmVhZGFibGUudG9XZWIoKSBpcyBub3Qgc3VwcG9ydGVkLiBQbGVhc2UgZW5zdXJlIGEgcG9seWZpbGwgaXMgYXZhaWxhYmxlLlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRyYW5zZm9ybWVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHJldHVybiBzdHJlYW1fMS5SZWFkYWJsZS50b1dlYihzdHJlYW0pO1xuICAgICAgICB9LFxuICAgIH0pO1xufTtcbmV4cG9ydHMuc2RrU3RyZWFtTWl4aW4gPSBzZGtTdHJlYW1NaXhpbjtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInNka1N0cmVhbU1peGluIiwibm9kZV9odHRwX2hhbmRsZXJfMSIsInJlcXVpcmUiLCJ1dGlsX2J1ZmZlcl9mcm9tXzEiLCJzdHJlYW1fMSIsInNka19zdHJlYW1fbWl4aW5fYnJvd3Nlcl8xIiwiRVJSX01TR19TVFJFQU1fSEFTX0JFRU5fVFJBTlNGT1JNRUQiLCJzdHJlYW0iLCJfYSIsIl9iIiwiUmVhZGFibGUiLCJlIiwibmFtZSIsIl9fcHJvdG9fXyIsImNvbnN0cnVjdG9yIiwiRXJyb3IiLCJ0cmFuc2Zvcm1lZCIsInRyYW5zZm9ybVRvQnl0ZUFycmF5Iiwic3RyZWFtQ29sbGVjdG9yIiwiYXNzaWduIiwidHJhbnNmb3JtVG9TdHJpbmciLCJlbmNvZGluZyIsImJ1ZiIsInVuZGVmaW5lZCIsIkJ1ZmZlciIsImlzRW5jb2RpbmciLCJmcm9tQXJyYXlCdWZmZXIiLCJidWZmZXIiLCJieXRlT2Zmc2V0IiwiYnl0ZUxlbmd0aCIsInRvU3RyaW5nIiwiZGVjb2RlciIsIlRleHREZWNvZGVyIiwiZGVjb2RlIiwidHJhbnNmb3JtVG9XZWJTdHJlYW0iLCJyZWFkYWJsZUZsb3dpbmciLCJ0b1dlYiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/util-stream/dist-cjs/sdk-stream-mixin.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/util-stream/dist-cjs/splitStream.browser.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@smithy/util-stream/dist-cjs/splitStream.browser.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.splitStream = void 0;\nasync function splitStream(stream) {\n    if (typeof stream.stream === \"function\") {\n        stream = stream.stream();\n    }\n    const readableStream = stream;\n    return readableStream.tee();\n}\nexports.splitStream = splitStream;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLXN0cmVhbS9kaXN0LWNqcy9zcGxpdFN0cmVhbS5icm93c2VyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxtQkFBbUIsR0FBRyxLQUFLO0FBQzNCLGVBQWVFLFlBQVlDLE1BQU07SUFDN0IsSUFBSSxPQUFPQSxPQUFPQSxNQUFNLEtBQUssWUFBWTtRQUNyQ0EsU0FBU0EsT0FBT0EsTUFBTTtJQUMxQjtJQUNBLE1BQU1DLGlCQUFpQkQ7SUFDdkIsT0FBT0MsZUFBZUMsR0FBRztBQUM3QjtBQUNBTCxtQkFBbUIsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbG91ZHNoaWZ0Ly4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvdXRpbC1zdHJlYW0vZGlzdC1janMvc3BsaXRTdHJlYW0uYnJvd3Nlci5qcz81NThhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zcGxpdFN0cmVhbSA9IHZvaWQgMDtcbmFzeW5jIGZ1bmN0aW9uIHNwbGl0U3RyZWFtKHN0cmVhbSkge1xuICAgIGlmICh0eXBlb2Ygc3RyZWFtLnN0cmVhbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHN0cmVhbSA9IHN0cmVhbS5zdHJlYW0oKTtcbiAgICB9XG4gICAgY29uc3QgcmVhZGFibGVTdHJlYW0gPSBzdHJlYW07XG4gICAgcmV0dXJuIHJlYWRhYmxlU3RyZWFtLnRlZSgpO1xufVxuZXhwb3J0cy5zcGxpdFN0cmVhbSA9IHNwbGl0U3RyZWFtO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwic3BsaXRTdHJlYW0iLCJzdHJlYW0iLCJyZWFkYWJsZVN0cmVhbSIsInRlZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/util-stream/dist-cjs/splitStream.browser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/util-stream/dist-cjs/splitStream.js":
/*!******************************************************************!*\
  !*** ./node_modules/@smithy/util-stream/dist-cjs/splitStream.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.splitStream = void 0;\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\nconst splitStream_browser_1 = __webpack_require__(/*! ./splitStream.browser */ \"(rsc)/./node_modules/@smithy/util-stream/dist-cjs/splitStream.browser.js\");\nconst stream_type_check_1 = __webpack_require__(/*! ./stream-type-check */ \"(rsc)/./node_modules/@smithy/util-stream/dist-cjs/stream-type-check.js\");\nasync function splitStream(stream) {\n    if ((0, stream_type_check_1.isReadableStream)(stream) || (0, stream_type_check_1.isBlob)(stream)) {\n        return (0, splitStream_browser_1.splitStream)(stream);\n    }\n    const stream1 = new stream_1.PassThrough();\n    const stream2 = new stream_1.PassThrough();\n    stream.pipe(stream1);\n    stream.pipe(stream2);\n    return [\n        stream1,\n        stream2\n    ];\n}\nexports.splitStream = splitStream;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLXN0cmVhbS9kaXN0LWNqcy9zcGxpdFN0cmVhbS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsbUJBQW1CLEdBQUcsS0FBSztBQUMzQixNQUFNRyxXQUFXQyxtQkFBT0EsQ0FBQyxzQkFBUTtBQUNqQyxNQUFNQyx3QkFBd0JELG1CQUFPQSxDQUFDLHVHQUF1QjtBQUM3RCxNQUFNRSxzQkFBc0JGLG1CQUFPQSxDQUFDLG1HQUFxQjtBQUN6RCxlQUFlRixZQUFZSyxNQUFNO0lBQzdCLElBQUksQ0FBQyxHQUFHRCxvQkFBb0JFLGdCQUFnQixFQUFFRCxXQUFXLENBQUMsR0FBR0Qsb0JBQW9CRyxNQUFNLEVBQUVGLFNBQVM7UUFDOUYsT0FBTyxDQUFDLEdBQUdGLHNCQUFzQkgsV0FBVyxFQUFFSztJQUNsRDtJQUNBLE1BQU1HLFVBQVUsSUFBSVAsU0FBU1EsV0FBVztJQUN4QyxNQUFNQyxVQUFVLElBQUlULFNBQVNRLFdBQVc7SUFDeENKLE9BQU9NLElBQUksQ0FBQ0g7SUFDWkgsT0FBT00sSUFBSSxDQUFDRDtJQUNaLE9BQU87UUFBQ0Y7UUFBU0U7S0FBUTtBQUM3QjtBQUNBWixtQkFBbUIsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbG91ZHNoaWZ0Ly4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvdXRpbC1zdHJlYW0vZGlzdC1janMvc3BsaXRTdHJlYW0uanM/ZGYzYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc3BsaXRTdHJlYW0gPSB2b2lkIDA7XG5jb25zdCBzdHJlYW1fMSA9IHJlcXVpcmUoXCJzdHJlYW1cIik7XG5jb25zdCBzcGxpdFN0cmVhbV9icm93c2VyXzEgPSByZXF1aXJlKFwiLi9zcGxpdFN0cmVhbS5icm93c2VyXCIpO1xuY29uc3Qgc3RyZWFtX3R5cGVfY2hlY2tfMSA9IHJlcXVpcmUoXCIuL3N0cmVhbS10eXBlLWNoZWNrXCIpO1xuYXN5bmMgZnVuY3Rpb24gc3BsaXRTdHJlYW0oc3RyZWFtKSB7XG4gICAgaWYgKCgwLCBzdHJlYW1fdHlwZV9jaGVja18xLmlzUmVhZGFibGVTdHJlYW0pKHN0cmVhbSkgfHwgKDAsIHN0cmVhbV90eXBlX2NoZWNrXzEuaXNCbG9iKShzdHJlYW0pKSB7XG4gICAgICAgIHJldHVybiAoMCwgc3BsaXRTdHJlYW1fYnJvd3Nlcl8xLnNwbGl0U3RyZWFtKShzdHJlYW0pO1xuICAgIH1cbiAgICBjb25zdCBzdHJlYW0xID0gbmV3IHN0cmVhbV8xLlBhc3NUaHJvdWdoKCk7XG4gICAgY29uc3Qgc3RyZWFtMiA9IG5ldyBzdHJlYW1fMS5QYXNzVGhyb3VnaCgpO1xuICAgIHN0cmVhbS5waXBlKHN0cmVhbTEpO1xuICAgIHN0cmVhbS5waXBlKHN0cmVhbTIpO1xuICAgIHJldHVybiBbc3RyZWFtMSwgc3RyZWFtMl07XG59XG5leHBvcnRzLnNwbGl0U3RyZWFtID0gc3BsaXRTdHJlYW07XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJzcGxpdFN0cmVhbSIsInN0cmVhbV8xIiwicmVxdWlyZSIsInNwbGl0U3RyZWFtX2Jyb3dzZXJfMSIsInN0cmVhbV90eXBlX2NoZWNrXzEiLCJzdHJlYW0iLCJpc1JlYWRhYmxlU3RyZWFtIiwiaXNCbG9iIiwic3RyZWFtMSIsIlBhc3NUaHJvdWdoIiwic3RyZWFtMiIsInBpcGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/util-stream/dist-cjs/splitStream.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/util-stream/dist-cjs/stream-type-check.js":
/*!************************************************************************!*\
  !*** ./node_modules/@smithy/util-stream/dist-cjs/stream-type-check.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.isBlob = exports.isReadableStream = void 0;\nconst isReadableStream = (stream)=>{\n    var _a;\n    return typeof ReadableStream === \"function\" && (((_a = stream === null || stream === void 0 ? void 0 : stream.constructor) === null || _a === void 0 ? void 0 : _a.name) === ReadableStream.name || stream instanceof ReadableStream);\n};\nexports.isReadableStream = isReadableStream;\nconst isBlob = (blob)=>{\n    var _a;\n    return typeof Blob === \"function\" && (((_a = blob === null || blob === void 0 ? void 0 : blob.constructor) === null || _a === void 0 ? void 0 : _a.name) === Blob.name || blob instanceof Blob);\n};\nexports.isBlob = isBlob;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLXN0cmVhbS9kaXN0LWNqcy9zdHJlYW0tdHlwZS1jaGVjay5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsY0FBYyxHQUFHQSx3QkFBd0IsR0FBRyxLQUFLO0FBQ2pELE1BQU1HLG1CQUFtQixDQUFDQztJQUN0QixJQUFJQztJQUNKLE9BQU8sT0FBT0MsbUJBQW1CLGNBQzVCLEVBQUMsQ0FBQ0QsS0FBS0QsV0FBVyxRQUFRQSxXQUFXLEtBQUssSUFBSSxLQUFLLElBQUlBLE9BQU9HLFdBQVcsTUFBTSxRQUFRRixPQUFPLEtBQUssSUFBSSxLQUFLLElBQUlBLEdBQUdHLElBQUksTUFBTUYsZUFBZUUsSUFBSSxJQUFJSixrQkFBa0JFLGNBQWE7QUFDNUw7QUFDQU4sd0JBQXdCLEdBQUdHO0FBQzNCLE1BQU1ELFNBQVMsQ0FBQ087SUFDWixJQUFJSjtJQUNKLE9BQU8sT0FBT0ssU0FBUyxjQUFlLEVBQUMsQ0FBQ0wsS0FBS0ksU0FBUyxRQUFRQSxTQUFTLEtBQUssSUFBSSxLQUFLLElBQUlBLEtBQUtGLFdBQVcsTUFBTSxRQUFRRixPQUFPLEtBQUssSUFBSSxLQUFLLElBQUlBLEdBQUdHLElBQUksTUFBTUUsS0FBS0YsSUFBSSxJQUFJQyxnQkFBZ0JDLElBQUc7QUFDak07QUFDQVYsY0FBYyxHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL2Nsb3Vkc2hpZnQvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLXN0cmVhbS9kaXN0LWNqcy9zdHJlYW0tdHlwZS1jaGVjay5qcz9kMjMxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5pc0Jsb2IgPSBleHBvcnRzLmlzUmVhZGFibGVTdHJlYW0gPSB2b2lkIDA7XG5jb25zdCBpc1JlYWRhYmxlU3RyZWFtID0gKHN0cmVhbSkgPT4ge1xuICAgIHZhciBfYTtcbiAgICByZXR1cm4gdHlwZW9mIFJlYWRhYmxlU3RyZWFtID09PSBcImZ1bmN0aW9uXCIgJiZcbiAgICAgICAgKCgoX2EgPSBzdHJlYW0gPT09IG51bGwgfHwgc3RyZWFtID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzdHJlYW0uY29uc3RydWN0b3IpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5uYW1lKSA9PT0gUmVhZGFibGVTdHJlYW0ubmFtZSB8fCBzdHJlYW0gaW5zdGFuY2VvZiBSZWFkYWJsZVN0cmVhbSk7XG59O1xuZXhwb3J0cy5pc1JlYWRhYmxlU3RyZWFtID0gaXNSZWFkYWJsZVN0cmVhbTtcbmNvbnN0IGlzQmxvYiA9IChibG9iKSA9PiB7XG4gICAgdmFyIF9hO1xuICAgIHJldHVybiB0eXBlb2YgQmxvYiA9PT0gXCJmdW5jdGlvblwiICYmICgoKF9hID0gYmxvYiA9PT0gbnVsbCB8fCBibG9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBibG9iLmNvbnN0cnVjdG9yKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubmFtZSkgPT09IEJsb2IubmFtZSB8fCBibG9iIGluc3RhbmNlb2YgQmxvYik7XG59O1xuZXhwb3J0cy5pc0Jsb2IgPSBpc0Jsb2I7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJpc0Jsb2IiLCJpc1JlYWRhYmxlU3RyZWFtIiwic3RyZWFtIiwiX2EiLCJSZWFkYWJsZVN0cmVhbSIsImNvbnN0cnVjdG9yIiwibmFtZSIsImJsb2IiLCJCbG9iIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/util-stream/dist-cjs/stream-type-check.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/util-uri-escape/dist-cjs/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@smithy/util-uri-escape/dist-cjs/index.js ***!
  \****************************************************************/
/***/ ((module) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value)=>__defProp(target, \"name\", {\n        value,\n        configurable: true\n    });\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n    escapeUri: ()=>escapeUri,\n    escapeUriPath: ()=>escapeUriPath\n});\nmodule.exports = __toCommonJS(src_exports);\n// src/escape-uri.ts\nvar escapeUri = /* @__PURE__ */ __name((uri)=>// AWS percent-encodes some extra non-standard characters in a URI\n    encodeURIComponent(uri).replace(/[!'()*]/g, hexEncode), \"escapeUri\");\nvar hexEncode = /* @__PURE__ */ __name((c)=>`%${c.charCodeAt(0).toString(16).toUpperCase()}`, \"hexEncode\");\n// src/escape-uri-path.ts\nvar escapeUriPath = /* @__PURE__ */ __name((uri)=>uri.split(\"/\").map(escapeUri).join(\"/\"), \"escapeUriPath\");\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLXVyaS1lc2NhcGUvZGlzdC1janMvaW5kZXguanMiLCJtYXBwaW5ncyI6IjtBQUFBLElBQUlBLFlBQVlDLE9BQU9DLGNBQWM7QUFDckMsSUFBSUMsbUJBQW1CRixPQUFPRyx3QkFBd0I7QUFDdEQsSUFBSUMsb0JBQW9CSixPQUFPSyxtQkFBbUI7QUFDbEQsSUFBSUMsZUFBZU4sT0FBT08sU0FBUyxDQUFDQyxjQUFjO0FBQ2xELElBQUlDLFNBQVMsQ0FBQ0MsUUFBUUMsUUFBVVosVUFBVVcsUUFBUSxRQUFRO1FBQUVDO1FBQU9DLGNBQWM7SUFBSztBQUN0RixJQUFJQyxXQUFXLENBQUNILFFBQVFJO0lBQ3RCLElBQUssSUFBSUMsUUFBUUQsSUFDZmYsVUFBVVcsUUFBUUssTUFBTTtRQUFFQyxLQUFLRixHQUFHLENBQUNDLEtBQUs7UUFBRUUsWUFBWTtJQUFLO0FBQy9EO0FBQ0EsSUFBSUMsY0FBYyxDQUFDQyxJQUFJQyxNQUFNQyxRQUFRQztJQUNuQyxJQUFJRixRQUFRLE9BQU9BLFNBQVMsWUFBWSxPQUFPQSxTQUFTLFlBQVk7UUFDbEUsS0FBSyxJQUFJRyxPQUFPbkIsa0JBQWtCZ0IsTUFDaEMsSUFBSSxDQUFDZCxhQUFha0IsSUFBSSxDQUFDTCxJQUFJSSxRQUFRQSxRQUFRRixRQUN6Q3RCLFVBQVVvQixJQUFJSSxLQUFLO1lBQUVQLEtBQUssSUFBTUksSUFBSSxDQUFDRyxJQUFJO1lBQUVOLFlBQVksQ0FBRUssQ0FBQUEsT0FBT3BCLGlCQUFpQmtCLE1BQU1HLElBQUcsS0FBTUQsS0FBS0wsVUFBVTtRQUFDO0lBQ3RIO0lBQ0EsT0FBT0U7QUFDVDtBQUNBLElBQUlNLGVBQWUsQ0FBQ0MsTUFBUVIsWUFBWW5CLFVBQVUsQ0FBQyxHQUFHLGNBQWM7UUFBRVksT0FBTztJQUFLLElBQUllO0FBRXRGLGVBQWU7QUFDZixJQUFJQyxjQUFjLENBQUM7QUFDbkJkLFNBQVNjLGFBQWE7SUFDcEJDLFdBQVcsSUFBTUE7SUFDakJDLGVBQWUsSUFBTUE7QUFDdkI7QUFDQUMsT0FBT0MsT0FBTyxHQUFHTixhQUFhRTtBQUU5QixvQkFBb0I7QUFDcEIsSUFBSUMsWUFBWSxhQUFhLEdBQUduQixPQUFPLENBQUN1QixNQUN0QyxrRUFBa0U7SUFDbEVDLG1CQUFtQkQsS0FBS0UsT0FBTyxDQUFDLFlBQVlDLFlBQzNDO0FBQ0gsSUFBSUEsWUFBWSxhQUFhLEdBQUcxQixPQUFPLENBQUMyQixJQUFNLENBQUMsQ0FBQyxFQUFFQSxFQUFFQyxVQUFVLENBQUMsR0FBR0MsUUFBUSxDQUFDLElBQUlDLFdBQVcsR0FBRyxDQUFDLEVBQUU7QUFFaEcseUJBQXlCO0FBQ3pCLElBQUlWLGdCQUFnQixhQUFhLEdBQUdwQixPQUFPLENBQUN1QixNQUFRQSxJQUFJUSxLQUFLLENBQUMsS0FBS0MsR0FBRyxDQUFDYixXQUFXYyxJQUFJLENBQUMsTUFBTTtBQUM3Riw2REFBNkQ7QUFFN0QsS0FBTVosQ0FBQUEsQ0FHTiIsInNvdXJjZXMiOlsid2VicGFjazovL2Nsb3Vkc2hpZnQvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLXVyaS1lc2NhcGUvZGlzdC1janMvaW5kZXguanM/ZDU2ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX25hbWUgPSAodGFyZ2V0LCB2YWx1ZSkgPT4gX19kZWZQcm9wKHRhcmdldCwgXCJuYW1lXCIsIHsgdmFsdWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9KTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xuXG4vLyBzcmMvaW5kZXgudHNcbnZhciBzcmNfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQoc3JjX2V4cG9ydHMsIHtcbiAgZXNjYXBlVXJpOiAoKSA9PiBlc2NhcGVVcmksXG4gIGVzY2FwZVVyaVBhdGg6ICgpID0+IGVzY2FwZVVyaVBhdGhcbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMoc3JjX2V4cG9ydHMpO1xuXG4vLyBzcmMvZXNjYXBlLXVyaS50c1xudmFyIGVzY2FwZVVyaSA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKHVyaSkgPT4gKFxuICAvLyBBV1MgcGVyY2VudC1lbmNvZGVzIHNvbWUgZXh0cmEgbm9uLXN0YW5kYXJkIGNoYXJhY3RlcnMgaW4gYSBVUklcbiAgZW5jb2RlVVJJQ29tcG9uZW50KHVyaSkucmVwbGFjZSgvWyEnKCkqXS9nLCBoZXhFbmNvZGUpXG4pLCBcImVzY2FwZVVyaVwiKTtcbnZhciBoZXhFbmNvZGUgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChjKSA9PiBgJSR7Yy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpfWAsIFwiaGV4RW5jb2RlXCIpO1xuXG4vLyBzcmMvZXNjYXBlLXVyaS1wYXRoLnRzXG52YXIgZXNjYXBlVXJpUGF0aCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKHVyaSkgPT4gdXJpLnNwbGl0KFwiL1wiKS5tYXAoZXNjYXBlVXJpKS5qb2luKFwiL1wiKSwgXCJlc2NhcGVVcmlQYXRoXCIpO1xuLy8gQW5ub3RhdGUgdGhlIENvbW1vbkpTIGV4cG9ydCBuYW1lcyBmb3IgRVNNIGltcG9ydCBpbiBub2RlOlxuXG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgZXNjYXBlVXJpLFxuICBlc2NhcGVVcmlQYXRoXG59KTtcblxuIl0sIm5hbWVzIjpbIl9fZGVmUHJvcCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiX19nZXRPd25Qcm9wRGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9fZ2V0T3duUHJvcE5hbWVzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIl9faGFzT3duUHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiX19uYW1lIiwidGFyZ2V0IiwidmFsdWUiLCJjb25maWd1cmFibGUiLCJfX2V4cG9ydCIsImFsbCIsIm5hbWUiLCJnZXQiLCJlbnVtZXJhYmxlIiwiX19jb3B5UHJvcHMiLCJ0byIsImZyb20iLCJleGNlcHQiLCJkZXNjIiwia2V5IiwiY2FsbCIsIl9fdG9Db21tb25KUyIsIm1vZCIsInNyY19leHBvcnRzIiwiZXNjYXBlVXJpIiwiZXNjYXBlVXJpUGF0aCIsIm1vZHVsZSIsImV4cG9ydHMiLCJ1cmkiLCJlbmNvZGVVUklDb21wb25lbnQiLCJyZXBsYWNlIiwiaGV4RW5jb2RlIiwiYyIsImNoYXJDb2RlQXQiLCJ0b1N0cmluZyIsInRvVXBwZXJDYXNlIiwic3BsaXQiLCJtYXAiLCJqb2luIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/util-uri-escape/dist-cjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/util-utf8/dist-cjs/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@smithy/util-utf8/dist-cjs/index.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value)=>__defProp(target, \"name\", {\n        value,\n        configurable: true\n    });\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n    fromUtf8: ()=>fromUtf8,\n    toUint8Array: ()=>toUint8Array,\n    toUtf8: ()=>toUtf8\n});\nmodule.exports = __toCommonJS(src_exports);\n// src/fromUtf8.ts\nvar import_util_buffer_from = __webpack_require__(/*! @smithy/util-buffer-from */ \"(rsc)/./node_modules/@smithy/util-buffer-from/dist-cjs/index.js\");\nvar fromUtf8 = /* @__PURE__ */ __name((input)=>{\n    const buf = (0, import_util_buffer_from.fromString)(input, \"utf8\");\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength / Uint8Array.BYTES_PER_ELEMENT);\n}, \"fromUtf8\");\n// src/toUint8Array.ts\nvar toUint8Array = /* @__PURE__ */ __name((data)=>{\n    if (typeof data === \"string\") {\n        return fromUtf8(data);\n    }\n    if (ArrayBuffer.isView(data)) {\n        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);\n    }\n    return new Uint8Array(data);\n}, \"toUint8Array\");\n// src/toUtf8.ts\nvar toUtf8 = /* @__PURE__ */ __name((input)=>{\n    if (typeof input === \"string\") {\n        return input;\n    }\n    if (typeof input !== \"object\" || typeof input.byteOffset !== \"number\" || typeof input.byteLength !== \"number\") {\n        throw new Error(\"@smithy/util-utf8: toUtf8 encoder function only accepts string | Uint8Array.\");\n    }\n    return (0, import_util_buffer_from.fromArrayBuffer)(input.buffer, input.byteOffset, input.byteLength).toString(\"utf8\");\n}, \"toUtf8\");\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLXV0ZjgvZGlzdC1janMvaW5kZXguanMiLCJtYXBwaW5ncyI6IjtBQUFBLElBQUlBLFlBQVlDLE9BQU9DLGNBQWM7QUFDckMsSUFBSUMsbUJBQW1CRixPQUFPRyx3QkFBd0I7QUFDdEQsSUFBSUMsb0JBQW9CSixPQUFPSyxtQkFBbUI7QUFDbEQsSUFBSUMsZUFBZU4sT0FBT08sU0FBUyxDQUFDQyxjQUFjO0FBQ2xELElBQUlDLFNBQVMsQ0FBQ0MsUUFBUUMsUUFBVVosVUFBVVcsUUFBUSxRQUFRO1FBQUVDO1FBQU9DLGNBQWM7SUFBSztBQUN0RixJQUFJQyxXQUFXLENBQUNILFFBQVFJO0lBQ3RCLElBQUssSUFBSUMsUUFBUUQsSUFDZmYsVUFBVVcsUUFBUUssTUFBTTtRQUFFQyxLQUFLRixHQUFHLENBQUNDLEtBQUs7UUFBRUUsWUFBWTtJQUFLO0FBQy9EO0FBQ0EsSUFBSUMsY0FBYyxDQUFDQyxJQUFJQyxNQUFNQyxRQUFRQztJQUNuQyxJQUFJRixRQUFRLE9BQU9BLFNBQVMsWUFBWSxPQUFPQSxTQUFTLFlBQVk7UUFDbEUsS0FBSyxJQUFJRyxPQUFPbkIsa0JBQWtCZ0IsTUFDaEMsSUFBSSxDQUFDZCxhQUFha0IsSUFBSSxDQUFDTCxJQUFJSSxRQUFRQSxRQUFRRixRQUN6Q3RCLFVBQVVvQixJQUFJSSxLQUFLO1lBQUVQLEtBQUssSUFBTUksSUFBSSxDQUFDRyxJQUFJO1lBQUVOLFlBQVksQ0FBRUssQ0FBQUEsT0FBT3BCLGlCQUFpQmtCLE1BQU1HLElBQUcsS0FBTUQsS0FBS0wsVUFBVTtRQUFDO0lBQ3RIO0lBQ0EsT0FBT0U7QUFDVDtBQUNBLElBQUlNLGVBQWUsQ0FBQ0MsTUFBUVIsWUFBWW5CLFVBQVUsQ0FBQyxHQUFHLGNBQWM7UUFBRVksT0FBTztJQUFLLElBQUllO0FBRXRGLGVBQWU7QUFDZixJQUFJQyxjQUFjLENBQUM7QUFDbkJkLFNBQVNjLGFBQWE7SUFDcEJDLFVBQVUsSUFBTUE7SUFDaEJDLGNBQWMsSUFBTUE7SUFDcEJDLFFBQVEsSUFBTUE7QUFDaEI7QUFDQUMsT0FBT0MsT0FBTyxHQUFHUCxhQUFhRTtBQUU5QixrQkFBa0I7QUFDbEIsSUFBSU0sMEJBQTBCQyxtQkFBT0EsQ0FBQyxpR0FBMEI7QUFDaEUsSUFBSU4sV0FBVyxhQUFhLEdBQUduQixPQUFPLENBQUMwQjtJQUNyQyxNQUFNQyxNQUFNLENBQUMsR0FBR0gsd0JBQXdCSSxVQUFVLEVBQUVGLE9BQU87SUFDM0QsT0FBTyxJQUFJRyxXQUFXRixJQUFJRyxNQUFNLEVBQUVILElBQUlJLFVBQVUsRUFBRUosSUFBSUssVUFBVSxHQUFHSCxXQUFXSSxpQkFBaUI7QUFDakcsR0FBRztBQUVILHNCQUFzQjtBQUN0QixJQUFJYixlQUFlLGFBQWEsR0FBR3BCLE9BQU8sQ0FBQ2tDO0lBQ3pDLElBQUksT0FBT0EsU0FBUyxVQUFVO1FBQzVCLE9BQU9mLFNBQVNlO0lBQ2xCO0lBQ0EsSUFBSUMsWUFBWUMsTUFBTSxDQUFDRixPQUFPO1FBQzVCLE9BQU8sSUFBSUwsV0FBV0ssS0FBS0osTUFBTSxFQUFFSSxLQUFLSCxVQUFVLEVBQUVHLEtBQUtGLFVBQVUsR0FBR0gsV0FBV0ksaUJBQWlCO0lBQ3BHO0lBQ0EsT0FBTyxJQUFJSixXQUFXSztBQUN4QixHQUFHO0FBRUgsZ0JBQWdCO0FBRWhCLElBQUliLFNBQVMsYUFBYSxHQUFHckIsT0FBTyxDQUFDMEI7SUFDbkMsSUFBSSxPQUFPQSxVQUFVLFVBQVU7UUFDN0IsT0FBT0E7SUFDVDtJQUNBLElBQUksT0FBT0EsVUFBVSxZQUFZLE9BQU9BLE1BQU1LLFVBQVUsS0FBSyxZQUFZLE9BQU9MLE1BQU1NLFVBQVUsS0FBSyxVQUFVO1FBQzdHLE1BQU0sSUFBSUssTUFBTTtJQUNsQjtJQUNBLE9BQU8sQ0FBQyxHQUFHYix3QkFBd0JjLGVBQWUsRUFBRVosTUFBTUksTUFBTSxFQUFFSixNQUFNSyxVQUFVLEVBQUVMLE1BQU1NLFVBQVUsRUFBRU8sUUFBUSxDQUFDO0FBQ2pILEdBQUc7QUFDSCw2REFBNkQ7QUFFN0QsS0FBTWpCLENBQUFBLENBSU4iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbG91ZHNoaWZ0Ly4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvdXRpbC11dGY4L2Rpc3QtY2pzL2luZGV4LmpzPzFlNDYiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19uYW1lID0gKHRhcmdldCwgdmFsdWUpID0+IF9fZGVmUHJvcCh0YXJnZXQsIFwibmFtZVwiLCB7IHZhbHVlLCBjb25maWd1cmFibGU6IHRydWUgfSk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcblxuLy8gc3JjL2luZGV4LnRzXG52YXIgc3JjX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KHNyY19leHBvcnRzLCB7XG4gIGZyb21VdGY4OiAoKSA9PiBmcm9tVXRmOCxcbiAgdG9VaW50OEFycmF5OiAoKSA9PiB0b1VpbnQ4QXJyYXksXG4gIHRvVXRmODogKCkgPT4gdG9VdGY4XG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKHNyY19leHBvcnRzKTtcblxuLy8gc3JjL2Zyb21VdGY4LnRzXG52YXIgaW1wb3J0X3V0aWxfYnVmZmVyX2Zyb20gPSByZXF1aXJlKFwiQHNtaXRoeS91dGlsLWJ1ZmZlci1mcm9tXCIpO1xudmFyIGZyb21VdGY4ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoaW5wdXQpID0+IHtcbiAgY29uc3QgYnVmID0gKDAsIGltcG9ydF91dGlsX2J1ZmZlcl9mcm9tLmZyb21TdHJpbmcpKGlucHV0LCBcInV0ZjhcIik7XG4gIHJldHVybiBuZXcgVWludDhBcnJheShidWYuYnVmZmVyLCBidWYuYnl0ZU9mZnNldCwgYnVmLmJ5dGVMZW5ndGggLyBVaW50OEFycmF5LkJZVEVTX1BFUl9FTEVNRU5UKTtcbn0sIFwiZnJvbVV0ZjhcIik7XG5cbi8vIHNyYy90b1VpbnQ4QXJyYXkudHNcbnZhciB0b1VpbnQ4QXJyYXkgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChkYXRhKSA9PiB7XG4gIGlmICh0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIikge1xuICAgIHJldHVybiBmcm9tVXRmOChkYXRhKTtcbiAgfVxuICBpZiAoQXJyYXlCdWZmZXIuaXNWaWV3KGRhdGEpKSB7XG4gICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGRhdGEuYnVmZmVyLCBkYXRhLmJ5dGVPZmZzZXQsIGRhdGEuYnl0ZUxlbmd0aCAvIFVpbnQ4QXJyYXkuQllURVNfUEVSX0VMRU1FTlQpO1xuICB9XG4gIHJldHVybiBuZXcgVWludDhBcnJheShkYXRhKTtcbn0sIFwidG9VaW50OEFycmF5XCIpO1xuXG4vLyBzcmMvdG9VdGY4LnRzXG5cbnZhciB0b1V0ZjggPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChpbnB1dCkgPT4ge1xuICBpZiAodHlwZW9mIGlucHV0ID09PSBcInN0cmluZ1wiKSB7XG4gICAgcmV0dXJuIGlucHV0O1xuICB9XG4gIGlmICh0eXBlb2YgaW5wdXQgIT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGlucHV0LmJ5dGVPZmZzZXQgIT09IFwibnVtYmVyXCIgfHwgdHlwZW9mIGlucHV0LmJ5dGVMZW5ndGggIT09IFwibnVtYmVyXCIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJAc21pdGh5L3V0aWwtdXRmODogdG9VdGY4IGVuY29kZXIgZnVuY3Rpb24gb25seSBhY2NlcHRzIHN0cmluZyB8IFVpbnQ4QXJyYXkuXCIpO1xuICB9XG4gIHJldHVybiAoMCwgaW1wb3J0X3V0aWxfYnVmZmVyX2Zyb20uZnJvbUFycmF5QnVmZmVyKShpbnB1dC5idWZmZXIsIGlucHV0LmJ5dGVPZmZzZXQsIGlucHV0LmJ5dGVMZW5ndGgpLnRvU3RyaW5nKFwidXRmOFwiKTtcbn0sIFwidG9VdGY4XCIpO1xuLy8gQW5ub3RhdGUgdGhlIENvbW1vbkpTIGV4cG9ydCBuYW1lcyBmb3IgRVNNIGltcG9ydCBpbiBub2RlOlxuXG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgZnJvbVV0ZjgsXG4gIHRvVWludDhBcnJheSxcbiAgdG9VdGY4XG59KTtcblxuIl0sIm5hbWVzIjpbIl9fZGVmUHJvcCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiX19nZXRPd25Qcm9wRGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9fZ2V0T3duUHJvcE5hbWVzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIl9faGFzT3duUHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiX19uYW1lIiwidGFyZ2V0IiwidmFsdWUiLCJjb25maWd1cmFibGUiLCJfX2V4cG9ydCIsImFsbCIsIm5hbWUiLCJnZXQiLCJlbnVtZXJhYmxlIiwiX19jb3B5UHJvcHMiLCJ0byIsImZyb20iLCJleGNlcHQiLCJkZXNjIiwia2V5IiwiY2FsbCIsIl9fdG9Db21tb25KUyIsIm1vZCIsInNyY19leHBvcnRzIiwiZnJvbVV0ZjgiLCJ0b1VpbnQ4QXJyYXkiLCJ0b1V0ZjgiLCJtb2R1bGUiLCJleHBvcnRzIiwiaW1wb3J0X3V0aWxfYnVmZmVyX2Zyb20iLCJyZXF1aXJlIiwiaW5wdXQiLCJidWYiLCJmcm9tU3RyaW5nIiwiVWludDhBcnJheSIsImJ1ZmZlciIsImJ5dGVPZmZzZXQiLCJieXRlTGVuZ3RoIiwiQllURVNfUEVSX0VMRU1FTlQiLCJkYXRhIiwiQXJyYXlCdWZmZXIiLCJpc1ZpZXciLCJFcnJvciIsImZyb21BcnJheUJ1ZmZlciIsInRvU3RyaW5nIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/util-utf8/dist-cjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/util-waiter/dist-cjs/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@smithy/util-waiter/dist-cjs/index.js ***!
  \************************************************************/
/***/ ((module) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value)=>__defProp(target, \"name\", {\n        value,\n        configurable: true\n    });\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n    WaiterState: ()=>WaiterState,\n    checkExceptions: ()=>checkExceptions,\n    createWaiter: ()=>createWaiter,\n    waiterServiceDefaults: ()=>waiterServiceDefaults\n});\nmodule.exports = __toCommonJS(src_exports);\n// src/utils/sleep.ts\nvar sleep = /* @__PURE__ */ __name((seconds)=>{\n    return new Promise((resolve)=>setTimeout(resolve, seconds * 1e3));\n}, \"sleep\");\n// src/waiter.ts\nvar waiterServiceDefaults = {\n    minDelay: 2,\n    maxDelay: 120\n};\nvar WaiterState = /* @__PURE__ */ ((WaiterState2)=>{\n    WaiterState2[\"ABORTED\"] = \"ABORTED\";\n    WaiterState2[\"FAILURE\"] = \"FAILURE\";\n    WaiterState2[\"SUCCESS\"] = \"SUCCESS\";\n    WaiterState2[\"RETRY\"] = \"RETRY\";\n    WaiterState2[\"TIMEOUT\"] = \"TIMEOUT\";\n    return WaiterState2;\n})(WaiterState || {});\nvar checkExceptions = /* @__PURE__ */ __name((result)=>{\n    if (result.state === \"ABORTED\" /* ABORTED */ ) {\n        const abortError = new Error(`${JSON.stringify({\n            ...result,\n            reason: \"Request was aborted\"\n        })}`);\n        abortError.name = \"AbortError\";\n        throw abortError;\n    } else if (result.state === \"TIMEOUT\" /* TIMEOUT */ ) {\n        const timeoutError = new Error(`${JSON.stringify({\n            ...result,\n            reason: \"Waiter has timed out\"\n        })}`);\n        timeoutError.name = \"TimeoutError\";\n        throw timeoutError;\n    } else if (result.state !== \"SUCCESS\" /* SUCCESS */ ) {\n        throw new Error(`${JSON.stringify(result)}`);\n    }\n    return result;\n}, \"checkExceptions\");\n// src/poller.ts\nvar exponentialBackoffWithJitter = /* @__PURE__ */ __name((minDelay, maxDelay, attemptCeiling, attempt)=>{\n    if (attempt > attemptCeiling) return maxDelay;\n    const delay = minDelay * 2 ** (attempt - 1);\n    return randomInRange(minDelay, delay);\n}, \"exponentialBackoffWithJitter\");\nvar randomInRange = /* @__PURE__ */ __name((min, max)=>min + Math.random() * (max - min), \"randomInRange\");\nvar runPolling = /* @__PURE__ */ __name(async ({ minDelay, maxDelay, maxWaitTime, abortController, client, abortSignal }, input, acceptorChecks)=>{\n    const observedResponses = {};\n    const { state, reason } = await acceptorChecks(client, input);\n    if (reason) {\n        const message = createMessageFromResponse(reason);\n        observedResponses[message] |= 0;\n        observedResponses[message] += 1;\n    }\n    if (state !== \"RETRY\" /* RETRY */ ) {\n        return {\n            state,\n            reason,\n            observedResponses\n        };\n    }\n    let currentAttempt = 1;\n    const waitUntil = Date.now() + maxWaitTime * 1e3;\n    const attemptCeiling = Math.log(maxDelay / minDelay) / Math.log(2) + 1;\n    while(true){\n        if (abortController?.signal?.aborted || abortSignal?.aborted) {\n            const message = \"AbortController signal aborted.\";\n            observedResponses[message] |= 0;\n            observedResponses[message] += 1;\n            return {\n                state: \"ABORTED\" /* ABORTED */ ,\n                observedResponses\n            };\n        }\n        const delay = exponentialBackoffWithJitter(minDelay, maxDelay, attemptCeiling, currentAttempt);\n        if (Date.now() + delay * 1e3 > waitUntil) {\n            return {\n                state: \"TIMEOUT\" /* TIMEOUT */ ,\n                observedResponses\n            };\n        }\n        await sleep(delay);\n        const { state: state2, reason: reason2 } = await acceptorChecks(client, input);\n        if (reason2) {\n            const message = createMessageFromResponse(reason2);\n            observedResponses[message] |= 0;\n            observedResponses[message] += 1;\n        }\n        if (state2 !== \"RETRY\" /* RETRY */ ) {\n            return {\n                state: state2,\n                reason: reason2,\n                observedResponses\n            };\n        }\n        currentAttempt += 1;\n    }\n}, \"runPolling\");\nvar createMessageFromResponse = /* @__PURE__ */ __name((reason)=>{\n    if (reason?.$responseBodyText) {\n        return `Deserialization error for body: ${reason.$responseBodyText}`;\n    }\n    if (reason?.$metadata?.httpStatusCode) {\n        if (reason.$response || reason.message) {\n            return `${reason.$response.statusCode ?? reason.$metadata.httpStatusCode ?? \"Unknown\"}: ${reason.message}`;\n        }\n        return `${reason.$metadata.httpStatusCode}: OK`;\n    }\n    return String(reason?.message ?? JSON.stringify(reason) ?? \"Unknown\");\n}, \"createMessageFromResponse\");\n// src/utils/validate.ts\nvar validateWaiterOptions = /* @__PURE__ */ __name((options)=>{\n    if (options.maxWaitTime <= 0) {\n        throw new Error(`WaiterConfiguration.maxWaitTime must be greater than 0`);\n    } else if (options.minDelay <= 0) {\n        throw new Error(`WaiterConfiguration.minDelay must be greater than 0`);\n    } else if (options.maxDelay <= 0) {\n        throw new Error(`WaiterConfiguration.maxDelay must be greater than 0`);\n    } else if (options.maxWaitTime <= options.minDelay) {\n        throw new Error(`WaiterConfiguration.maxWaitTime [${options.maxWaitTime}] must be greater than WaiterConfiguration.minDelay [${options.minDelay}] for this waiter`);\n    } else if (options.maxDelay < options.minDelay) {\n        throw new Error(`WaiterConfiguration.maxDelay [${options.maxDelay}] must be greater than WaiterConfiguration.minDelay [${options.minDelay}] for this waiter`);\n    }\n}, \"validateWaiterOptions\");\n// src/createWaiter.ts\nvar abortTimeout = /* @__PURE__ */ __name(async (abortSignal)=>{\n    return new Promise((resolve)=>{\n        const onAbort = /* @__PURE__ */ __name(()=>resolve({\n                state: \"ABORTED\" /* ABORTED */ \n            }), \"onAbort\");\n        if (typeof abortSignal.addEventListener === \"function\") {\n            abortSignal.addEventListener(\"abort\", onAbort);\n        } else {\n            abortSignal.onabort = onAbort;\n        }\n    });\n}, \"abortTimeout\");\nvar createWaiter = /* @__PURE__ */ __name(async (options, input, acceptorChecks)=>{\n    const params = {\n        ...waiterServiceDefaults,\n        ...options\n    };\n    validateWaiterOptions(params);\n    const exitConditions = [\n        runPolling(params, input, acceptorChecks)\n    ];\n    if (options.abortController) {\n        exitConditions.push(abortTimeout(options.abortController.signal));\n    }\n    if (options.abortSignal) {\n        exitConditions.push(abortTimeout(options.abortSignal));\n    }\n    return Promise.race(exitConditions);\n}, \"createWaiter\");\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/util-waiter/dist-cjs/index.js\n");

/***/ })

};
;