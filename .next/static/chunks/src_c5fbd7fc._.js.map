{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://E%3A/Teste%20AWS/aws-monitoring-platform/src/hooks/useAwsCredentials.ts"],"sourcesContent":["\"use client\";\n\nimport { useState, useEffect } from 'react';\n\nexport interface AwsCredential {\n  id: string;\n  name: string;\n  accountId?: string;\n  accessKeyId: string;\n  secretAccessKey: string;\n  region: string;\n}\n\nexport interface UseAwsCredentialsResult {\n  credentials: AwsCredential[];\n  selectedCredential: AwsCredential | null;\n  selectCredential: (id: string) => void;\n  addCredential: (credential: Omit<AwsCredential, 'id'>) => Promise<void>;\n  updateCredential: (id: string, data: Partial<Omit<AwsCredential, 'id'>>) => Promise<void>;\n  deleteCredential: (id: string) => Promise<void>;\n  loading: boolean;\n  isLoading: boolean; // Alias for loading - needed for compatibility\n  error: string | null;\n  refresh: () => Promise<void>;\n}\n\nexport function useAwsCredentials(): UseAwsCredentialsResult {\n  const [credentials, setCredentials] = useState<AwsCredential[]>([]);\n  const [selectedCredentialId, setSelectedCredentialId] = useState<string | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // Function to fetch credentials from the API\n  const fetchCredentials = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await fetch('/api/aws/credentials');\n      \n      if (!response.ok) {\n        throw new Error(`Failed to fetch credentials: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      setCredentials(data);\n      \n      // If we have credentials but none selected, select the first one\n      if (data.length > 0 && !selectedCredentialId) {\n        setSelectedCredentialId(data[0].id);\n        // Save to localStorage\n        localStorage.setItem('selectedAwsCredentialId', data[0].id);\n      }\n      \n      return data;\n    } catch (err) {\n      setError(`Error fetching credentials: ${err instanceof Error ? err.message : String(err)}`);\n      return [];\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Function to select a credential\n  const selectCredential = (id: string) => {\n    setSelectedCredentialId(id);\n    localStorage.setItem('selectedAwsCredentialId', id);\n  };\n\n  // Function to add a new credential\n  const addCredential = async (credential: Omit<AwsCredential, 'id'>) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const response = await fetch('/api/aws/credentials', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(credential),\n      });\n      \n      if (!response.ok) {\n        throw new Error(`Failed to add credential: ${response.status}`);\n      }\n      \n      await fetchCredentials();\n    } catch (err) {\n      setError(`Error adding credential: ${err instanceof Error ? err.message : String(err)}`);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Function to update an existing credential\n  const updateCredential = async (id: string, data: Partial<Omit<AwsCredential, 'id'>>) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const response = await fetch(`/api/aws/credentials/${id}`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n      });\n      \n      if (!response.ok) {\n        throw new Error(`Failed to update credential: ${response.status}`);\n      }\n      \n      await fetchCredentials();\n    } catch (err) {\n      setError(`Error updating credential: ${err instanceof Error ? err.message : String(err)}`);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Function to delete a credential\n  const deleteCredential = async (id: string) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const response = await fetch(`/api/aws/credentials/${id}`, {\n        method: 'DELETE',\n      });\n      \n      if (!response.ok) {\n        throw new Error(`Failed to delete credential: ${response.status}`);\n      }\n      \n      // If we delete the selected credential, select another one\n      if (id === selectedCredentialId) {\n        const remainingCredentials = credentials.filter(c => c.id !== id);\n        if (remainingCredentials.length > 0) {\n          selectCredential(remainingCredentials[0].id);\n        } else {\n          setSelectedCredentialId(null);\n          localStorage.removeItem('selectedAwsCredentialId');\n        }\n      }\n      \n      await fetchCredentials();\n    } catch (err) {\n      setError(`Error deleting credential: ${err instanceof Error ? err.message : String(err)}`);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Load credentials on mount\n  useEffect(() => {\n    // Try to restore selected credential from localStorage\n    const savedCredentialId = localStorage.getItem('selectedAwsCredentialId');\n    if (savedCredentialId) {\n      setSelectedCredentialId(savedCredentialId);\n    }\n    \n    fetchCredentials();\n  }, []);\n\n  // Find the selected credential object\n  const selectedCredential = credentials.find(c => c.id === selectedCredentialId) || null;\n\n  return {\n    credentials,\n    selectedCredential,\n    selectCredential,\n    addCredential,\n    updateCredential,\n    deleteCredential,\n    loading,\n    isLoading: loading, // Alias for loading\n    error,\n    refresh: fetchCredentials,\n  };\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 161, "column": 0}, "map": {"version":3,"sources":["file://E%3A/Teste%20AWS/aws-monitoring-platform/src/components/aws/CredentialSelector.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { useAwsCredentials } from \"@/hooks/useAwsCredentials\";\r\nimport { useRouter } from \"next/navigation\";\r\n\r\nexport default function CredentialSelector() {\r\n  const { credentials, selectedCredential, selectCredential, loading } = useAwsCredentials();\r\n  const router = useRouter();\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"bg-white rounded-lg shadow-sm p-4 mb-6 flex items-center space-x-2\">\r\n        <span className=\"text-gray-700\">Carregando credenciais...</span>\r\n        <div className=\"animate-spin rounded-full h-4 w-4 border-t-2 border-b-2 border-indigo-500\"></div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (credentials.length === 0) {\r\n    return (\r\n      <div className=\"bg-white rounded-lg shadow-sm p-4 mb-6\">\r\n        <div className=\"flex justify-between items-center\">\r\n          <span className=\"text-gray-700\">Nenhuma credencial AWS encontrada</span>\r\n          <button\r\n            onClick={() => router.push(\"/dashboard/credentials\")}\r\n            className=\"px-3 py-1 text-sm text-white bg-indigo-600 rounded-md hover:bg-indigo-700\"\r\n          >\r\n            Adicionar Credencial\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"bg-white rounded-lg shadow-sm p-4 mb-6\">\r\n      <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between\">\r\n        <label htmlFor=\"credential-selector\" className=\"block text-sm font-medium text-gray-700 mb-2 sm:mb-0\">\r\n          Selecionar Credencial AWS:\r\n        </label>\r\n        <div className=\"flex-1 sm:ml-4 max-w-md\">\r\n          <select\r\n            id=\"credential-selector\"\r\n            value={selectedCredential?.id || \"\"}\r\n            onChange={(e) => selectCredential(e.target.value)}\r\n            className=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm\"\r\n          >\r\n            <option value=\"\" disabled>\r\n              Selecione uma credencial\r\n            </option>\r\n            {credentials.map((cred) => (\r\n              <option key={cred.id} value={cred.id}>\r\n                {cred.name} ({cred.region})\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n} "],"names":[],"mappings":";;;;AAEA;AACA;;;AAHA;;;AAKe,SAAS;;IACtB,MAAM,EAAE,WAAW,EAAE,kBAAkB,EAAE,gBAAgB,EAAE,OAAO,EAAE,GAAG,CAAA,GAAA,oIAAA,CAAA,oBAAiB,AAAD;IACvF,MAAM,SAAS,CAAA,GAAA,qIAAA,CAAA,YAAS,AAAD;IAEvB,IAAI,SAAS;QACX,qBACE,6LAAC;YAAI,WAAU;;8BACb,6LAAC;oBAAK,WAAU;8BAAgB;;;;;;8BAChC,6LAAC;oBAAI,WAAU;;;;;;;;;;;;IAGrB;IAEA,IAAI,YAAY,MAAM,KAAK,GAAG;QAC5B,qBACE,6LAAC;YAAI,WAAU;sBACb,cAAA,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBAAK,WAAU;kCAAgB;;;;;;kCAChC,6LAAC;wBACC,SAAS,IAAM,OAAO,IAAI,CAAC;wBAC3B,WAAU;kCACX;;;;;;;;;;;;;;;;;IAMT;IAEA,qBACE,6LAAC;QAAI,WAAU;kBACb,cAAA,6LAAC;YAAI,WAAU;;8BACb,6LAAC;oBAAM,SAAQ;oBAAsB,WAAU;8BAAuD;;;;;;8BAGtG,6LAAC;oBAAI,WAAU;8BACb,cAAA,6LAAC;wBACC,IAAG;wBACH,OAAO,oBAAoB,MAAM;wBACjC,UAAU,CAAC,IAAM,iBAAiB,EAAE,MAAM,CAAC,KAAK;wBAChD,WAAU;;0CAEV,6LAAC;gCAAO,OAAM;gCAAG,QAAQ;0CAAC;;;;;;4BAGzB,YAAY,GAAG,CAAC,CAAC,qBAChB,6LAAC;oCAAqB,OAAO,KAAK,EAAE;;wCACjC,KAAK,IAAI;wCAAC;wCAAG,KAAK,MAAM;wCAAC;;mCADf,KAAK,EAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;AASlC;GAvDwB;;QACiD,oIAAA,CAAA,oBAAiB;QACzE,qIAAA,CAAA,YAAS;;;KAFF","debugId":null}},
    {"offset": {"line": 322, "column": 0}, "map": {"version":3,"sources":["file://E%3A/Teste%20AWS/aws-monitoring-platform/src/app/dashboard/ec2/page.tsx"],"sourcesContent":["\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport { useAwsCredentials } from \"@/hooks/useAwsCredentials\";\nimport { motion } from \"framer-motion\";\nimport CredentialSelector from \"@/components/aws/CredentialSelector\";\nimport { \n  Shield, AlertTriangle, AlertCircle, Server, \n  Key, Database, Network, Lock, Users, \n  CheckCircle, XCircle, Info, RefreshCw\n} from \"lucide-react\";\nimport React from 'react';\n\n// Tipos para o EC2\ninterface EC2Instance {\n  id: string;\n  type: string;\n  state: string;\n  publicIp: string;\n  privateIp: string;\n  launchTime: string;\n}\n\n// Tipos para o EC2 Security Service\ninterface EC2SecurityData {\n  results: {\n    securityGroups: SecurityGroup[];\n    networkAcls: NetworkACL[];\n    instances: SecurityInstance[];\n    keyPairs: KeyPair[];\n    volumes: Volume[];\n    iamRoles: IAMRole[];\n  };\n  summary: {\n    totalIssues: number;\n    securityGroupIssues: number;\n    networkAclIssues: number;\n    instanceIssues: number;\n    keyPairIssues: number;\n    volumeIssues: number;\n    iamRoleIssues: number;\n  };\n}\n\ninterface SecurityGroup {\n  id: string;\n  name: string;\n  description: string;\n  vpcId: string;\n  inboundRules: SecurityGroupRule[];\n  outboundRules: SecurityGroupRule[];\n  issues: SecurityGroupIssue[];\n}\n\ninterface SecurityGroupRule {\n  protocol: string;\n  fromPort: number;\n  toPort: number;\n  ipRanges: IPRange[];\n  ipv6Ranges: IPRange[];\n}\n\ninterface IPRange {\n  cidr: string;\n  description?: string;\n}\n\ninterface SecurityGroupIssue {\n  type: string;\n  description: string;\n  severity: 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL';\n  affectedRule: SecurityGroupRule;\n}\n\ninterface NetworkACL {\n  id: string;\n  vpcId: string;\n  default: boolean;\n  inboundRules: ACLRule[];\n  outboundRules: ACLRule[];\n  issues: ACLIssue[];\n}\n\ninterface ACLRule {\n  ruleNumber: number;\n  protocol: string;\n  action: string;\n  cidrBlock: string;\n  fromPort: number;\n  toPort: number;\n}\n\ninterface ACLIssue {\n  type: string;\n  description: string;\n  severity: 'LOW' | 'MEDIUM' | 'HIGH';\n  affectedRule: ACLRule;\n}\n\ninterface SecurityInstance {\n  id: string;\n  type: string;\n  state: string;\n  publicIp?: string;\n  privateIp?: string;\n  subnetId?: string;\n  vpcId?: string;\n  launchTime?: Date;\n  imageId?: string;\n  keyName?: string;\n  iamInstanceProfile?: string;\n  issues: InstanceIssue[];\n}\n\ninterface InstanceIssue {\n  type: string;\n  description: string;\n  severity: 'LOW' | 'MEDIUM' | 'HIGH';\n}\n\ninterface KeyPair {\n  name: string;\n  fingerprint: string;\n  issues: KeyPairIssue[];\n}\n\ninterface KeyPairIssue {\n  type: string;\n  description: string;\n  severity: 'LOW' | 'MEDIUM';\n}\n\ninterface Volume {\n  id: string;\n  instanceId?: string;\n  size: number;\n  type: string;\n  encrypted: boolean;\n  state: string;\n  issues: VolumeIssue[];\n}\n\ninterface VolumeIssue {\n  type: string;\n  description: string;\n  severity: 'MEDIUM' | 'HIGH';\n}\n\ninterface IAMRole {\n  name: string;\n  arn: string;\n  instanceProfiles: string[];\n  permissions: string[];\n  issues: IAMRoleIssue[];\n}\n\ninterface IAMRoleIssue {\n  type: string;\n  description: string;\n  severity: 'MEDIUM' | 'HIGH';\n}\n\nexport default function EC2Page() {\n  const { selectedCredential } = useAwsCredentials();\n  const [instances, setInstances] = useState<EC2Instance[]>([]);\n  const [securityData, setSecurityData] = useState<EC2SecurityData | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [securityLoading, setSecurityLoading] = useState(true);\n  const [backgroundLoading, setBackgroundLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [securityError, setSecurityError] = useState<string | null>(null);\n  const [activeTab, setActiveTab] = useState<'instances' | 'security'>('instances');\n  const [lastCredentialId, setLastCredentialId] = useState<string | null>(null);\n  const [lastRefreshed, setLastRefreshed] = useState<Date | null>(null);\n\n  useEffect(() => {\n    // Tenta restaurar dados do cache ao iniciar\n    if (!selectedCredential) return;\n    \n    // Verificar se já temos dados de instâncias no localStorage\n    try {\n      const instancesCache = localStorage.getItem('ec2Instances');\n      const securityCache = localStorage.getItem('ec2SecurityData');\n      const cachedCredentialId = localStorage.getItem('ec2LastCredentialId');\n      \n      if (instancesCache && cachedCredentialId === selectedCredential.id) {\n        const parsedInstances = JSON.parse(instancesCache);\n        setInstances(parsedInstances);\n        setLoading(false);\n      }\n      \n      if (securityCache && cachedCredentialId === selectedCredential.id) {\n        const parsedSecurityData = JSON.parse(securityCache);\n        setSecurityData(parsedSecurityData);\n        setSecurityLoading(false);\n      }\n      \n      setLastCredentialId(selectedCredential.id);\n      \n      // Atualiza em background\n      if (cachedCredentialId === selectedCredential.id) {\n        fetchInstancesInBackground();\n        fetchSecurityDataInBackground();\n      } else {\n        fetchInstances();\n        fetchSecurityData();\n      }\n    } catch (error) {\n      console.error(\"Erro ao restaurar cache:\", error);\n      fetchInstances();\n      fetchSecurityData();\n    }\n  }, [selectedCredential]);\n\n  // Função para buscar instâncias com feedback visual\n  async function fetchInstances() {\n    if (!selectedCredential) {\n      setLoading(false);\n      return;\n    }\n\n    try {\n      setLoading(true);\n      setError(null);\n      \n      console.log(`Buscando instâncias EC2 para credencial: ${selectedCredential.id}`);\n      const response = await fetch(`/api/aws/resources?credentialId=${selectedCredential.id}&type=EC2`);\n      \n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || \"Erro ao buscar instâncias EC2\");\n      }\n      \n      const data = await response.json();\n      console.log(\"Resposta da API:\", data);\n      setInstances(data.resources || []);\n      setLastRefreshed(new Date());\n      \n      // Armazenar no cache\n      localStorage.setItem('ec2Instances', JSON.stringify(data.resources || []));\n      localStorage.setItem('ec2LastCredentialId', selectedCredential.id);\n    } catch (err) {\n      console.error(\"Erro ao buscar instâncias:\", err);\n      setError(err instanceof Error ? err.message : \"Erro ao buscar instâncias\");\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  // Função para buscar dados de segurança com feedback visual\n  async function fetchSecurityData() {\n    if (!selectedCredential) {\n      setSecurityLoading(false);\n      return;\n    }\n\n    try {\n      setSecurityLoading(true);\n      setSecurityError(null);\n      \n      console.log(`Buscando dados de segurança do EC2 para credencial: ${selectedCredential.id}`);\n      const response = await fetch(`/api/aws/ec2/security?credentialId=${selectedCredential.id}`);\n      \n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || \"Erro ao buscar dados de segurança do EC2\");\n      }\n      \n      const data = await response.json();\n      console.log(\"Resposta da API de segurança:\", data);\n      setSecurityData(data);\n      setLastRefreshed(new Date());\n      \n      // Armazenar no cache\n      localStorage.setItem('ec2SecurityData', JSON.stringify(data));\n      localStorage.setItem('ec2LastCredentialId', selectedCredential.id);\n    } catch (err) {\n      console.error(\"Erro ao buscar dados de segurança:\", err);\n      setSecurityError(err instanceof Error ? err.message : \"Erro ao buscar dados de segurança\");\n    } finally {\n      setSecurityLoading(false);\n    }\n  }\n\n  // Funções para atualizar em background sem interferir na experiência do usuário\n  async function fetchInstancesInBackground() {\n    if (!selectedCredential) return;\n\n    try {\n      setBackgroundLoading(true);\n      \n      console.log(`Atualizando instâncias EC2 em background para credencial: ${selectedCredential.id}`);\n      const response = await fetch(`/api/aws/resources?credentialId=${selectedCredential.id}&type=EC2`);\n      \n      if (!response.ok) {\n        throw new Error(\"Erro na atualização em background\");\n      }\n      \n      const data = await response.json();\n      setInstances(data.resources || []);\n      \n      // Atualizar cache\n      localStorage.setItem('ec2Instances', JSON.stringify(data.resources || []));\n      localStorage.setItem('ec2LastCredentialId', selectedCredential.id);\n      \n      console.log(\"Atualização em background de instâncias EC2 concluída\");\n    } catch (err) {\n      console.error(\"Erro na atualização em background das instâncias:\", err);\n      // Não exibimos erros de background para o usuário\n    } finally {\n      setBackgroundLoading(false);\n    }\n  }\n\n  async function fetchSecurityDataInBackground() {\n    if (!selectedCredential) return;\n\n    try {\n      setBackgroundLoading(true);\n      \n      console.log(`Atualizando dados de segurança EC2 em background para credencial: ${selectedCredential.id}`);\n      const response = await fetch(`/api/aws/ec2/security?credentialId=${selectedCredential.id}`);\n      \n      if (!response.ok) {\n        throw new Error(\"Erro na atualização em background\");\n      }\n      \n      const data = await response.json();\n      setSecurityData(data);\n      \n      // Atualizar cache\n      localStorage.setItem('ec2SecurityData', JSON.stringify(data));\n      localStorage.setItem('ec2LastCredentialId', selectedCredential.id);\n      \n      console.log(\"Atualização em background de dados de segurança EC2 concluída\");\n    } catch (err) {\n      console.error(\"Erro na atualização em background dos dados de segurança:\", err);\n      // Não exibimos erros de background para o usuário\n    } finally {\n      setBackgroundLoading(false);\n    }\n  }\n\n  // Função para obter a cor baseada no estado da instância\n  const getStateColor = (state?: string) => {\n    switch (state?.toLowerCase()) {\n      case \"running\":\n        return \"bg-green-100 text-green-800\";\n      case \"stopped\":\n        return \"bg-red-100 text-red-800\";\n      case \"pending\":\n        return \"bg-yellow-100 text-yellow-800\";\n      case \"stopping\":\n        return \"bg-orange-100 text-orange-800\";\n      case \"terminated\":\n        return \"bg-gray-100 text-gray-800\";\n      default:\n        return \"bg-gray-100 text-gray-800\";\n    }\n  };\n  \n  // Função para obter a cor baseada na severidade\n  const getSeverityColor = (severity: string) => {\n    switch (severity) {\n      case \"CRITICAL\":\n        return \"bg-red-100 text-red-800\";\n      case \"HIGH\":\n        return \"bg-orange-100 text-orange-800\";\n      case \"MEDIUM\":\n        return \"bg-yellow-100 text-yellow-800\";\n      case \"LOW\":\n        return \"bg-blue-100 text-blue-800\";\n      default:\n        return \"bg-gray-100 text-gray-800\";\n    }\n  };\n  \n  // Função para obter o ícone baseado na severidade\n  const getSeverityIcon = (severity: string) => {\n    switch (severity) {\n      case \"CRITICAL\":\n        return <AlertCircle className=\"h-4 w-4 text-red-600\" />;\n      case \"HIGH\":\n        return <AlertTriangle className=\"h-4 w-4 text-orange-600\" />;\n      case \"MEDIUM\":\n        return <AlertTriangle className=\"h-4 w-4 text-yellow-600\" />;\n      case \"LOW\":\n        return <Info className=\"h-4 w-4 text-blue-600\" />;\n      default:\n        return <Info className=\"h-4 w-4 text-gray-600\" />;\n    }\n  };\n\n  return (\n    <div>\n      <motion.div\n        className=\"mb-6\"\n        initial={{ opacity: 0, y: -20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.3 }}\n      >\n        <div className=\"flex items-center gap-2 mb-2\">\n          <Server className=\"h-6 w-6 text-indigo-600\" />\n          <h1 className=\"text-3xl font-bold text-gray-900\">Monitoramento EC2</h1>\n        </div>\n        <p className=\"mt-2 text-gray-600\">\n          Visualize e analise a segurança das suas instâncias EC2 na AWS.\n        </p>\n      </motion.div>\n\n      <CredentialSelector />\n      \n      {/* Header Actions */}\n      <div className=\"flex justify-end mb-4\">\n        <div className=\"flex flex-col items-end\">\n          <button\n            onClick={() => {\n              if (selectedCredential) {\n                activeTab === 'instances' ? fetchInstances() : fetchSecurityData();\n              }\n            }}\n            disabled={!selectedCredential || (activeTab === 'instances' ? loading : securityLoading)}\n            className=\"inline-flex items-center gap-2 px-4 py-2 text-sm font-medium text-white bg-indigo-600 rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-50\"\n          >\n            {(activeTab === 'instances' ? loading : securityLoading) ? (\n              <RefreshCw className=\"h-4 w-4 animate-spin\" />\n            ) : (\n              <RefreshCw className=\"h-4 w-4\" />\n            )}\n            Atualizar Dados\n          </button>\n          {lastRefreshed && (\n            <span className=\"text-xs text-gray-500 mt-1\">\n              Última atualização: {lastRefreshed.toLocaleString()}\n            </span>\n          )}\n        </div>\n      </div>\n      \n      {/* Tabs */}\n      <div className=\"flex border-b border-gray-200 mb-6\">\n        <button\n          className={`py-2 px-4 font-medium text-sm flex items-center gap-2 ${\n            activeTab === 'instances'\n              ? 'border-b-2 border-indigo-500 text-indigo-600'\n              : 'text-gray-500 hover:text-gray-700'\n          }`}\n          onClick={() => setActiveTab('instances')}\n        >\n          <Server className=\"h-4 w-4\" />\n          Instâncias\n        </button>\n        <button\n          className={`py-2 px-4 font-medium text-sm flex items-center gap-2 ${\n            activeTab === 'security'\n              ? 'border-b-2 border-indigo-500 text-indigo-600'\n              : 'text-gray-500 hover:text-gray-700'\n          }`}\n          onClick={() => setActiveTab('security')}\n        >\n          <Shield className=\"h-4 w-4\" />\n          Segurança\n        </button>\n      </div>\n\n      {/* Conteúdo das Tabs */}\n      {activeTab === 'instances' ? (\n        <InstancesTab \n          instances={instances} \n          loading={loading} \n          error={error} \n          selectedCredential={selectedCredential}\n          getStateColor={getStateColor}\n          onRefresh={fetchInstances}\n        />\n      ) : (\n        <SecurityTab \n          securityData={securityData} \n          loading={securityLoading} \n          error={securityError}\n          selectedCredential={selectedCredential}\n          getSeverityColor={getSeverityColor}\n          getSeverityIcon={getSeverityIcon}\n          onRefresh={fetchSecurityData}\n        />\n      )}\n    </div>\n  );\n}\n\n// Componente para a aba de instâncias\ninterface InstancesTabProps {\n  instances: EC2Instance[];\n  loading: boolean;\n  error: string | null;\n  selectedCredential: any;\n  getStateColor: (state?: string) => string;\n  onRefresh: () => void;\n}\n\nfunction InstancesTab({ \n  instances, \n  loading, \n  error, \n  selectedCredential,\n  getStateColor,\n  onRefresh \n}: InstancesTabProps) {\n  return (\n    <motion.div\n      className=\"bg-white rounded-lg shadow-md p-6\"\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.3 }}\n    >\n      {!selectedCredential ? (\n        <div className=\"text-center py-6\">\n          <p className=\"text-gray-500\">Selecione uma credencial AWS para visualizar as instâncias.</p>\n        </div>\n      ) : loading ? (\n        <div className=\"flex justify-center py-8\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-indigo-500\"></div>\n        </div>\n      ) : error ? (\n        <div className=\"p-4 bg-red-50 rounded-md\">\n          <p className=\"text-red-700\">{error}</p>\n        </div>\n      ) : instances.length === 0 ? (\n        <div className=\"text-center py-6\">\n          <p className=\"text-gray-500\">Nenhuma instância EC2 encontrada na região {selectedCredential.region}.</p>\n          <p className=\"text-sm text-gray-400 mt-2\">\n            Verifique se você tem instâncias EC2 nesta região ou se suas credenciais têm permissão para acessá-las.\n          </p>\n        </div>\n      ) : (\n        <div>\n          <div className=\"flex justify-between items-center mb-4\">\n            <h2 className=\"text-lg font-medium text-gray-900\">\n              {instances.length} {instances.length === 1 ? \"Instância\" : \"Instâncias\"} Encontradas\n            </h2>\n            <div className=\"flex items-center gap-4\">\n              <button\n                onClick={onRefresh}\n                disabled={loading}\n                className=\"inline-flex items-center gap-2 px-3 py-1 text-sm font-medium text-indigo-600 border border-indigo-300 rounded-md hover:bg-indigo-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-50\"\n              >\n                {loading ? (\n                  <RefreshCw className=\"h-3 w-3 animate-spin\" />\n                ) : (\n                  <RefreshCw className=\"h-3 w-3\" />\n                )}\n                Atualizar\n              </button>\n              <span className=\"text-sm text-gray-500\">\n                Região: {selectedCredential.region}\n              </span>\n            </div>\n          </div>\n          \n          <div className=\"overflow-x-auto\">\n            <table className=\"min-w-full divide-y divide-gray-200\">\n              <thead className=\"bg-gray-50\">\n                <tr>\n                  <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    ID da Instância\n                  </th>\n                  <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Tipo\n                  </th>\n                  <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Estado\n                  </th>\n                  <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    IP Público\n                  </th>\n                  <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    IP Privado\n                  </th>\n                  <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Iniciada Em\n                  </th>\n                </tr>\n              </thead>\n              <tbody className=\"bg-white divide-y divide-gray-200\">\n                {instances.map((instance) => (\n                  <tr key={instance.id} className=\"hover:bg-gray-50\">\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\n                      {instance.id}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                      {instance.type}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${getStateColor(instance.state)}`}>\n                        {instance.state}\n                      </span>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                      {instance.publicIp || \"-\"}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                      {instance.privateIp || \"-\"}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                      {instance.launchTime ? new Date(instance.launchTime).toLocaleString() : \"-\"}\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      )}\n    </motion.div>\n  );\n}\n\n// Componente para a aba de segurança\ninterface SecurityTabProps {\n  securityData: EC2SecurityData | null;\n  loading: boolean;\n  error: string | null;\n  selectedCredential: any;\n  getSeverityColor: (severity: string) => string;\n  getSeverityIcon: (severity: string) => React.ReactNode;\n  onRefresh: () => void;\n}\n\nfunction SecurityTab({ \n  securityData, \n  loading, \n  error, \n  selectedCredential,\n  getSeverityColor,\n  getSeverityIcon,\n  onRefresh\n}: SecurityTabProps) {\n  const [expandedSection, setExpandedSection] = useState<string | null>(null);\n  const [sendingToAnalysis, setSendingToAnalysis] = useState(false);\n  const [analysisMessage, setAnalysisMessage] = useState<string | null>(null);\n  \n  const toggleSection = (section: string) => {\n    if (expandedSection === section) {\n      setExpandedSection(null);\n    } else {\n      setExpandedSection(section);\n    }\n  };\n\n  const sendToSecurityAnalysis = async () => {\n    if (!selectedCredential) return;\n    \n    try {\n      setSendingToAnalysis(true);\n      setAnalysisMessage(null);\n      \n      const response = await fetch(`/api/aws/ec2/security?credentialId=${selectedCredential.id}&sendToSecurityAnalysis=true`);\n      \n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || \"Erro ao enviar para análise de segurança\");\n      }\n      \n      const data = await response.json();\n      setAnalysisMessage(`${data.summary.totalIssues} problemas de segurança enviados para a Análise de Segurança.`);\n    } catch (err) {\n      console.error(\"Erro ao enviar para análise de segurança:\", err);\n      setAnalysisMessage(err instanceof Error ? err.message : \"Erro ao enviar para análise de segurança\");\n    } finally {\n      setSendingToAnalysis(false);\n    }\n  };\n\n  return (\n    <motion.div\n      className=\"bg-white rounded-lg shadow-md\"\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.3 }}\n    >\n      {!selectedCredential ? (\n        <div className=\"text-center py-6\">\n          <p className=\"text-gray-500\">Selecione uma credencial AWS para analisar a segurança do EC2.</p>\n        </div>\n      ) : loading ? (\n        <div className=\"flex flex-col items-center justify-center py-12\">\n          <RefreshCw className=\"h-8 w-8 text-indigo-500 animate-spin mb-4\" />\n          <p className=\"text-gray-500\">Verificando segurança do EC2...</p>\n          <p className=\"text-xs text-gray-400 mt-1\">Isso pode levar alguns minutos</p>\n        </div>\n      ) : error ? (\n        <div className=\"p-4 bg-red-50 rounded-md\">\n          <p className=\"text-red-700\">{error}</p>\n        </div>\n      ) : !securityData ? (\n        <div className=\"text-center py-6\">\n          <p className=\"text-gray-500\">Nenhum dado de segurança disponível.</p>\n        </div>\n      ) : (\n        <div>\n          {/* Sumário de Problemas */}\n          <div className=\"p-6 border-b border-gray-200\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h2 className=\"text-lg font-medium text-gray-900 flex items-center\">\n                <Shield className=\"h-5 w-5 text-indigo-600 mr-2\" />\n                Resumo de Segurança\n              </h2>\n              <div className=\"flex items-center gap-4\">\n                <button\n                  onClick={onRefresh}\n                  disabled={loading}\n                  className=\"inline-flex items-center gap-2 px-3 py-1 text-sm font-medium text-indigo-600 border border-indigo-300 rounded-md hover:bg-indigo-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-50\"\n                >\n                  {loading ? (\n                    <RefreshCw className=\"h-3 w-3 animate-spin\" />\n                  ) : (\n                    <RefreshCw className=\"h-3 w-3\" />\n                  )}\n                  Atualizar\n                </button>\n                <button\n                  onClick={sendToSecurityAnalysis}\n                  disabled={sendingToAnalysis || securityData.summary.totalIssues === 0}\n                  className=\"px-4 py-2 text-sm font-medium text-white bg-indigo-600 rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-50 flex items-center gap-2\"\n                >\n                  {sendingToAnalysis ? (\n                    <>\n                      <RefreshCw className=\"h-4 w-4 animate-spin\" />\n                      Enviando...\n                    </>\n                  ) : (\n                    <>\n                      <Shield className=\"h-4 w-4\" />\n                      Enviar para Análise de Segurança\n                    </>\n                  )}\n                </button>\n                <span className=\"text-sm text-gray-500\">\n                  Região: {selectedCredential.region}\n                </span>\n              </div>\n            </div>\n            \n            {analysisMessage && (\n              <div className=\"mb-4 p-3 bg-green-50 text-green-800 rounded-md border border-green-200\">\n                {analysisMessage}\n              </div>\n            )}\n            \n            <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4\">\n              <SecuritySummaryCard \n                title=\"Problemas Totais\" \n                count={securityData.summary.totalIssues} \n                icon={<AlertTriangle className=\"h-6 w-6 text-red-500\" />} \n                color=\"bg-red-50 border-red-200\"\n              />\n              <SecuritySummaryCard \n                title=\"Security Groups\" \n                count={securityData.summary.securityGroupIssues} \n                icon={<Shield className=\"h-6 w-6 text-orange-500\" />}\n                color=\"bg-orange-50 border-orange-200\" \n              />\n              <SecuritySummaryCard \n                title=\"Network ACLs\" \n                count={securityData.summary.networkAclIssues} \n                icon={<Network className=\"h-6 w-6 text-yellow-500\" />}\n                color=\"bg-yellow-50 border-yellow-200\"\n              />\n              <SecuritySummaryCard \n                title=\"Instâncias\" \n                count={securityData.summary.instanceIssues} \n                icon={<Server className=\"h-6 w-6 text-indigo-500\" />}\n                color=\"bg-indigo-50 border-indigo-200\"\n              />\n              <SecuritySummaryCard \n                title=\"Chaves\" \n                count={securityData.summary.keyPairIssues} \n                icon={<Key className=\"h-6 w-6 text-purple-500\" />}\n                color=\"bg-purple-50 border-purple-200\"\n              />\n              <SecuritySummaryCard \n                title=\"Volumes EBS\" \n                count={securityData.summary.volumeIssues} \n                icon={<Database className=\"h-6 w-6 text-blue-500\" />}\n                color=\"bg-blue-50 border-blue-200\"\n              />\n            </div>\n          </div>\n          \n          {/* Seções de Problemas */}\n          <div className=\"divide-y divide-gray-200\">\n            {/* Security Groups */}\n            <SectionHeader \n              title=\"Security Groups\" \n              count={securityData.summary.securityGroupIssues}\n              icon={<Shield className=\"h-5 w-5 text-orange-500\" />}\n              isExpanded={expandedSection === 'securityGroups'}\n              onClick={() => toggleSection('securityGroups')}\n            />\n            \n            {expandedSection === 'securityGroups' && (\n              <div className=\"p-4\">\n                {securityData.results.securityGroups.map(sg => (\n                  sg.issues.length > 0 && (\n                    <div key={sg.id} className=\"mb-4 border border-gray-200 rounded-md overflow-hidden\">\n                      <div className=\"bg-gray-50 px-4 py-2 flex justify-between items-center\">\n                        <div>\n                          <span className=\"font-medium\">{sg.name}</span>\n                          <span className=\"ml-2 text-xs text-gray-500\">{sg.id}</span>\n                        </div>\n                        <span className=\"text-xs bg-orange-100 text-orange-800 px-2 py-1 rounded-full\">\n                          {sg.issues.length} {sg.issues.length === 1 ? 'problema' : 'problemas'}\n                        </span>\n                      </div>\n                      <div className=\"p-4\">\n                        <ul className=\"space-y-2\">\n                          {sg.issues.map((issue, issueIndex) => (\n                            <li key={issueIndex} className=\"flex items-start gap-2\">\n                              {getSeverityIcon(issue.severity)}\n                              <div>\n                                <div className=\"flex items-center gap-2\">\n                                  <span className=\"text-sm font-medium\">{issue.type}</span>\n                                  <span className={`text-xs px-2 py-0.5 rounded-full ${getSeverityColor(issue.severity)}`}>\n                                    {issue.severity}\n                                  </span>\n                                </div>\n                                <p className=\"text-sm text-gray-600\">{issue.description}</p>\n                                <div className=\"mt-1 text-xs text-gray-500 bg-gray-50 p-2 rounded\">\n                                  <div>Protocolo: {issue.affectedRule.protocol === '-1' ? 'Todos' : issue.affectedRule.protocol}</div>\n                                  <div>Portas: {issue.affectedRule.fromPort === 0 && issue.affectedRule.toPort === 65535 \n                                    ? 'Todas (0-65535)' \n                                    : `${issue.affectedRule.fromPort}-${issue.affectedRule.toPort}`}\n                                  </div>\n                                  <div>\n                                    CIDRs: \n                                    {issue.affectedRule.ipRanges.map(range => range.cidr).join(', ')}\n                                    {issue.affectedRule.ipv6Ranges.length > 0 && ', '}\n                                    {issue.affectedRule.ipv6Ranges.map(range => range.cidr).join(', ')}\n                                  </div>\n                                </div>\n                              </div>\n                            </li>\n                          ))}\n                        </ul>\n                      </div>\n                    </div>\n                  )\n                ))}\n                {securityData.results.securityGroups.every(sg => sg.issues.length === 0) && (\n                  <div className=\"p-4 bg-green-50 text-green-800 rounded flex items-center\">\n                    <CheckCircle className=\"h-5 w-5 mr-2\" />\n                    Nenhum problema encontrado em Security Groups\n                  </div>\n                )}\n              </div>\n            )}\n            \n            {/* Network ACLs */}\n            <SectionHeader \n              title=\"Network ACLs\" \n              count={securityData.summary.networkAclIssues}\n              icon={<Network className=\"h-5 w-5 text-yellow-500\" />}\n              isExpanded={expandedSection === 'networkAcls'}\n              onClick={() => toggleSection('networkAcls')}\n            />\n            \n            {expandedSection === 'networkAcls' && (\n              <div className=\"p-4\">\n                {securityData.results.networkAcls.map(acl => (\n                  acl.issues.length > 0 && (\n                    <div key={acl.id} className=\"mb-4 border border-gray-200 rounded-md overflow-hidden\">\n                      <div className=\"bg-gray-50 px-4 py-2 flex justify-between items-center\">\n                        <div>\n                          <span className=\"font-medium\">{acl.id}</span>\n                          <span className=\"ml-2 text-xs text-gray-500\">VPC: {acl.vpcId}</span>\n                          {acl.default && <span className=\"ml-2 text-xs bg-blue-100 text-blue-800 px-2 py-0.5 rounded-full\">Default</span>}\n                        </div>\n                        <span className=\"text-xs bg-yellow-100 text-yellow-800 px-2 py-1 rounded-full\">\n                          {acl.issues.length} {acl.issues.length === 1 ? 'problema' : 'problemas'}\n                        </span>\n                      </div>\n                      <div className=\"p-4\">\n                        <ul className=\"space-y-2\">\n                          {acl.issues.map((issue, issueIndex) => (\n                            <li key={issueIndex} className=\"flex items-start gap-2\">\n                              {getSeverityIcon(issue.severity)}\n                              <div>\n                                <div className=\"flex items-center gap-2\">\n                                  <span className=\"text-sm font-medium\">{issue.type}</span>\n                                  <span className={`text-xs px-2 py-0.5 rounded-full ${getSeverityColor(issue.severity)}`}>\n                                    {issue.severity}\n                                  </span>\n                                </div>\n                                <p className=\"text-sm text-gray-600\">{issue.description}</p>\n                                <div className=\"mt-1 text-xs text-gray-500 bg-gray-50 p-2 rounded\">\n                                  <div>Regra #: {issue.affectedRule.ruleNumber}</div>\n                                  <div>Ação: {issue.affectedRule.action}</div>\n                                  <div>Protocolo: {issue.affectedRule.protocol === '-1' ? 'Todos' : issue.affectedRule.protocol}</div>\n                                  <div>CIDR: {issue.affectedRule.cidrBlock}</div>\n                                </div>\n                              </div>\n                            </li>\n                          ))}\n                        </ul>\n                      </div>\n                    </div>\n                  )\n                ))}\n                {securityData.results.networkAcls.every(acl => acl.issues.length === 0) && (\n                  <div className=\"p-4 bg-green-50 text-green-800 rounded flex items-center\">\n                    <CheckCircle className=\"h-5 w-5 mr-2\" />\n                    Nenhum problema encontrado em Network ACLs\n                  </div>\n                )}\n              </div>\n            )}\n            \n            {/* Instâncias EC2 */}\n            <SectionHeader \n              title=\"Instâncias EC2\" \n              count={securityData.summary.instanceIssues}\n              icon={<Server className=\"h-5 w-5 text-indigo-500\" />}\n              isExpanded={expandedSection === 'instances'}\n              onClick={() => toggleSection('instances')}\n            />\n            \n            {expandedSection === 'instances' && (\n              <div className=\"p-4\">\n                {securityData.results.instances.map(instance => (\n                  instance.issues.length > 0 && (\n                    <div key={instance.id} className=\"mb-4 border border-gray-200 rounded-md overflow-hidden\">\n                      <div className=\"bg-gray-50 px-4 py-2 flex justify-between items-center\">\n                        <div>\n                          <span className=\"font-medium\">{instance.id}</span>\n                          <span className=\"ml-2 text-xs text-gray-500\">{instance.type}</span>\n                        </div>\n                        <span className=\"text-xs bg-indigo-100 text-indigo-800 px-2 py-1 rounded-full\">\n                          {instance.issues.length} {instance.issues.length === 1 ? 'problema' : 'problemas'}\n                        </span>\n                      </div>\n                      <div className=\"p-4\">\n                        <ul className=\"space-y-2\">\n                          {instance.issues.map((issue, issueIndex) => (\n                            <li key={issueIndex} className=\"flex items-start gap-2\">\n                              {getSeverityIcon(issue.severity)}\n                              <div>\n                                <div className=\"flex items-center gap-2\">\n                                  <span className=\"text-sm font-medium\">{issue.type}</span>\n                                  <span className={`text-xs px-2 py-0.5 rounded-full ${getSeverityColor(issue.severity)}`}>\n                                    {issue.severity}\n                                  </span>\n                                </div>\n                                <p className=\"text-sm text-gray-600\">{issue.description}</p>\n                              </div>\n                            </li>\n                          ))}\n                        </ul>\n                      </div>\n                    </div>\n                  )\n                ))}\n                {securityData.results.instances.every(instance => instance.issues.length === 0) && (\n                  <div className=\"p-4 bg-green-50 text-green-800 rounded flex items-center\">\n                    <CheckCircle className=\"h-5 w-5 mr-2\" />\n                    Nenhum problema encontrado em Instâncias EC2\n                  </div>\n                )}\n              </div>\n            )}\n            \n            {/* Key Pairs */}\n            <SectionHeader \n              title=\"Chaves de Acesso (Key Pairs)\" \n              count={securityData.summary.keyPairIssues}\n              icon={<Key className=\"h-5 w-5 text-purple-500\" />}\n              isExpanded={expandedSection === 'keyPairs'}\n              onClick={() => toggleSection('keyPairs')}\n            />\n            \n            {expandedSection === 'keyPairs' && (\n              <div className=\"p-4\">\n                {securityData.results.keyPairs.map(keyPair => (\n                  keyPair.issues.length > 0 && (\n                    <div key={keyPair.name} className=\"mb-4 border border-gray-200 rounded-md overflow-hidden\">\n                      <div className=\"bg-gray-50 px-4 py-2 flex justify-between items-center\">\n                        <div>\n                          <span className=\"font-medium\">{keyPair.name}</span>\n                        </div>\n                        <span className=\"text-xs bg-purple-100 text-purple-800 px-2 py-1 rounded-full\">\n                          {keyPair.issues.length} {keyPair.issues.length === 1 ? 'problema' : 'problemas'}\n                        </span>\n                      </div>\n                      <div className=\"p-4\">\n                        <ul className=\"space-y-2\">\n                          {keyPair.issues.map((issue, issueIndex) => (\n                            <li key={issueIndex} className=\"flex items-start gap-2\">\n                              {getSeverityIcon(issue.severity)}\n                              <div>\n                                <div className=\"flex items-center gap-2\">\n                                  <span className=\"text-sm font-medium\">{issue.type}</span>\n                                  <span className={`text-xs px-2 py-0.5 rounded-full ${getSeverityColor(issue.severity)}`}>\n                                    {issue.severity}\n                                  </span>\n                                </div>\n                                <p className=\"text-sm text-gray-600\">{issue.description}</p>\n                              </div>\n                            </li>\n                          ))}\n                        </ul>\n                      </div>\n                    </div>\n                  )\n                ))}\n                {securityData.results.keyPairs.every(keyPair => keyPair.issues.length === 0) && (\n                  <div className=\"p-4 bg-green-50 text-green-800 rounded flex items-center\">\n                    <CheckCircle className=\"h-5 w-5 mr-2\" />\n                    Nenhum problema encontrado em Chaves de Acesso\n                  </div>\n                )}\n              </div>\n            )}\n            \n            {/* Volumes EBS */}\n            <SectionHeader \n              title=\"Volumes EBS\" \n              count={securityData.summary.volumeIssues}\n              icon={<Database className=\"h-5 w-5 text-blue-500\" />}\n              isExpanded={expandedSection === 'volumes'}\n              onClick={() => toggleSection('volumes')}\n            />\n            \n            {expandedSection === 'volumes' && (\n              <div className=\"p-4\">\n                {securityData.results.volumes.map(volume => (\n                  volume.issues.length > 0 && (\n                    <div key={volume.id} className=\"mb-4 border border-gray-200 rounded-md overflow-hidden\">\n                      <div className=\"bg-gray-50 px-4 py-2 flex justify-between items-center\">\n                        <div>\n                          <span className=\"font-medium\">{volume.id}</span>\n                          <span className=\"ml-2 text-xs text-gray-500\">\n                            {volume.size} GB, {volume.type}\n                            {volume.instanceId && `, anexado a ${volume.instanceId}`}\n                          </span>\n                        </div>\n                        <span className=\"text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded-full\">\n                          {volume.issues.length} {volume.issues.length === 1 ? 'problema' : 'problemas'}\n                        </span>\n                      </div>\n                      <div className=\"p-4\">\n                        <ul className=\"space-y-2\">\n                          {volume.issues.map((issue, issueIndex) => (\n                            <li key={issueIndex} className=\"flex items-start gap-2\">\n                              {getSeverityIcon(issue.severity)}\n                              <div>\n                                <div className=\"flex items-center gap-2\">\n                                  <span className=\"text-sm font-medium\">{issue.type}</span>\n                                  <span className={`text-xs px-2 py-0.5 rounded-full ${getSeverityColor(issue.severity)}`}>\n                                    {issue.severity}\n                                  </span>\n                                </div>\n                                <p className=\"text-sm text-gray-600\">{issue.description}</p>\n                              </div>\n                            </li>\n                          ))}\n                        </ul>\n                      </div>\n                    </div>\n                  )\n                ))}\n                {securityData.results.volumes.every(volume => volume.issues.length === 0) && (\n                  <div className=\"p-4 bg-green-50 text-green-800 rounded flex items-center\">\n                    <CheckCircle className=\"h-5 w-5 mr-2\" />\n                    Nenhum problema encontrado em Volumes EBS\n                  </div>\n                )}\n              </div>\n            )}\n            \n            {/* IAM Roles */}\n            <SectionHeader \n              title=\"IAM Roles\" \n              count={securityData.summary.iamRoleIssues}\n              icon={<Users className=\"h-5 w-5 text-green-500\" />}\n              isExpanded={expandedSection === 'iamRoles'}\n              onClick={() => toggleSection('iamRoles')}\n            />\n            \n            {expandedSection === 'iamRoles' && (\n              <div className=\"p-4\">\n                {securityData.results.iamRoles.map(role => (\n                  role.issues.length > 0 && (\n                    <div key={role.name} className=\"mb-4 border border-gray-200 rounded-md overflow-hidden\">\n                      <div className=\"bg-gray-50 px-4 py-2 flex justify-between items-center\">\n                        <div>\n                          <span className=\"font-medium\">{role.name}</span>\n                          <span className=\"ml-2 text-xs text-gray-500\">\n                            {role.instanceProfiles.length} {role.instanceProfiles.length === 1 ? 'instância' : 'instâncias'}\n                          </span>\n                        </div>\n                        <span className=\"text-xs bg-green-100 text-green-800 px-2 py-1 rounded-full\">\n                          {role.issues.length} {role.issues.length === 1 ? 'problema' : 'problemas'}\n                        </span>\n                      </div>\n                      <div className=\"p-4\">\n                        <ul className=\"space-y-2\">\n                          {role.issues.map((issue, issueIndex) => (\n                            <li key={issueIndex} className=\"flex items-start gap-2\">\n                              {getSeverityIcon(issue.severity)}\n                              <div>\n                                <div className=\"flex items-center gap-2\">\n                                  <span className=\"text-sm font-medium\">{issue.type}</span>\n                                  <span className={`text-xs px-2 py-0.5 rounded-full ${getSeverityColor(issue.severity)}`}>\n                                    {issue.severity}\n                                  </span>\n                                </div>\n                                <p className=\"text-sm text-gray-600\">{issue.description}</p>\n                              </div>\n                            </li>\n                          ))}\n                        </ul>\n                      </div>\n                    </div>\n                  )\n                ))}\n                {securityData.results.iamRoles.every(role => role.issues.length === 0) && (\n                  <div className=\"p-4 bg-green-50 text-green-800 rounded flex items-center\">\n                    <CheckCircle className=\"h-5 w-5 mr-2\" />\n                    Nenhum problema encontrado em IAM Roles\n                  </div>\n                )}\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n    </motion.div>\n  );\n}\n\n// Componente para os cards de resumo de segurança\ninterface SecuritySummaryCardProps {\n  title: string;\n  count: number;\n  icon: React.ReactNode;\n  color: string;\n}\n\nfunction SecuritySummaryCard({ title, count, icon, color }: SecuritySummaryCardProps) {\n  return (\n    <div className={`p-4 border rounded-lg ${color}`}>\n      <div className=\"flex items-center justify-between mb-2\">\n        <h3 className=\"text-sm font-medium text-gray-700\">{title}</h3>\n        {icon}\n      </div>\n      <p className=\"text-2xl font-bold\">{count}</p>\n    </div>\n  );\n}\n\n// Componente para cabeçalhos de seção\ninterface SectionHeaderProps {\n  title: string;\n  count: number;\n  icon: React.ReactNode;\n  isExpanded: boolean;\n  onClick: () => void;\n}\n\nfunction SectionHeader({ title, count, icon, isExpanded, onClick }: SectionHeaderProps) {\n  return (\n    <button\n      className=\"w-full px-6 py-4 flex items-center justify-between hover:bg-gray-50 transition-colors\"\n      onClick={onClick}\n    >\n      <div className=\"flex items-center\">\n        {icon}\n        <h2 className=\"ml-2 text-base font-medium text-gray-900\">{title}</h2>\n        {count > 0 && (\n          <span className=\"ml-2 px-2 py-0.5 bg-red-100 text-red-800 text-xs rounded-full\">\n            {count}\n          </span>\n        )}\n      </div>\n      <svg\n        className={`h-5 w-5 text-gray-500 transform transition-transform ${isExpanded ? 'rotate-180' : ''}`}\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox=\"0 0 20 20\"\n        fill=\"currentColor\"\n      >\n        <path fillRule=\"evenodd\" d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\" clipRule=\"evenodd\" />\n      </svg>\n    </button>\n  );\n} "],"names":[],"mappings":";;;;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AANA;;;;;;AAkKe,SAAS;;IACtB,MAAM,EAAE,kBAAkB,EAAE,GAAG,CAAA,GAAA,oIAAA,CAAA,oBAAiB,AAAD;IAC/C,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAiB,EAAE;IAC5D,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAA0B;IACzE,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACvC,MAAM,CAAC,iBAAiB,mBAAmB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACvD,MAAM,CAAC,mBAAmB,qBAAqB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAC3D,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAiB;IAClD,MAAM,CAAC,eAAe,iBAAiB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAiB;IAClE,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAA4B;IACrE,MAAM,CAAC,kBAAkB,oBAAoB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAiB;IACxE,MAAM,CAAC,eAAe,iBAAiB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAe;IAEhE,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;6BAAE;YACR,4CAA4C;YAC5C,IAAI,CAAC,oBAAoB;YAEzB,4DAA4D;YAC5D,IAAI;gBACF,MAAM,iBAAiB,aAAa,OAAO,CAAC;gBAC5C,MAAM,gBAAgB,aAAa,OAAO,CAAC;gBAC3C,MAAM,qBAAqB,aAAa,OAAO,CAAC;gBAEhD,IAAI,kBAAkB,uBAAuB,mBAAmB,EAAE,EAAE;oBAClE,MAAM,kBAAkB,KAAK,KAAK,CAAC;oBACnC,aAAa;oBACb,WAAW;gBACb;gBAEA,IAAI,iBAAiB,uBAAuB,mBAAmB,EAAE,EAAE;oBACjE,MAAM,qBAAqB,KAAK,KAAK,CAAC;oBACtC,gBAAgB;oBAChB,mBAAmB;gBACrB;gBAEA,oBAAoB,mBAAmB,EAAE;gBAEzC,yBAAyB;gBACzB,IAAI,uBAAuB,mBAAmB,EAAE,EAAE;oBAChD;oBACA;gBACF,OAAO;oBACL;oBACA;gBACF;YACF,EAAE,OAAO,OAAO;gBACd,QAAQ,KAAK,CAAC,4BAA4B;gBAC1C;gBACA;YACF;QACF;4BAAG;QAAC;KAAmB;IAEvB,oDAAoD;IACpD,eAAe;QACb,IAAI,CAAC,oBAAoB;YACvB,WAAW;YACX;QACF;QAEA,IAAI;YACF,WAAW;YACX,SAAS;YAET,QAAQ,GAAG,CAAC,CAAC,yCAAyC,EAAE,mBAAmB,EAAE,EAAE;YAC/E,MAAM,WAAW,MAAM,MAAM,CAAC,gCAAgC,EAAE,mBAAmB,EAAE,CAAC,SAAS,CAAC;YAEhG,IAAI,CAAC,SAAS,EAAE,EAAE;gBAChB,MAAM,YAAY,MAAM,SAAS,IAAI;gBACrC,MAAM,IAAI,MAAM,UAAU,KAAK,IAAI;YACrC;YAEA,MAAM,OAAO,MAAM,SAAS,IAAI;YAChC,QAAQ,GAAG,CAAC,oBAAoB;YAChC,aAAa,KAAK,SAAS,IAAI,EAAE;YACjC,iBAAiB,IAAI;YAErB,qBAAqB;YACrB,aAAa,OAAO,CAAC,gBAAgB,KAAK,SAAS,CAAC,KAAK,SAAS,IAAI,EAAE;YACxE,aAAa,OAAO,CAAC,uBAAuB,mBAAmB,EAAE;QACnE,EAAE,OAAO,KAAK;YACZ,QAAQ,KAAK,CAAC,8BAA8B;YAC5C,SAAS,eAAe,QAAQ,IAAI,OAAO,GAAG;QAChD,SAAU;YACR,WAAW;QACb;IACF;IAEA,4DAA4D;IAC5D,eAAe;QACb,IAAI,CAAC,oBAAoB;YACvB,mBAAmB;YACnB;QACF;QAEA,IAAI;YACF,mBAAmB;YACnB,iBAAiB;YAEjB,QAAQ,GAAG,CAAC,CAAC,oDAAoD,EAAE,mBAAmB,EAAE,EAAE;YAC1F,MAAM,WAAW,MAAM,MAAM,CAAC,mCAAmC,EAAE,mBAAmB,EAAE,EAAE;YAE1F,IAAI,CAAC,SAAS,EAAE,EAAE;gBAChB,MAAM,YAAY,MAAM,SAAS,IAAI;gBACrC,MAAM,IAAI,MAAM,UAAU,KAAK,IAAI;YACrC;YAEA,MAAM,OAAO,MAAM,SAAS,IAAI;YAChC,QAAQ,GAAG,CAAC,iCAAiC;YAC7C,gBAAgB;YAChB,iBAAiB,IAAI;YAErB,qBAAqB;YACrB,aAAa,OAAO,CAAC,mBAAmB,KAAK,SAAS,CAAC;YACvD,aAAa,OAAO,CAAC,uBAAuB,mBAAmB,EAAE;QACnE,EAAE,OAAO,KAAK;YACZ,QAAQ,KAAK,CAAC,sCAAsC;YACpD,iBAAiB,eAAe,QAAQ,IAAI,OAAO,GAAG;QACxD,SAAU;YACR,mBAAmB;QACrB;IACF;IAEA,gFAAgF;IAChF,eAAe;QACb,IAAI,CAAC,oBAAoB;QAEzB,IAAI;YACF,qBAAqB;YAErB,QAAQ,GAAG,CAAC,CAAC,0DAA0D,EAAE,mBAAmB,EAAE,EAAE;YAChG,MAAM,WAAW,MAAM,MAAM,CAAC,gCAAgC,EAAE,mBAAmB,EAAE,CAAC,SAAS,CAAC;YAEhG,IAAI,CAAC,SAAS,EAAE,EAAE;gBAChB,MAAM,IAAI,MAAM;YAClB;YAEA,MAAM,OAAO,MAAM,SAAS,IAAI;YAChC,aAAa,KAAK,SAAS,IAAI,EAAE;YAEjC,kBAAkB;YAClB,aAAa,OAAO,CAAC,gBAAgB,KAAK,SAAS,CAAC,KAAK,SAAS,IAAI,EAAE;YACxE,aAAa,OAAO,CAAC,uBAAuB,mBAAmB,EAAE;YAEjE,QAAQ,GAAG,CAAC;QACd,EAAE,OAAO,KAAK;YACZ,QAAQ,KAAK,CAAC,qDAAqD;QACnE,kDAAkD;QACpD,SAAU;YACR,qBAAqB;QACvB;IACF;IAEA,eAAe;QACb,IAAI,CAAC,oBAAoB;QAEzB,IAAI;YACF,qBAAqB;YAErB,QAAQ,GAAG,CAAC,CAAC,kEAAkE,EAAE,mBAAmB,EAAE,EAAE;YACxG,MAAM,WAAW,MAAM,MAAM,CAAC,mCAAmC,EAAE,mBAAmB,EAAE,EAAE;YAE1F,IAAI,CAAC,SAAS,EAAE,EAAE;gBAChB,MAAM,IAAI,MAAM;YAClB;YAEA,MAAM,OAAO,MAAM,SAAS,IAAI;YAChC,gBAAgB;YAEhB,kBAAkB;YAClB,aAAa,OAAO,CAAC,mBAAmB,KAAK,SAAS,CAAC;YACvD,aAAa,OAAO,CAAC,uBAAuB,mBAAmB,EAAE;YAEjE,QAAQ,GAAG,CAAC;QACd,EAAE,OAAO,KAAK;YACZ,QAAQ,KAAK,CAAC,6DAA6D;QAC3E,kDAAkD;QACpD,SAAU;YACR,qBAAqB;QACvB;IACF;IAEA,yDAAyD;IACzD,MAAM,gBAAgB,CAAC;QACrB,OAAQ,OAAO;YACb,KAAK;gBACH,OAAO;YACT,KAAK;gBACH,OAAO;YACT,KAAK;gBACH,OAAO;YACT,KAAK;gBACH,OAAO;YACT,KAAK;gBACH,OAAO;YACT;gBACE,OAAO;QACX;IACF;IAEA,gDAAgD;IAChD,MAAM,mBAAmB,CAAC;QACxB,OAAQ;YACN,KAAK;gBACH,OAAO;YACT,KAAK;gBACH,OAAO;YACT,KAAK;gBACH,OAAO;YACT,KAAK;gBACH,OAAO;YACT;gBACE,OAAO;QACX;IACF;IAEA,kDAAkD;IAClD,MAAM,kBAAkB,CAAC;QACvB,OAAQ;YACN,KAAK;gBACH,qBAAO,6LAAC,uNAAA,CAAA,cAAW;oBAAC,WAAU;;;;;;YAChC,KAAK;gBACH,qBAAO,6LAAC,2NAAA,CAAA,gBAAa;oBAAC,WAAU;;;;;;YAClC,KAAK;gBACH,qBAAO,6LAAC,2NAAA,CAAA,gBAAa;oBAAC,WAAU;;;;;;YAClC,KAAK;gBACH,qBAAO,6LAAC,qMAAA,CAAA,OAAI;oBAAC,WAAU;;;;;;YACzB;gBACE,qBAAO,6LAAC,qMAAA,CAAA,OAAI;oBAAC,WAAU;;;;;;QAC3B;IACF;IAEA,qBACE,6LAAC;;0BACC,6LAAC,6LAAA,CAAA,SAAM,CAAC,GAAG;gBACT,WAAU;gBACV,SAAS;oBAAE,SAAS;oBAAG,GAAG,CAAC;gBAAG;gBAC9B,SAAS;oBAAE,SAAS;oBAAG,GAAG;gBAAE;gBAC5B,YAAY;oBAAE,UAAU;gBAAI;;kCAE5B,6LAAC;wBAAI,WAAU;;0CACb,6LAAC,yMAAA,CAAA,SAAM;gCAAC,WAAU;;;;;;0CAClB,6LAAC;gCAAG,WAAU;0CAAmC;;;;;;;;;;;;kCAEnD,6LAAC;wBAAE,WAAU;kCAAqB;;;;;;;;;;;;0BAKpC,6LAAC,kJAAA,CAAA,UAAkB;;;;;0BAGnB,6LAAC;gBAAI,WAAU;0BACb,cAAA,6LAAC;oBAAI,WAAU;;sCACb,6LAAC;4BACC,SAAS;gCACP,IAAI,oBAAoB;oCACtB,cAAc,cAAc,mBAAmB;gCACjD;4BACF;4BACA,UAAU,CAAC,sBAAsB,CAAC,cAAc,cAAc,UAAU,eAAe;4BACvF,WAAU;;gCAET,CAAC,cAAc,cAAc,UAAU,eAAe,kBACrD,6LAAC,mNAAA,CAAA,YAAS;oCAAC,WAAU;;;;;yDAErB,6LAAC,mNAAA,CAAA,YAAS;oCAAC,WAAU;;;;;;gCACrB;;;;;;;wBAGH,+BACC,6LAAC;4BAAK,WAAU;;gCAA6B;gCACtB,cAAc,cAAc;;;;;;;;;;;;;;;;;;0BAOzD,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBACC,WAAW,CAAC,sDAAsD,EAChE,cAAc,cACV,iDACA,qCACJ;wBACF,SAAS,IAAM,aAAa;;0CAE5B,6LAAC,yMAAA,CAAA,SAAM;gCAAC,WAAU;;;;;;4BAAY;;;;;;;kCAGhC,6LAAC;wBACC,WAAW,CAAC,sDAAsD,EAChE,cAAc,aACV,iDACA,qCACJ;wBACF,SAAS,IAAM,aAAa;;0CAE5B,6LAAC,yMAAA,CAAA,SAAM;gCAAC,WAAU;;;;;;4BAAY;;;;;;;;;;;;;YAMjC,cAAc,4BACb,6LAAC;gBACC,WAAW;gBACX,SAAS;gBACT,OAAO;gBACP,oBAAoB;gBACpB,eAAe;gBACf,WAAW;;;;;qCAGb,6LAAC;gBACC,cAAc;gBACd,SAAS;gBACT,OAAO;gBACP,oBAAoB;gBACpB,kBAAkB;gBAClB,iBAAiB;gBACjB,WAAW;;;;;;;;;;;;AAKrB;GAtUwB;;QACS,oIAAA,CAAA,oBAAiB;;;KAD1B;AAkVxB,SAAS,aAAa,EACpB,SAAS,EACT,OAAO,EACP,KAAK,EACL,kBAAkB,EAClB,aAAa,EACb,SAAS,EACS;IAClB,qBACE,6LAAC,6LAAA,CAAA,SAAM,CAAC,GAAG;QACT,WAAU;QACV,SAAS;YAAE,SAAS;YAAG,GAAG;QAAG;QAC7B,SAAS;YAAE,SAAS;YAAG,GAAG;QAAE;QAC5B,YAAY;YAAE,UAAU;QAAI;kBAE3B,CAAC,mCACA,6LAAC;YAAI,WAAU;sBACb,cAAA,6LAAC;gBAAE,WAAU;0BAAgB;;;;;;;;;;mBAE7B,wBACF,6LAAC;YAAI,WAAU;sBACb,cAAA,6LAAC;gBAAI,WAAU;;;;;;;;;;mBAEf,sBACF,6LAAC;YAAI,WAAU;sBACb,cAAA,6LAAC;gBAAE,WAAU;0BAAgB;;;;;;;;;;mBAE7B,UAAU,MAAM,KAAK,kBACvB,6LAAC;YAAI,WAAU;;8BACb,6LAAC;oBAAE,WAAU;;wBAAgB;wBAA4C,mBAAmB,MAAM;wBAAC;;;;;;;8BACnG,6LAAC;oBAAE,WAAU;8BAA6B;;;;;;;;;;;iCAK5C,6LAAC;;8BACC,6LAAC;oBAAI,WAAU;;sCACb,6LAAC;4BAAG,WAAU;;gCACX,UAAU,MAAM;gCAAC;gCAAE,UAAU,MAAM,KAAK,IAAI,cAAc;gCAAa;;;;;;;sCAE1E,6LAAC;4BAAI,WAAU;;8CACb,6LAAC;oCACC,SAAS;oCACT,UAAU;oCACV,WAAU;;wCAET,wBACC,6LAAC,mNAAA,CAAA,YAAS;4CAAC,WAAU;;;;;iEAErB,6LAAC,mNAAA,CAAA,YAAS;4CAAC,WAAU;;;;;;wCACrB;;;;;;;8CAGJ,6LAAC;oCAAK,WAAU;;wCAAwB;wCAC7B,mBAAmB,MAAM;;;;;;;;;;;;;;;;;;;8BAKxC,6LAAC;oBAAI,WAAU;8BACb,cAAA,6LAAC;wBAAM,WAAU;;0CACf,6LAAC;gCAAM,WAAU;0CACf,cAAA,6LAAC;;sDACC,6LAAC;4CAAG,OAAM;4CAAM,WAAU;sDAAiF;;;;;;sDAG3G,6LAAC;4CAAG,OAAM;4CAAM,WAAU;sDAAiF;;;;;;sDAG3G,6LAAC;4CAAG,OAAM;4CAAM,WAAU;sDAAiF;;;;;;sDAG3G,6LAAC;4CAAG,OAAM;4CAAM,WAAU;sDAAiF;;;;;;sDAG3G,6LAAC;4CAAG,OAAM;4CAAM,WAAU;sDAAiF;;;;;;sDAG3G,6LAAC;4CAAG,OAAM;4CAAM,WAAU;sDAAiF;;;;;;;;;;;;;;;;;0CAK/G,6LAAC;gCAAM,WAAU;0CACd,UAAU,GAAG,CAAC,CAAC,yBACd,6LAAC;wCAAqB,WAAU;;0DAC9B,6LAAC;gDAAG,WAAU;0DACX,SAAS,EAAE;;;;;;0DAEd,6LAAC;gDAAG,WAAU;0DACX,SAAS,IAAI;;;;;;0DAEhB,6LAAC;gDAAG,WAAU;0DACZ,cAAA,6LAAC;oDAAK,WAAW,CAAC,8DAA8D,EAAE,cAAc,SAAS,KAAK,GAAG;8DAC9G,SAAS,KAAK;;;;;;;;;;;0DAGnB,6LAAC;gDAAG,WAAU;0DACX,SAAS,QAAQ,IAAI;;;;;;0DAExB,6LAAC;gDAAG,WAAU;0DACX,SAAS,SAAS,IAAI;;;;;;0DAEzB,6LAAC;gDAAG,WAAU;0DACX,SAAS,UAAU,GAAG,IAAI,KAAK,SAAS,UAAU,EAAE,cAAc,KAAK;;;;;;;uCAnBnE,SAAS,EAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BtC;MAnHS;AAgIT,SAAS,YAAY,EACnB,YAAY,EACZ,OAAO,EACP,KAAK,EACL,kBAAkB,EAClB,gBAAgB,EAChB,eAAe,EACf,SAAS,EACQ;;IACjB,MAAM,CAAC,iBAAiB,mBAAmB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAiB;IACtE,MAAM,CAAC,mBAAmB,qBAAqB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAC3D,MAAM,CAAC,iBAAiB,mBAAmB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAiB;IAEtE,MAAM,gBAAgB,CAAC;QACrB,IAAI,oBAAoB,SAAS;YAC/B,mBAAmB;QACrB,OAAO;YACL,mBAAmB;QACrB;IACF;IAEA,MAAM,yBAAyB;QAC7B,IAAI,CAAC,oBAAoB;QAEzB,IAAI;YACF,qBAAqB;YACrB,mBAAmB;YAEnB,MAAM,WAAW,MAAM,MAAM,CAAC,mCAAmC,EAAE,mBAAmB,EAAE,CAAC,4BAA4B,CAAC;YAEtH,IAAI,CAAC,SAAS,EAAE,EAAE;gBAChB,MAAM,YAAY,MAAM,SAAS,IAAI;gBACrC,MAAM,IAAI,MAAM,UAAU,KAAK,IAAI;YACrC;YAEA,MAAM,OAAO,MAAM,SAAS,IAAI;YAChC,mBAAmB,GAAG,KAAK,OAAO,CAAC,WAAW,CAAC,6DAA6D,CAAC;QAC/G,EAAE,OAAO,KAAK;YACZ,QAAQ,KAAK,CAAC,6CAA6C;YAC3D,mBAAmB,eAAe,QAAQ,IAAI,OAAO,GAAG;QAC1D,SAAU;YACR,qBAAqB;QACvB;IACF;IAEA,qBACE,6LAAC,6LAAA,CAAA,SAAM,CAAC,GAAG;QACT,WAAU;QACV,SAAS;YAAE,SAAS;YAAG,GAAG;QAAG;QAC7B,SAAS;YAAE,SAAS;YAAG,GAAG;QAAE;QAC5B,YAAY;YAAE,UAAU;QAAI;kBAE3B,CAAC,mCACA,6LAAC;YAAI,WAAU;sBACb,cAAA,6LAAC;gBAAE,WAAU;0BAAgB;;;;;;;;;;mBAE7B,wBACF,6LAAC;YAAI,WAAU;;8BACb,6LAAC,mNAAA,CAAA,YAAS;oBAAC,WAAU;;;;;;8BACrB,6LAAC;oBAAE,WAAU;8BAAgB;;;;;;8BAC7B,6LAAC;oBAAE,WAAU;8BAA6B;;;;;;;;;;;mBAE1C,sBACF,6LAAC;YAAI,WAAU;sBACb,cAAA,6LAAC;gBAAE,WAAU;0BAAgB;;;;;;;;;;mBAE7B,CAAC,6BACH,6LAAC;YAAI,WAAU;sBACb,cAAA,6LAAC;gBAAE,WAAU;0BAAgB;;;;;;;;;;iCAG/B,6LAAC;;8BAEC,6LAAC;oBAAI,WAAU;;sCACb,6LAAC;4BAAI,WAAU;;8CACb,6LAAC;oCAAG,WAAU;;sDACZ,6LAAC,yMAAA,CAAA,SAAM;4CAAC,WAAU;;;;;;wCAAiC;;;;;;;8CAGrD,6LAAC;oCAAI,WAAU;;sDACb,6LAAC;4CACC,SAAS;4CACT,UAAU;4CACV,WAAU;;gDAET,wBACC,6LAAC,mNAAA,CAAA,YAAS;oDAAC,WAAU;;;;;yEAErB,6LAAC,mNAAA,CAAA,YAAS;oDAAC,WAAU;;;;;;gDACrB;;;;;;;sDAGJ,6LAAC;4CACC,SAAS;4CACT,UAAU,qBAAqB,aAAa,OAAO,CAAC,WAAW,KAAK;4CACpE,WAAU;sDAET,kCACC;;kEACE,6LAAC,mNAAA,CAAA,YAAS;wDAAC,WAAU;;;;;;oDAAyB;;6EAIhD;;kEACE,6LAAC,yMAAA,CAAA,SAAM;wDAAC,WAAU;;;;;;oDAAY;;;;;;;;sDAKpC,6LAAC;4CAAK,WAAU;;gDAAwB;gDAC7B,mBAAmB,MAAM;;;;;;;;;;;;;;;;;;;wBAKvC,iCACC,6LAAC;4BAAI,WAAU;sCACZ;;;;;;sCAIL,6LAAC;4BAAI,WAAU;;8CACb,6LAAC;oCACC,OAAM;oCACN,OAAO,aAAa,OAAO,CAAC,WAAW;oCACvC,oBAAM,6LAAC,2NAAA,CAAA,gBAAa;wCAAC,WAAU;;;;;;oCAC/B,OAAM;;;;;;8CAER,6LAAC;oCACC,OAAM;oCACN,OAAO,aAAa,OAAO,CAAC,mBAAmB;oCAC/C,oBAAM,6LAAC,yMAAA,CAAA,SAAM;wCAAC,WAAU;;;;;;oCACxB,OAAM;;;;;;8CAER,6LAAC;oCACC,OAAM;oCACN,OAAO,aAAa,OAAO,CAAC,gBAAgB;oCAC5C,oBAAM,6LAAC,2MAAA,CAAA,UAAO;wCAAC,WAAU;;;;;;oCACzB,OAAM;;;;;;8CAER,6LAAC;oCACC,OAAM;oCACN,OAAO,aAAa,OAAO,CAAC,cAAc;oCAC1C,oBAAM,6LAAC,yMAAA,CAAA,SAAM;wCAAC,WAAU;;;;;;oCACxB,OAAM;;;;;;8CAER,6LAAC;oCACC,OAAM;oCACN,OAAO,aAAa,OAAO,CAAC,aAAa;oCACzC,oBAAM,6LAAC,mMAAA,CAAA,MAAG;wCAAC,WAAU;;;;;;oCACrB,OAAM;;;;;;8CAER,6LAAC;oCACC,OAAM;oCACN,OAAO,aAAa,OAAO,CAAC,YAAY;oCACxC,oBAAM,6LAAC,6MAAA,CAAA,WAAQ;wCAAC,WAAU;;;;;;oCAC1B,OAAM;;;;;;;;;;;;;;;;;;8BAMZ,6LAAC;oBAAI,WAAU;;sCAEb,6LAAC;4BACC,OAAM;4BACN,OAAO,aAAa,OAAO,CAAC,mBAAmB;4BAC/C,oBAAM,6LAAC,yMAAA,CAAA,SAAM;gCAAC,WAAU;;;;;;4BACxB,YAAY,oBAAoB;4BAChC,SAAS,IAAM,cAAc;;;;;;wBAG9B,oBAAoB,kCACnB,6LAAC;4BAAI,WAAU;;gCACZ,aAAa,OAAO,CAAC,cAAc,CAAC,GAAG,CAAC,CAAA,KACvC,GAAG,MAAM,CAAC,MAAM,GAAG,mBACjB,6LAAC;wCAAgB,WAAU;;0DACzB,6LAAC;gDAAI,WAAU;;kEACb,6LAAC;;0EACC,6LAAC;gEAAK,WAAU;0EAAe,GAAG,IAAI;;;;;;0EACtC,6LAAC;gEAAK,WAAU;0EAA8B,GAAG,EAAE;;;;;;;;;;;;kEAErD,6LAAC;wDAAK,WAAU;;4DACb,GAAG,MAAM,CAAC,MAAM;4DAAC;4DAAE,GAAG,MAAM,CAAC,MAAM,KAAK,IAAI,aAAa;;;;;;;;;;;;;0DAG9D,6LAAC;gDAAI,WAAU;0DACb,cAAA,6LAAC;oDAAG,WAAU;8DACX,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,OAAO,2BACrB,6LAAC;4DAAoB,WAAU;;gEAC5B,gBAAgB,MAAM,QAAQ;8EAC/B,6LAAC;;sFACC,6LAAC;4EAAI,WAAU;;8FACb,6LAAC;oFAAK,WAAU;8FAAuB,MAAM,IAAI;;;;;;8FACjD,6LAAC;oFAAK,WAAW,CAAC,iCAAiC,EAAE,iBAAiB,MAAM,QAAQ,GAAG;8FACpF,MAAM,QAAQ;;;;;;;;;;;;sFAGnB,6LAAC;4EAAE,WAAU;sFAAyB,MAAM,WAAW;;;;;;sFACvD,6LAAC;4EAAI,WAAU;;8FACb,6LAAC;;wFAAI;wFAAY,MAAM,YAAY,CAAC,QAAQ,KAAK,OAAO,UAAU,MAAM,YAAY,CAAC,QAAQ;;;;;;;8FAC7F,6LAAC;;wFAAI;wFAAS,MAAM,YAAY,CAAC,QAAQ,KAAK,KAAK,MAAM,YAAY,CAAC,MAAM,KAAK,QAC7E,oBACA,GAAG,MAAM,YAAY,CAAC,QAAQ,CAAC,CAAC,EAAE,MAAM,YAAY,CAAC,MAAM,EAAE;;;;;;;8FAEjE,6LAAC;;wFAAI;wFAEF,MAAM,YAAY,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAA,QAAS,MAAM,IAAI,EAAE,IAAI,CAAC;wFAC1D,MAAM,YAAY,CAAC,UAAU,CAAC,MAAM,GAAG,KAAK;wFAC5C,MAAM,YAAY,CAAC,UAAU,CAAC,GAAG,CAAC,CAAA,QAAS,MAAM,IAAI,EAAE,IAAI,CAAC;;;;;;;;;;;;;;;;;;;;2DApB5D;;;;;;;;;;;;;;;;uCAbP,GAAG,EAAE;;;;;gCA4ClB,aAAa,OAAO,CAAC,cAAc,CAAC,KAAK,CAAC,CAAA,KAAM,GAAG,MAAM,CAAC,MAAM,KAAK,oBACpE,6LAAC;oCAAI,WAAU;;sDACb,6LAAC,8NAAA,CAAA,cAAW;4CAAC,WAAU;;;;;;wCAAiB;;;;;;;;;;;;;sCAQhD,6LAAC;4BACC,OAAM;4BACN,OAAO,aAAa,OAAO,CAAC,gBAAgB;4BAC5C,oBAAM,6LAAC,2MAAA,CAAA,UAAO;gCAAC,WAAU;;;;;;4BACzB,YAAY,oBAAoB;4BAChC,SAAS,IAAM,cAAc;;;;;;wBAG9B,oBAAoB,+BACnB,6LAAC;4BAAI,WAAU;;gCACZ,aAAa,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,CAAA,MACpC,IAAI,MAAM,CAAC,MAAM,GAAG,mBAClB,6LAAC;wCAAiB,WAAU;;0DAC1B,6LAAC;gDAAI,WAAU;;kEACb,6LAAC;;0EACC,6LAAC;gEAAK,WAAU;0EAAe,IAAI,EAAE;;;;;;0EACrC,6LAAC;gEAAK,WAAU;;oEAA6B;oEAAM,IAAI,KAAK;;;;;;;4DAC3D,IAAI,OAAO,kBAAI,6LAAC;gEAAK,WAAU;0EAAkE;;;;;;;;;;;;kEAEpG,6LAAC;wDAAK,WAAU;;4DACb,IAAI,MAAM,CAAC,MAAM;4DAAC;4DAAE,IAAI,MAAM,CAAC,MAAM,KAAK,IAAI,aAAa;;;;;;;;;;;;;0DAGhE,6LAAC;gDAAI,WAAU;0DACb,cAAA,6LAAC;oDAAG,WAAU;8DACX,IAAI,MAAM,CAAC,GAAG,CAAC,CAAC,OAAO,2BACtB,6LAAC;4DAAoB,WAAU;;gEAC5B,gBAAgB,MAAM,QAAQ;8EAC/B,6LAAC;;sFACC,6LAAC;4EAAI,WAAU;;8FACb,6LAAC;oFAAK,WAAU;8FAAuB,MAAM,IAAI;;;;;;8FACjD,6LAAC;oFAAK,WAAW,CAAC,iCAAiC,EAAE,iBAAiB,MAAM,QAAQ,GAAG;8FACpF,MAAM,QAAQ;;;;;;;;;;;;sFAGnB,6LAAC;4EAAE,WAAU;sFAAyB,MAAM,WAAW;;;;;;sFACvD,6LAAC;4EAAI,WAAU;;8FACb,6LAAC;;wFAAI;wFAAU,MAAM,YAAY,CAAC,UAAU;;;;;;;8FAC5C,6LAAC;;wFAAI;wFAAO,MAAM,YAAY,CAAC,MAAM;;;;;;;8FACrC,6LAAC;;wFAAI;wFAAY,MAAM,YAAY,CAAC,QAAQ,KAAK,OAAO,UAAU,MAAM,YAAY,CAAC,QAAQ;;;;;;;8FAC7F,6LAAC;;wFAAI;wFAAO,MAAM,YAAY,CAAC,SAAS;;;;;;;;;;;;;;;;;;;;2DAdrC;;;;;;;;;;;;;;;;uCAdP,IAAI,EAAE;;;;;gCAsCnB,aAAa,OAAO,CAAC,WAAW,CAAC,KAAK,CAAC,CAAA,MAAO,IAAI,MAAM,CAAC,MAAM,KAAK,oBACnE,6LAAC;oCAAI,WAAU;;sDACb,6LAAC,8NAAA,CAAA,cAAW;4CAAC,WAAU;;;;;;wCAAiB;;;;;;;;;;;;;sCAQhD,6LAAC;4BACC,OAAM;4BACN,OAAO,aAAa,OAAO,CAAC,cAAc;4BAC1C,oBAAM,6LAAC,yMAAA,CAAA,SAAM;gCAAC,WAAU;;;;;;4BACxB,YAAY,oBAAoB;4BAChC,SAAS,IAAM,cAAc;;;;;;wBAG9B,oBAAoB,6BACnB,6LAAC;4BAAI,WAAU;;gCACZ,aAAa,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,CAAA,WAClC,SAAS,MAAM,CAAC,MAAM,GAAG,mBACvB,6LAAC;wCAAsB,WAAU;;0DAC/B,6LAAC;gDAAI,WAAU;;kEACb,6LAAC;;0EACC,6LAAC;gEAAK,WAAU;0EAAe,SAAS,EAAE;;;;;;0EAC1C,6LAAC;gEAAK,WAAU;0EAA8B,SAAS,IAAI;;;;;;;;;;;;kEAE7D,6LAAC;wDAAK,WAAU;;4DACb,SAAS,MAAM,CAAC,MAAM;4DAAC;4DAAE,SAAS,MAAM,CAAC,MAAM,KAAK,IAAI,aAAa;;;;;;;;;;;;;0DAG1E,6LAAC;gDAAI,WAAU;0DACb,cAAA,6LAAC;oDAAG,WAAU;8DACX,SAAS,MAAM,CAAC,GAAG,CAAC,CAAC,OAAO,2BAC3B,6LAAC;4DAAoB,WAAU;;gEAC5B,gBAAgB,MAAM,QAAQ;8EAC/B,6LAAC;;sFACC,6LAAC;4EAAI,WAAU;;8FACb,6LAAC;oFAAK,WAAU;8FAAuB,MAAM,IAAI;;;;;;8FACjD,6LAAC;oFAAK,WAAW,CAAC,iCAAiC,EAAE,iBAAiB,MAAM,QAAQ,GAAG;8FACpF,MAAM,QAAQ;;;;;;;;;;;;sFAGnB,6LAAC;4EAAE,WAAU;sFAAyB,MAAM,WAAW;;;;;;;;;;;;;2DATlD;;;;;;;;;;;;;;;;uCAbP,SAAS,EAAE;;;;;gCA+BxB,aAAa,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,CAAA,WAAY,SAAS,MAAM,CAAC,MAAM,KAAK,oBAC3E,6LAAC;oCAAI,WAAU;;sDACb,6LAAC,8NAAA,CAAA,cAAW;4CAAC,WAAU;;;;;;wCAAiB;;;;;;;;;;;;;sCAQhD,6LAAC;4BACC,OAAM;4BACN,OAAO,aAAa,OAAO,CAAC,aAAa;4BACzC,oBAAM,6LAAC,mMAAA,CAAA,MAAG;gCAAC,WAAU;;;;;;4BACrB,YAAY,oBAAoB;4BAChC,SAAS,IAAM,cAAc;;;;;;wBAG9B,oBAAoB,4BACnB,6LAAC;4BAAI,WAAU;;gCACZ,aAAa,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAA,UACjC,QAAQ,MAAM,CAAC,MAAM,GAAG,mBACtB,6LAAC;wCAAuB,WAAU;;0DAChC,6LAAC;gDAAI,WAAU;;kEACb,6LAAC;kEACC,cAAA,6LAAC;4DAAK,WAAU;sEAAe,QAAQ,IAAI;;;;;;;;;;;kEAE7C,6LAAC;wDAAK,WAAU;;4DACb,QAAQ,MAAM,CAAC,MAAM;4DAAC;4DAAE,QAAQ,MAAM,CAAC,MAAM,KAAK,IAAI,aAAa;;;;;;;;;;;;;0DAGxE,6LAAC;gDAAI,WAAU;0DACb,cAAA,6LAAC;oDAAG,WAAU;8DACX,QAAQ,MAAM,CAAC,GAAG,CAAC,CAAC,OAAO,2BAC1B,6LAAC;4DAAoB,WAAU;;gEAC5B,gBAAgB,MAAM,QAAQ;8EAC/B,6LAAC;;sFACC,6LAAC;4EAAI,WAAU;;8FACb,6LAAC;oFAAK,WAAU;8FAAuB,MAAM,IAAI;;;;;;8FACjD,6LAAC;oFAAK,WAAW,CAAC,iCAAiC,EAAE,iBAAiB,MAAM,QAAQ,GAAG;8FACpF,MAAM,QAAQ;;;;;;;;;;;;sFAGnB,6LAAC;4EAAE,WAAU;sFAAyB,MAAM,WAAW;;;;;;;;;;;;;2DATlD;;;;;;;;;;;;;;;;uCAZP,QAAQ,IAAI;;;;;gCA8BzB,aAAa,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAA,UAAW,QAAQ,MAAM,CAAC,MAAM,KAAK,oBACxE,6LAAC;oCAAI,WAAU;;sDACb,6LAAC,8NAAA,CAAA,cAAW;4CAAC,WAAU;;;;;;wCAAiB;;;;;;;;;;;;;sCAQhD,6LAAC;4BACC,OAAM;4BACN,OAAO,aAAa,OAAO,CAAC,YAAY;4BACxC,oBAAM,6LAAC,6MAAA,CAAA,WAAQ;gCAAC,WAAU;;;;;;4BAC1B,YAAY,oBAAoB;4BAChC,SAAS,IAAM,cAAc;;;;;;wBAG9B,oBAAoB,2BACnB,6LAAC;4BAAI,WAAU;;gCACZ,aAAa,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAA,SAChC,OAAO,MAAM,CAAC,MAAM,GAAG,mBACrB,6LAAC;wCAAoB,WAAU;;0DAC7B,6LAAC;gDAAI,WAAU;;kEACb,6LAAC;;0EACC,6LAAC;gEAAK,WAAU;0EAAe,OAAO,EAAE;;;;;;0EACxC,6LAAC;gEAAK,WAAU;;oEACb,OAAO,IAAI;oEAAC;oEAAM,OAAO,IAAI;oEAC7B,OAAO,UAAU,IAAI,CAAC,YAAY,EAAE,OAAO,UAAU,EAAE;;;;;;;;;;;;;kEAG5D,6LAAC;wDAAK,WAAU;;4DACb,OAAO,MAAM,CAAC,MAAM;4DAAC;4DAAE,OAAO,MAAM,CAAC,MAAM,KAAK,IAAI,aAAa;;;;;;;;;;;;;0DAGtE,6LAAC;gDAAI,WAAU;0DACb,cAAA,6LAAC;oDAAG,WAAU;8DACX,OAAO,MAAM,CAAC,GAAG,CAAC,CAAC,OAAO,2BACzB,6LAAC;4DAAoB,WAAU;;gEAC5B,gBAAgB,MAAM,QAAQ;8EAC/B,6LAAC;;sFACC,6LAAC;4EAAI,WAAU;;8FACb,6LAAC;oFAAK,WAAU;8FAAuB,MAAM,IAAI;;;;;;8FACjD,6LAAC;oFAAK,WAAW,CAAC,iCAAiC,EAAE,iBAAiB,MAAM,QAAQ,GAAG;8FACpF,MAAM,QAAQ;;;;;;;;;;;;sFAGnB,6LAAC;4EAAE,WAAU;sFAAyB,MAAM,WAAW;;;;;;;;;;;;;2DATlD;;;;;;;;;;;;;;;;uCAhBP,OAAO,EAAE;;;;;gCAkCtB,aAAa,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAA,SAAU,OAAO,MAAM,CAAC,MAAM,KAAK,oBACrE,6LAAC;oCAAI,WAAU;;sDACb,6LAAC,8NAAA,CAAA,cAAW;4CAAC,WAAU;;;;;;wCAAiB;;;;;;;;;;;;;sCAQhD,6LAAC;4BACC,OAAM;4BACN,OAAO,aAAa,OAAO,CAAC,aAAa;4BACzC,oBAAM,6LAAC,uMAAA,CAAA,QAAK;gCAAC,WAAU;;;;;;4BACvB,YAAY,oBAAoB;4BAChC,SAAS,IAAM,cAAc;;;;;;wBAG9B,oBAAoB,4BACnB,6LAAC;4BAAI,WAAU;;gCACZ,aAAa,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAA,OACjC,KAAK,MAAM,CAAC,MAAM,GAAG,mBACnB,6LAAC;wCAAoB,WAAU;;0DAC7B,6LAAC;gDAAI,WAAU;;kEACb,6LAAC;;0EACC,6LAAC;gEAAK,WAAU;0EAAe,KAAK,IAAI;;;;;;0EACxC,6LAAC;gEAAK,WAAU;;oEACb,KAAK,gBAAgB,CAAC,MAAM;oEAAC;oEAAE,KAAK,gBAAgB,CAAC,MAAM,KAAK,IAAI,cAAc;;;;;;;;;;;;;kEAGvF,6LAAC;wDAAK,WAAU;;4DACb,KAAK,MAAM,CAAC,MAAM;4DAAC;4DAAE,KAAK,MAAM,CAAC,MAAM,KAAK,IAAI,aAAa;;;;;;;;;;;;;0DAGlE,6LAAC;gDAAI,WAAU;0DACb,cAAA,6LAAC;oDAAG,WAAU;8DACX,KAAK,MAAM,CAAC,GAAG,CAAC,CAAC,OAAO,2BACvB,6LAAC;4DAAoB,WAAU;;gEAC5B,gBAAgB,MAAM,QAAQ;8EAC/B,6LAAC;;sFACC,6LAAC;4EAAI,WAAU;;8FACb,6LAAC;oFAAK,WAAU;8FAAuB,MAAM,IAAI;;;;;;8FACjD,6LAAC;oFAAK,WAAW,CAAC,iCAAiC,EAAE,iBAAiB,MAAM,QAAQ,GAAG;8FACpF,MAAM,QAAQ;;;;;;;;;;;;sFAGnB,6LAAC;4EAAE,WAAU;sFAAyB,MAAM,WAAW;;;;;;;;;;;;;2DATlD;;;;;;;;;;;;;;;;uCAfP,KAAK,IAAI;;;;;gCAiCtB,aAAa,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAA,OAAQ,KAAK,MAAM,CAAC,MAAM,KAAK,oBAClE,6LAAC;oCAAI,WAAU;;sDACb,6LAAC,8NAAA,CAAA,cAAW;4CAAC,WAAU;;;;;;wCAAiB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAW5D;IA7fS;MAAA;AAugBT,SAAS,oBAAoB,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAA4B;IAClF,qBACE,6LAAC;QAAI,WAAW,CAAC,sBAAsB,EAAE,OAAO;;0BAC9C,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBAAG,WAAU;kCAAqC;;;;;;oBAClD;;;;;;;0BAEH,6LAAC;gBAAE,WAAU;0BAAsB;;;;;;;;;;;;AAGzC;MAVS;AAqBT,SAAS,cAAc,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAsB;IACpF,qBACE,6LAAC;QACC,WAAU;QACV,SAAS;;0BAET,6LAAC;gBAAI,WAAU;;oBACZ;kCACD,6LAAC;wBAAG,WAAU;kCAA4C;;;;;;oBACzD,QAAQ,mBACP,6LAAC;wBAAK,WAAU;kCACb;;;;;;;;;;;;0BAIP,6LAAC;gBACC,WAAW,CAAC,qDAAqD,EAAE,aAAa,eAAe,IAAI;gBACnG,OAAM;gBACN,SAAQ;gBACR,MAAK;0BAEL,cAAA,6LAAC;oBAAK,UAAS;oBAAU,GAAE;oBAAqH,UAAS;;;;;;;;;;;;;;;;;AAIjK;MAzBS","debugId":null}}]
}