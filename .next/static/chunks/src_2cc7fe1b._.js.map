{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://E%3A/Teste%20AWS/aws-monitoring-platform/src/hooks/useAwsCredentials.ts"],"sourcesContent":["\"use client\";\r\n\r\nimport { useState, useCallback, useEffect } from \"react\";\r\n\r\ninterface AwsCredential {\r\n  id: string;\r\n  name: string;\r\n  region: string;\r\n  createdAt: string;\r\n}\r\n\r\ninterface UseAwsCredentialsResult {\r\n  credentials: AwsCredential[];\r\n  selectedCredential: AwsCredential | null;\r\n  loading: boolean;\r\n  error: string | null;\r\n  fetchCredentials: () => Promise<void>;\r\n  selectCredential: (id: string) => void;\r\n  addCredential: (\r\n    name: string,\r\n    accessKeyId: string,\r\n    secretKey: string,\r\n    region: string\r\n  ) => Promise<boolean>;\r\n}\r\n\r\nexport function useAwsCredentials(): UseAwsCredentialsResult {\r\n  const [credentials, setCredentials] = useState<AwsCredential[]>([]);\r\n  const [selectedCredential, setSelectedCredential] = useState<AwsCredential | null>(null);\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  const fetchCredentials = useCallback(async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      const response = await fetch(\"/api/aws/credentials\");\r\n      \r\n      if (!response.ok) {\r\n        const { error } = await response.json();\r\n        throw new Error(error || \"Erro ao buscar credenciais\");\r\n      }\r\n      \r\n      const data = await response.json();\r\n      setCredentials(data);\r\n      \r\n      // Auto-selecionar a primeira credencial, se disponível\r\n      if (data.length > 0 && !selectedCredential) {\r\n        setSelectedCredential(data[0]);\r\n      }\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : \"Erro ao buscar credenciais\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [selectedCredential]);\r\n\r\n  const selectCredential = useCallback((id: string) => {\r\n    const credential = credentials.find(cred => cred.id === id);\r\n    if (credential) {\r\n      setSelectedCredential(credential);\r\n    }\r\n  }, [credentials]);\r\n\r\n  const addCredential = useCallback(async (\r\n    name: string,\r\n    accessKeyId: string,\r\n    secretKey: string,\r\n    region: string\r\n  ) => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      const response = await fetch(\"/api/aws/credentials\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          name,\r\n          accessKeyId,\r\n          secretKey,\r\n          region,\r\n        }),\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        const { error } = await response.json();\r\n        throw new Error(error || \"Erro ao adicionar credencial\");\r\n      }\r\n      \r\n      // Atualizar lista de credenciais\r\n      await fetchCredentials();\r\n      return true;\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : \"Erro ao adicionar credencial\");\r\n      return false;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [fetchCredentials]);\r\n\r\n  // Buscar credenciais ao montar o componente\r\n  useEffect(() => {\r\n    fetchCredentials();\r\n  }, [fetchCredentials]);\r\n\r\n  return {\r\n    credentials,\r\n    selectedCredential,\r\n    loading,\r\n    error,\r\n    fetchCredentials,\r\n    selectCredential,\r\n    addCredential,\r\n  };\r\n} "],"names":[],"mappings":";;;AAEA;;AAFA;;AA0BO,SAAS;;IACd,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAmB,EAAE;IAClE,MAAM,CAAC,oBAAoB,sBAAsB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAwB;IACnF,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAW;IAChD,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAiB;IAElD,MAAM,mBAAmB,CAAA,GAAA,6JAAA,CAAA,cAAW,AAAD;2DAAE;YACnC,IAAI;gBACF,WAAW;gBACX,SAAS;gBAET,MAAM,WAAW,MAAM,MAAM;gBAE7B,IAAI,CAAC,SAAS,EAAE,EAAE;oBAChB,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,SAAS,IAAI;oBACrC,MAAM,IAAI,MAAM,SAAS;gBAC3B;gBAEA,MAAM,OAAO,MAAM,SAAS,IAAI;gBAChC,eAAe;gBAEf,uDAAuD;gBACvD,IAAI,KAAK,MAAM,GAAG,KAAK,CAAC,oBAAoB;oBAC1C,sBAAsB,IAAI,CAAC,EAAE;gBAC/B;YACF,EAAE,OAAO,KAAK;gBACZ,SAAS,eAAe,QAAQ,IAAI,OAAO,GAAG;YAChD,SAAU;gBACR,WAAW;YACb;QACF;0DAAG;QAAC;KAAmB;IAEvB,MAAM,mBAAmB,CAAA,GAAA,6JAAA,CAAA,cAAW,AAAD;2DAAE,CAAC;YACpC,MAAM,aAAa,YAAY,IAAI;8EAAC,CAAA,OAAQ,KAAK,EAAE,KAAK;;YACxD,IAAI,YAAY;gBACd,sBAAsB;YACxB;QACF;0DAAG;QAAC;KAAY;IAEhB,MAAM,gBAAgB,CAAA,GAAA,6JAAA,CAAA,cAAW,AAAD;wDAAE,OAChC,MACA,aACA,WACA;YAEA,IAAI;gBACF,WAAW;gBACX,SAAS;gBAET,MAAM,WAAW,MAAM,MAAM,wBAAwB;oBACnD,QAAQ;oBACR,SAAS;wBACP,gBAAgB;oBAClB;oBACA,MAAM,KAAK,SAAS,CAAC;wBACnB;wBACA;wBACA;wBACA;oBACF;gBACF;gBAEA,IAAI,CAAC,SAAS,EAAE,EAAE;oBAChB,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,SAAS,IAAI;oBACrC,MAAM,IAAI,MAAM,SAAS;gBAC3B;gBAEA,iCAAiC;gBACjC,MAAM;gBACN,OAAO;YACT,EAAE,OAAO,KAAK;gBACZ,SAAS,eAAe,QAAQ,IAAI,OAAO,GAAG;gBAC9C,OAAO;YACT,SAAU;gBACR,WAAW;YACb;QACF;uDAAG;QAAC;KAAiB;IAErB,4CAA4C;IAC5C,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;uCAAE;YACR;QACF;sCAAG;QAAC;KAAiB;IAErB,OAAO;QACL;QACA;QACA;QACA;QACA;QACA;QACA;IACF;AACF;GA5FgB","debugId":null}},
    {"offset": {"line": 119, "column": 0}, "map": {"version":3,"sources":["file://E%3A/Teste%20AWS/aws-monitoring-platform/src/app/dashboard/ec2/page.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { useState, useEffect } from \"react\";\r\nimport { useAwsCredentials } from \"@/hooks/useAwsCredentials\";\r\nimport { motion } from \"framer-motion\";\r\n\r\ninterface EC2Instance {\r\n  id: string;\r\n  type: string;\r\n  state: string;\r\n  publicIp: string;\r\n  privateIp: string;\r\n  launchTime: string;\r\n}\r\n\r\nexport default function EC2Page() {\r\n  const { selectedCredential } = useAwsCredentials();\r\n  const [instances, setInstances] = useState<EC2Instance[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    async function fetchInstances() {\r\n      if (!selectedCredential) {\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        setLoading(true);\r\n        setError(null);\r\n        \r\n        console.log(`Buscando instâncias EC2 para credencial: ${selectedCredential.id}`);\r\n        const response = await fetch(`/api/aws/resources?credentialId=${selectedCredential.id}&type=EC2`);\r\n        \r\n        if (!response.ok) {\r\n          const errorData = await response.json();\r\n          throw new Error(errorData.error || \"Erro ao buscar instâncias EC2\");\r\n        }\r\n        \r\n        const data = await response.json();\r\n        console.log(\"Resposta da API:\", data);\r\n        setInstances(data.resources || []);\r\n      } catch (err) {\r\n        console.error(\"Erro ao buscar instâncias:\", err);\r\n        setError(err instanceof Error ? err.message : \"Erro ao buscar instâncias\");\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    }\r\n\r\n    fetchInstances();\r\n  }, [selectedCredential]);\r\n\r\n  // Função para obter a cor baseada no estado da instância\r\n  const getStateColor = (state?: string) => {\r\n    switch (state?.toLowerCase()) {\r\n      case \"running\":\r\n        return \"bg-green-100 text-green-800\";\r\n      case \"stopped\":\r\n        return \"bg-red-100 text-red-800\";\r\n      case \"pending\":\r\n        return \"bg-yellow-100 text-yellow-800\";\r\n      case \"stopping\":\r\n        return \"bg-orange-100 text-orange-800\";\r\n      case \"terminated\":\r\n        return \"bg-gray-100 text-gray-800\";\r\n      default:\r\n        return \"bg-gray-100 text-gray-800\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <motion.div\r\n        className=\"mb-6\"\r\n        initial={{ opacity: 0, y: -20 }}\r\n        animate={{ opacity: 1, y: 0 }}\r\n        transition={{ duration: 0.3 }}\r\n      >\r\n        <h1 className=\"text-3xl font-bold text-gray-900\">Instâncias EC2</h1>\r\n        <p className=\"mt-2 text-gray-600\">\r\n          Visualize e monitore suas instâncias EC2 na AWS.\r\n        </p>\r\n      </motion.div>\r\n\r\n      <motion.div\r\n        className=\"bg-white rounded-lg shadow-md p-6\"\r\n        initial={{ opacity: 0, y: 20 }}\r\n        animate={{ opacity: 1, y: 0 }}\r\n        transition={{ duration: 0.3 }}\r\n      >\r\n        {!selectedCredential ? (\r\n          <div className=\"text-center py-6\">\r\n            <p className=\"text-gray-500\">Selecione uma credencial AWS para visualizar as instâncias.</p>\r\n          </div>\r\n        ) : loading ? (\r\n          <div className=\"flex justify-center py-8\">\r\n            <div className=\"animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-indigo-500\"></div>\r\n          </div>\r\n        ) : error ? (\r\n          <div className=\"p-4 bg-red-50 rounded-md\">\r\n            <p className=\"text-red-700\">{error}</p>\r\n          </div>\r\n        ) : instances.length === 0 ? (\r\n          <div className=\"text-center py-6\">\r\n            <p className=\"text-gray-500\">Nenhuma instância EC2 encontrada na região {selectedCredential.region}.</p>\r\n            <p className=\"text-sm text-gray-400 mt-2\">\r\n              Verifique se você tem instâncias EC2 nesta região ou se suas credenciais têm permissão para acessá-las.\r\n            </p>\r\n          </div>\r\n        ) : (\r\n          <div>\r\n            <div className=\"flex justify-between items-center mb-4\">\r\n              <h2 className=\"text-lg font-medium text-gray-900\">\r\n                {instances.length} {instances.length === 1 ? \"Instância\" : \"Instâncias\"} Encontradas\r\n              </h2>\r\n              <span className=\"text-sm text-gray-500\">\r\n                Região: {selectedCredential.region}\r\n              </span>\r\n            </div>\r\n            \r\n            <div className=\"overflow-x-auto\">\r\n              <table className=\"min-w-full divide-y divide-gray-200\">\r\n                <thead className=\"bg-gray-50\">\r\n                  <tr>\r\n                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                      ID da Instância\r\n                    </th>\r\n                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                      Tipo\r\n                    </th>\r\n                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                      Estado\r\n                    </th>\r\n                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                      IP Público\r\n                    </th>\r\n                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                      IP Privado\r\n                    </th>\r\n                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                      Iniciada Em\r\n                    </th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody className=\"bg-white divide-y divide-gray-200\">\r\n                  {instances.map((instance) => (\r\n                    <tr key={instance.id} className=\"hover:bg-gray-50\">\r\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\r\n                        {instance.id}\r\n                      </td>\r\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\r\n                        {instance.type}\r\n                      </td>\r\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\r\n                        <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${getStateColor(instance.state)}`}>\r\n                          {instance.state}\r\n                        </span>\r\n                      </td>\r\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\r\n                        {instance.publicIp || \"-\"}\r\n                      </td>\r\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\r\n                        {instance.privateIp || \"-\"}\r\n                      </td>\r\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\r\n                        {instance.launchTime ? new Date(instance.launchTime).toLocaleString() : \"-\"}\r\n                      </td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </motion.div>\r\n    </div>\r\n  );\r\n} "],"names":[],"mappings":"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","debugId":null}}]
}