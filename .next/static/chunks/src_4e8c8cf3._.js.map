{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://E%3A/AWS%20Monitor/aws-monitoring-platform/src/hooks/useAwsCredentials.ts"],"sourcesContent":["\"use client\";\n\nimport { useState, useEffect } from 'react';\n\nexport interface AwsCredential {\n  id: string;\n  name: string;\n  accountId?: string;\n  accessKeyId: string;\n  secretAccessKey: string;\n  region: string;\n  createdAt?: string;\n}\n\nexport interface UseAwsCredentialsResult {\n  credentials: AwsCredential[];\n  selectedCredential: AwsCredential | null;\n  selectCredential: (id: string) => void;\n  addCredential: (credential: Omit<AwsCredential, 'id'>) => Promise<void>;\n  updateCredential: (id: string, data: Partial<Omit<AwsCredential, 'id'>>) => Promise<void>;\n  deleteCredential: (id: string) => Promise<void>;\n  loading: boolean;\n  isLoading: boolean; // Alias for loading - needed for compatibility\n  error: string | null;\n  refresh: () => Promise<void>;\n}\n\nexport function useAwsCredentials(): UseAwsCredentialsResult {\n  const [credentials, setCredentials] = useState<AwsCredential[]>([]);\n  const [selectedCredentialId, setSelectedCredentialId] = useState<string | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // Function to fetch credentials from the API\n  const fetchCredentials = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await fetch('/api/aws/credentials');\n      \n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        const errorMessage = errorData.error || `Falha ao buscar credenciais: Código ${response.status}`;\n        throw new Error(errorMessage);\n      }\n      \n      const data = await response.json();\n      setCredentials(data);\n      \n      // If we have credentials but none selected, select the first one\n      if (data.length > 0 && !selectedCredentialId) {\n        setSelectedCredentialId(data[0].id);\n        // Save to localStorage\n        localStorage.setItem('selectedAwsCredentialId', data[0].id);\n      }\n      \n      return data;\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : String(err);\n      setError(`Erro ao buscar credenciais: ${errorMessage}`);\n      return [];\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Function to select a credential\n  const selectCredential = (id: string) => {\n    setSelectedCredentialId(id);\n    localStorage.setItem('selectedAwsCredentialId', id);\n  };\n\n  // Function to add a new credential\n  const addCredential = async (credential: Omit<AwsCredential, 'id'>) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      // Criar um objeto com o formato esperado pela API\n      const apiCredential = {\n        name: credential.name,\n        accessKeyId: credential.accessKeyId,\n        secretKey: credential.secretAccessKey, // Renomear o campo para secretKey\n        region: credential.region\n      };\n      \n      const response = await fetch('/api/aws/credentials', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(apiCredential),\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        const errorMessage = errorData.error || `Falha ao adicionar credencial: Código ${response.status}`;\n        throw new Error(errorMessage);\n      }\n      \n      await fetchCredentials();\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : String(err);\n      setError(`Erro ao adicionar credencial: ${errorMessage}`);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Function to update an existing credential\n  const updateCredential = async (id: string, data: Partial<Omit<AwsCredential, 'id'>>) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const response = await fetch(`/api/aws/credentials/${id}`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        const errorMessage = errorData.error || `Falha ao atualizar credencial: Código ${response.status}`;\n        throw new Error(errorMessage);\n      }\n      \n      await fetchCredentials();\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : String(err);\n      setError(`Erro ao atualizar credencial: ${errorMessage}`);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Function to delete a credential\n  const deleteCredential = async (id: string) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const response = await fetch(`/api/aws/credentials/${id}`, {\n        method: 'DELETE',\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        const errorMessage = errorData.error || `Falha ao excluir credencial: Código ${response.status}`;\n        throw new Error(errorMessage);\n      }\n      \n      // If we delete the selected credential, select another one\n      if (id === selectedCredentialId) {\n        const remainingCredentials = credentials.filter(c => c.id !== id);\n        if (remainingCredentials.length > 0) {\n          selectCredential(remainingCredentials[0].id);\n        } else {\n          setSelectedCredentialId(null);\n          localStorage.removeItem('selectedAwsCredentialId');\n        }\n      }\n      \n      await fetchCredentials();\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : String(err);\n      setError(`Erro ao excluir credencial: ${errorMessage}`);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Load credentials on mount\n  useEffect(() => {\n    // Try to restore selected credential from localStorage\n    const savedCredentialId = localStorage.getItem('selectedAwsCredentialId');\n    if (savedCredentialId) {\n      setSelectedCredentialId(savedCredentialId);\n    }\n    \n    fetchCredentials();\n  }, []);\n\n  // Find the selected credential object\n  const selectedCredential = credentials.find(c => c.id === selectedCredentialId) || null;\n\n  return {\n    credentials,\n    selectedCredential,\n    selectCredential,\n    addCredential,\n    updateCredential,\n    deleteCredential,\n    loading,\n    isLoading: loading, // Alias for loading\n    error,\n    refresh: fetchCredentials,\n  };\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 180, "column": 0}, "map": {"version":3,"sources":["file://E%3A/AWS%20Monitor/aws-monitoring-platform/src/components/aws/CredentialSelector.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { useAwsCredentials } from \"@/hooks/useAwsCredentials\";\r\nimport { useRouter } from \"next/navigation\";\r\n\r\nexport default function CredentialSelector() {\r\n  const { credentials, selectedCredential, selectCredential, loading } = useAwsCredentials();\r\n  const router = useRouter();\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"bg-white rounded-lg shadow-sm p-4 mb-6 flex items-center space-x-2\">\r\n        <span className=\"text-gray-700\">Carregando credenciais...</span>\r\n        <div className=\"animate-spin rounded-full h-4 w-4 border-t-2 border-b-2 border-indigo-500\"></div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (credentials.length === 0) {\r\n    return (\r\n      <div className=\"bg-white rounded-lg shadow-sm p-4 mb-6\">\r\n        <div className=\"flex justify-between items-center\">\r\n          <span className=\"text-gray-700\">Nenhuma credencial AWS encontrada</span>\r\n          <button\r\n            onClick={() => router.push(\"/dashboard/credentials\")}\r\n            className=\"px-3 py-1 text-sm text-white bg-indigo-600 rounded-md hover:bg-indigo-700\"\r\n          >\r\n            Adicionar Credencial\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"bg-white rounded-lg shadow-sm p-4 mb-6\">\r\n      <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between\">\r\n        <label htmlFor=\"credential-selector\" className=\"block text-sm font-medium text-gray-700 mb-2 sm:mb-0\">\r\n          Selecionar Credencial AWS:\r\n        </label>\r\n        <div className=\"flex-1 sm:ml-4 max-w-md\">\r\n          <select\r\n            id=\"credential-selector\"\r\n            value={selectedCredential?.id || \"\"}\r\n            onChange={(e) => selectCredential(e.target.value)}\r\n            className=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm\"\r\n          >\r\n            <option value=\"\" disabled>\r\n              Selecione uma credencial\r\n            </option>\r\n            {credentials.map((cred) => (\r\n              <option key={cred.id} value={cred.id}>\r\n                {cred.name} ({cred.region})\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n} "],"names":[],"mappings":";;;;AAEA;AACA;;;AAHA;;;AAKe,SAAS;;IACtB,MAAM,EAAE,WAAW,EAAE,kBAAkB,EAAE,gBAAgB,EAAE,OAAO,EAAE,GAAG,CAAA,GAAA,oIAAA,CAAA,oBAAiB,AAAD;IACvF,MAAM,SAAS,CAAA,GAAA,qIAAA,CAAA,YAAS,AAAD;IAEvB,IAAI,SAAS;QACX,qBACE,6LAAC;YAAI,WAAU;;8BACb,6LAAC;oBAAK,WAAU;8BAAgB;;;;;;8BAChC,6LAAC;oBAAI,WAAU;;;;;;;;;;;;IAGrB;IAEA,IAAI,YAAY,MAAM,KAAK,GAAG;QAC5B,qBACE,6LAAC;YAAI,WAAU;sBACb,cAAA,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBAAK,WAAU;kCAAgB;;;;;;kCAChC,6LAAC;wBACC,SAAS,IAAM,OAAO,IAAI,CAAC;wBAC3B,WAAU;kCACX;;;;;;;;;;;;;;;;;IAMT;IAEA,qBACE,6LAAC;QAAI,WAAU;kBACb,cAAA,6LAAC;YAAI,WAAU;;8BACb,6LAAC;oBAAM,SAAQ;oBAAsB,WAAU;8BAAuD;;;;;;8BAGtG,6LAAC;oBAAI,WAAU;8BACb,cAAA,6LAAC;wBACC,IAAG;wBACH,OAAO,oBAAoB,MAAM;wBACjC,UAAU,CAAC,IAAM,iBAAiB,EAAE,MAAM,CAAC,KAAK;wBAChD,WAAU;;0CAEV,6LAAC;gCAAO,OAAM;gCAAG,QAAQ;0CAAC;;;;;;4BAGzB,YAAY,GAAG,CAAC,CAAC,qBAChB,6LAAC;oCAAqB,OAAO,KAAK,EAAE;;wCACjC,KAAK,IAAI;wCAAC;wCAAG,KAAK,MAAM;wCAAC;;mCADf,KAAK,EAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;AASlC;GAvDwB;;QACiD,oIAAA,CAAA,oBAAiB;QACzE,qIAAA,CAAA,YAAS;;;KAFF","debugId":null}},
    {"offset": {"line": 341, "column": 0}, "map": {"version":3,"sources":["file://E%3A/AWS%20Monitor/aws-monitoring-platform/src/app/dashboard/security/compliance/page.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { useState, useEffect } from \"react\";\r\nimport { useAwsCredentials } from \"@/hooks/useAwsCredentials\";\r\nimport { motion } from \"framer-motion\";\r\nimport CredentialSelector from \"@/components/aws/CredentialSelector\";\r\nimport { Check, AlertTriangle, AlertCircle, Info, Shield, ClipboardCheck, RefreshCw, FileText } from \"lucide-react\";\r\n\r\ninterface ComplianceStandard {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  complianceScore: number;\r\n  totalControls: number;\r\n  passedControls: number;\r\n  failedControls: number;\r\n  notApplicableControls: number;\r\n}\r\n\r\ninterface ComplianceControl {\r\n  id: string;\r\n  standardId: string;\r\n  title: string;\r\n  description: string;\r\n  status: \"passed\" | \"failed\" | \"not_applicable\";\r\n  severity: \"critical\" | \"high\" | \"medium\" | \"low\";\r\n  remediation?: string;\r\n  resources?: string[];\r\n}\r\n\r\nexport default function CompliancePage() {\r\n  const { selectedCredential } = useAwsCredentials();\r\n  const [standards, setStandards] = useState<ComplianceStandard[]>([]);\r\n  const [controls, setControls] = useState<ComplianceControl[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [backgroundLoading, setBackgroundLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [scanning, setScanning] = useState(false);\r\n  const [scanProgress, setScanProgress] = useState(0);\r\n  const [selectedStandard, setSelectedStandard] = useState<string | null>(null);\r\n  const [filterStatus, setFilterStatus] = useState<string | null>(null);\r\n  const [filterSeverity, setFilterSeverity] = useState<string | null>(null);\r\n  const [lastCredentialId, setLastCredentialId] = useState<string | null>(null);\r\n  const [lastUpdated, setLastUpdated] = useState<Date | null>(null);\r\n\r\n  useEffect(() => {\r\n    if (!selectedCredential) {\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Verificar se já temos dados no localStorage\r\n      const complianceCache = localStorage.getItem('complianceData');\r\n      const cachedCredentialId = localStorage.getItem('complianceLastCredentialId');\r\n      const cachedTimestamp = localStorage.getItem('complianceLastUpdateTime');\r\n\r\n      if (complianceCache && cachedCredentialId === selectedCredential.id) {\r\n        // Usar dados do cache\r\n        const parsedData = JSON.parse(complianceCache);\r\n        setStandards(parsedData.standards);\r\n        setControls(parsedData.controls);\r\n        setLoading(false);\r\n        \r\n        if (cachedTimestamp) {\r\n          setLastUpdated(new Date(parseInt(cachedTimestamp)));\r\n        }\r\n        \r\n        // Verificar se é hora de atualizar em background\r\n        if (cachedTimestamp) {\r\n          const timeSinceLastUpdate = Date.now() - parseInt(cachedTimestamp);\r\n          const fiveMinutesInMs = 5 * 60 * 1000;\r\n          \r\n          if (timeSinceLastUpdate > fiveMinutesInMs) {\r\n            // Atualiza em background se passou mais de 5 minutos\r\n            fetchComplianceInBackground();\r\n          }\r\n        }\r\n      } else {\r\n        // Se não tem cache ou a credencial mudou, buscar novos dados\r\n        fetchCompliance();\r\n      }\r\n      \r\n      setLastCredentialId(selectedCredential.id);\r\n    } catch (error) {\r\n      console.error(\"Erro ao restaurar cache:\", error);\r\n      fetchCompliance();\r\n    }\r\n  }, [selectedCredential]);\r\n\r\n  // Função para atualizar dados em background\r\n  const fetchComplianceInBackground = async () => {\r\n    if (!selectedCredential) return;\r\n    \r\n    try {\r\n      setBackgroundLoading(true);\r\n      \r\n      // Simular busca de dados reais (substituir com chamada de API real)\r\n      // Em uma implementação real, buscaria dados de compliance da AWS Config ou Security Hub\r\n      await new Promise(resolve => setTimeout(resolve, 1500));\r\n      \r\n      const mockData = generateMockComplianceData();\r\n      setStandards(mockData.standards);\r\n      setControls(mockData.controls);\r\n      \r\n      const currentTime = new Date();\r\n      setLastUpdated(currentTime);\r\n      \r\n      // Salvar no cache\r\n      localStorage.setItem('complianceData', JSON.stringify(mockData));\r\n      localStorage.setItem('complianceLastCredentialId', selectedCredential.id);\r\n      localStorage.setItem('complianceLastUpdateTime', currentTime.getTime().toString());\r\n      \r\n      console.log(\"Atualização em background de dados de compliance concluída\");\r\n    } catch (err) {\r\n      console.error(\"Erro na atualização em background:\", err);\r\n    } finally {\r\n      setBackgroundLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchCompliance = async () => {\r\n    if (!selectedCredential) {\r\n      setLoading(false);\r\n      return;\r\n    }\r\n    \r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      // Simular um scan progressivo para UX melhor\r\n      setScanning(true);\r\n      setScanProgress(0);\r\n      \r\n      const scanTimer = setInterval(() => {\r\n        setScanProgress(prev => {\r\n          if (prev >= 95) {\r\n            clearInterval(scanTimer);\r\n            return 95;\r\n          }\r\n          return prev + Math.floor(Math.random() * 5) + 1;\r\n        });\r\n      }, 300);\r\n      \r\n      // Simular busca de dados reais (substituir com chamada de API real)\r\n      // Em uma implementação real, buscaria dados de compliance da AWS Config ou Security Hub\r\n      await new Promise(resolve => setTimeout(resolve, 3000));\r\n      \r\n      const mockData = generateMockComplianceData();\r\n      \r\n      // Atrasar um pouco para simular o processamento\r\n      setTimeout(() => {\r\n        setStandards(mockData.standards);\r\n        setControls(mockData.controls);\r\n        setScanning(false);\r\n        setScanProgress(100);\r\n        setLoading(false);\r\n        \r\n        const currentTime = new Date();\r\n        setLastUpdated(currentTime);\r\n        \r\n        // Salvar no cache\r\n        localStorage.setItem('complianceData', JSON.stringify(mockData));\r\n        localStorage.setItem('complianceLastCredentialId', selectedCredential.id);\r\n        localStorage.setItem('complianceLastUpdateTime', currentTime.getTime().toString());\r\n      }, 1000);\r\n      \r\n      clearInterval(scanTimer);\r\n    } catch (err) {\r\n      console.error(\"Erro ao buscar dados de compliance:\", err);\r\n      setError(err instanceof Error ? err.message : \"Erro ao buscar dados de compliance\");\r\n      setScanning(false);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const runNewScan = () => {\r\n    fetchCompliance();\r\n  };\r\n\r\n  // Função para gerar dados simulados de compliance\r\n  const generateMockComplianceData = () => {\r\n    const standards: ComplianceStandard[] = [\r\n      {\r\n        id: \"pci-dss\",\r\n        name: \"PCI DSS\",\r\n        description: \"Payment Card Industry Data Security Standard\",\r\n        complianceScore: 78,\r\n        totalControls: 28,\r\n        passedControls: 22,\r\n        failedControls: 6,\r\n        notApplicableControls: 0\r\n      },\r\n      {\r\n        id: \"hipaa\",\r\n        name: \"HIPAA\",\r\n        description: \"Health Insurance Portability and Accountability Act\",\r\n        complianceScore: 85,\r\n        totalControls: 42,\r\n        passedControls: 36,\r\n        failedControls: 6,\r\n        notApplicableControls: 0\r\n      },\r\n      {\r\n        id: \"gdpr\",\r\n        name: \"GDPR\",\r\n        description: \"General Data Protection Regulation\",\r\n        complianceScore: 91,\r\n        totalControls: 35,\r\n        passedControls: 32,\r\n        failedControls: 3,\r\n        notApplicableControls: 0\r\n      },\r\n      {\r\n        id: \"nist\",\r\n        name: \"NIST 800-53\",\r\n        description: \"National Institute of Standards and Technology\",\r\n        complianceScore: 72,\r\n        totalControls: 52,\r\n        passedControls: 37,\r\n        failedControls: 15,\r\n        notApplicableControls: 0\r\n      }\r\n    ];\r\n\r\n    const controls: ComplianceControl[] = [\r\n      // PCI DSS Controls\r\n      {\r\n        id: \"pci-1.1\",\r\n        standardId: \"pci-dss\",\r\n        title: \"Firewall Configuration\",\r\n        description: \"Estabelecer regras de firewall para proteger dados de titulares de cartões\",\r\n        status: \"passed\",\r\n        severity: \"high\"\r\n      },\r\n      {\r\n        id: \"pci-1.2\",\r\n        standardId: \"pci-dss\",\r\n        title: \"Default Passwords\",\r\n        description: \"Alterar senhas padrão de fornecedor e outros parâmetros de segurança\",\r\n        status: \"passed\",\r\n        severity: \"critical\"\r\n      },\r\n      {\r\n        id: \"pci-2.1\",\r\n        standardId: \"pci-dss\",\r\n        title: \"Stored Cardholder Data Protection\",\r\n        description: \"Proteger dados de titulares de cartões armazenados\",\r\n        status: \"failed\",\r\n        severity: \"critical\",\r\n        remediation: \"Implantar criptografia para dados de cartões armazenados em buckets S3\",\r\n        resources: [\"s3://customer-data\"]\r\n      },\r\n      {\r\n        id: \"pci-3.1\",\r\n        standardId: \"pci-dss\",\r\n        title: \"Encrypted Transmission\",\r\n        description: \"Criptografar a transmissão de dados de titulares de cartões\",\r\n        status: \"passed\",\r\n        severity: \"high\"\r\n      },\r\n      {\r\n        id: \"pci-4.1\",\r\n        standardId: \"pci-dss\",\r\n        title: \"Antivirus Protection\",\r\n        description: \"Usar software antivírus em sistemas comumente afetados por malware\",\r\n        status: \"failed\",\r\n        severity: \"medium\",\r\n        remediation: \"Implantar proteção antivírus em instâncias EC2\",\r\n        resources: [\"i-1234abcd\", \"i-5678efgh\"]\r\n      },\r\n      \r\n      // HIPAA Controls\r\n      {\r\n        id: \"hipaa-1.1\",\r\n        standardId: \"hipaa\",\r\n        title: \"Access Controls\",\r\n        description: \"Implementar controles técnicos para acesso a PHI\",\r\n        status: \"passed\",\r\n        severity: \"high\"\r\n      },\r\n      {\r\n        id: \"hipaa-1.2\",\r\n        standardId: \"hipaa\",\r\n        title: \"Audit Controls\",\r\n        description: \"Implementar mecanismos para registrar e examinar atividades\",\r\n        status: \"passed\",\r\n        severity: \"medium\"\r\n      },\r\n      {\r\n        id: \"hipaa-2.1\",\r\n        standardId: \"hipaa\",\r\n        title: \"Data Integrity\",\r\n        description: \"Proteger PHI de alteração ou destruição inadequada\",\r\n        status: \"failed\",\r\n        severity: \"high\",\r\n        remediation: \"Habilitar versionamento de objetos para buckets S3 contendo PHI\",\r\n        resources: [\"s3://patient-data\", \"s3://medical-images\"]\r\n      },\r\n      \r\n      // GDPR Controls\r\n      {\r\n        id: \"gdpr-1.1\",\r\n        standardId: \"gdpr\",\r\n        title: \"Data Minimization\",\r\n        description: \"Coletar apenas dados pessoais necessários para fins específicos\",\r\n        status: \"passed\",\r\n        severity: \"medium\"\r\n      },\r\n      {\r\n        id: \"gdpr-1.2\",\r\n        standardId: \"gdpr\",\r\n        title: \"Privacy by Design\",\r\n        description: \"Implementar medidas técnicas e organizacionais para proteção de dados\",\r\n        status: \"passed\",\r\n        severity: \"high\"\r\n      },\r\n      {\r\n        id: \"gdpr-2.1\",\r\n        standardId: \"gdpr\",\r\n        title: \"Data Breach Notification\",\r\n        description: \"Processo para notificar violações de dados pessoais\",\r\n        status: \"failed\",\r\n        severity: \"high\",\r\n        remediation: \"Configurar alertas automatizados para potenciais violações de dados\",\r\n        resources: [\"CloudWatch\", \"SNS\"]\r\n      },\r\n      \r\n      // NIST Controls\r\n      {\r\n        id: \"nist-1.1\",\r\n        standardId: \"nist\",\r\n        title: \"Access Control\",\r\n        description: \"Limitar acesso a sistemas e informações autorizados\",\r\n        status: \"passed\",\r\n        severity: \"high\"\r\n      },\r\n      {\r\n        id: \"nist-1.2\",\r\n        standardId: \"nist\",\r\n        title: \"Awareness and Training\",\r\n        description: \"Conscientizar e treinar usuários sobre segurança da informação\",\r\n        status: \"failed\",\r\n        severity: \"medium\",\r\n        remediation: \"Implementar programa de treinamento de segurança para funcionários\",\r\n        resources: [\"IAM Users\"]\r\n      },\r\n      {\r\n        id: \"nist-2.1\",\r\n        standardId: \"nist\",\r\n        title: \"Audit and Accountability\",\r\n        description: \"Criar, proteger e reter registros de auditoria do sistema\",\r\n        status: \"passed\",\r\n        severity: \"high\"\r\n      }\r\n    ];\r\n\r\n    return { standards, controls };\r\n  };\r\n\r\n  // Filtrar controles\r\n  const filteredControls = controls.filter(control => {\r\n    if (selectedStandard && control.standardId !== selectedStandard) return false;\r\n    if (filterStatus && control.status !== filterStatus) return false;\r\n    if (filterSeverity && control.severity !== filterSeverity) return false;\r\n    return true;\r\n  });\r\n\r\n  // Helper para cores\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case \"passed\": return \"bg-green-100 text-green-800\";\r\n      case \"failed\": return \"bg-red-100 text-red-800\";\r\n      case \"not_applicable\": return \"bg-gray-100 text-gray-800\";\r\n      default: return \"bg-gray-100 text-gray-800\";\r\n    }\r\n  };\r\n  \r\n  const getSeverityColor = (severity: string) => {\r\n    switch (severity) {\r\n      case \"critical\": return \"bg-red-100 text-red-800\";\r\n      case \"high\": return \"bg-orange-100 text-orange-800\";\r\n      case \"medium\": return \"bg-yellow-100 text-yellow-800\";\r\n      case \"low\": return \"bg-blue-100 text-blue-800\";\r\n      default: return \"bg-gray-100 text-gray-800\";\r\n    }\r\n  };\r\n\r\n  const getStatusIcon = (status: string) => {\r\n    switch (status) {\r\n      case \"passed\": return <Check className=\"h-4 w-4 text-green-600\" />;\r\n      case \"failed\": return <AlertCircle className=\"h-4 w-4 text-red-600\" />;\r\n      case \"not_applicable\": return <Info className=\"h-4 w-4 text-gray-600\" />;\r\n      default: return <Info className=\"h-4 w-4 text-gray-600\" />;\r\n    }\r\n  };\r\n\r\n  const getScoreColor = (score: number) => {\r\n    if (score >= 90) return \"text-green-600\";\r\n    if (score >= 70) return \"text-yellow-600\";\r\n    return \"text-red-600\";\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <motion.div\r\n        className=\"mb-6\"\r\n        initial={{ opacity: 0, y: -20 }}\r\n        animate={{ opacity: 1, y: 0 }}\r\n        transition={{ duration: 0.3 }}\r\n      >\r\n        <div className=\"flex items-center gap-2 mb-2\">\r\n          <ClipboardCheck className=\"h-6 w-6 text-indigo-600\" />\r\n          <h1 className=\"text-3xl font-bold text-gray-900\">Avaliação de Conformidade</h1>\r\n        </div>\r\n        <p className=\"mt-2 text-gray-600\">\r\n          Avalie a conformidade dos seus recursos AWS com padrões e regulamentações de segurança.\r\n        </p>\r\n      </motion.div>\r\n\r\n      <CredentialSelector />\r\n\r\n      {/* Header com informações de última atualização */}\r\n      {lastUpdated && (\r\n        <div className=\"flex justify-end items-center mb-4 text-sm text-gray-500\">\r\n          <span>Última atualização: {lastUpdated.toLocaleString()}</span>\r\n          {backgroundLoading && (\r\n            <span className=\"ml-3 inline-flex items-center\">\r\n              <RefreshCw className=\"animate-spin h-3 w-3 mr-1\" />\r\n              Atualizando...\r\n            </span>\r\n          )}\r\n        </div>\r\n      )}\r\n\r\n      {!selectedCredential ? (\r\n        <motion.div\r\n          className=\"bg-white rounded-lg shadow-md p-6 text-center\"\r\n          initial={{ opacity: 0, y: 20 }}\r\n          animate={{ opacity: 1, y: 0 }}\r\n          transition={{ duration: 0.3 }}\r\n        >\r\n          <p className=\"text-gray-500 mb-4\">Selecione uma credencial AWS para começar a avaliação de conformidade.</p>\r\n        </motion.div>\r\n      ) : loading ? (\r\n        <motion.div\r\n          className=\"bg-white rounded-lg shadow-md p-12 flex justify-center items-center\"\r\n          initial={{ opacity: 0, y: 20 }}\r\n          animate={{ opacity: 1, y: 0 }}\r\n          transition={{ duration: 0.3 }}\r\n        >\r\n          {scanning ? (\r\n            <div className=\"text-center\">\r\n              <div className=\"mb-4 relative h-20 w-20 mx-auto\">\r\n                <div className=\"absolute inset-0 rounded-full border-4 border-gray-200\"></div>\r\n                <div \r\n                  className=\"absolute inset-0 rounded-full border-4 border-indigo-500 border-t-transparent\"\r\n                  style={{ \r\n                    transform: `rotate(${scanProgress * 3.6}deg)`,\r\n                    transition: 'transform 0.5s ease' \r\n                  }}\r\n                ></div>\r\n                <div className=\"absolute inset-0 flex items-center justify-center text-lg font-semibold text-indigo-700\">\r\n                  {scanProgress}%\r\n                </div>\r\n              </div>\r\n              <p className=\"text-gray-500\">Verificando conformidade dos recursos...</p>\r\n            </div>\r\n          ) : (\r\n            <div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-indigo-500\"></div>\r\n          )}\r\n        </motion.div>\r\n      ) : error ? (\r\n        <motion.div\r\n          className=\"bg-white rounded-lg shadow-md p-6\"\r\n          initial={{ opacity: 0, y: 20 }}\r\n          animate={{ opacity: 1, y: 0 }}\r\n          transition={{ duration: 0.3 }}\r\n        >\r\n          <div className=\"p-4 bg-red-50 rounded-md\">\r\n            <p className=\"text-red-700\">{error}</p>\r\n          </div>\r\n        </motion.div>\r\n      ) : (\r\n        <>\r\n          {/* Botão de nova verificação */}\r\n          <div className=\"mb-6 flex justify-between\">\r\n            <div></div>\r\n            <button\r\n              onClick={runNewScan}\r\n              disabled={scanning}\r\n              className=\"flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-50\"\r\n            >\r\n              {scanning ? (\r\n                <>\r\n                  <RefreshCw className=\"animate-spin -ml-1 mr-2 h-4 w-4 text-white\" />\r\n                  Analisando...\r\n                </>\r\n              ) : (\r\n                <>\r\n                  <RefreshCw className=\"-ml-1 mr-2 h-4 w-4 text-white\" />\r\n                  Nova Verificação\r\n                </>\r\n              )}\r\n            </button>\r\n          </div>\r\n\r\n          {/* Cartões de padrões de conformidade */}\r\n          <motion.div\r\n            className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-4 gap-4 mb-6\"\r\n            initial={{ opacity: 0, y: 20 }}\r\n            animate={{ opacity: 1, y: 0 }}\r\n            transition={{ duration: 0.3 }}\r\n          >\r\n            {standards.map(standard => (\r\n              <div\r\n                key={standard.id}\r\n                className={`bg-white rounded-lg shadow-md p-4 cursor-pointer border-2 ${selectedStandard === standard.id ? 'border-indigo-500' : 'border-transparent'}`}\r\n                onClick={() => setSelectedStandard(selectedStandard === standard.id ? null : standard.id)}\r\n              >\r\n                <div className=\"flex justify-between items-start mb-3\">\r\n                  <div>\r\n                    <h3 className=\"text-lg font-medium text-gray-900\">{standard.name}</h3>\r\n                    <p className=\"text-xs text-gray-500\">{standard.description}</p>\r\n                  </div>\r\n                  <div className={`text-2xl font-bold ${getScoreColor(standard.complianceScore)}`}>\r\n                    {standard.complianceScore}%\r\n                  </div>\r\n                </div>\r\n                <div className=\"bg-gray-100 rounded-full h-1.5 mb-3\">\r\n                  <div\r\n                    className={`h-1.5 rounded-full ${standard.complianceScore >= 90 ? 'bg-green-500' : standard.complianceScore >= 70 ? 'bg-yellow-500' : 'bg-red-500'}`}\r\n                    style={{ width: `${standard.complianceScore}%` }}\r\n                  ></div>\r\n                </div>\r\n                <div className=\"flex justify-between text-xs text-gray-500\">\r\n                  <div>\r\n                    <span className=\"inline-block w-2 h-2 bg-green-500 rounded-full mr-1\"></span>\r\n                    {standard.passedControls} Aprovados\r\n                  </div>\r\n                  <div>\r\n                    <span className=\"inline-block w-2 h-2 bg-red-500 rounded-full mr-1\"></span>\r\n                    {standard.failedControls} Falhas\r\n                  </div>\r\n                  <div>\r\n                    <span className=\"inline-block w-2 h-2 bg-gray-500 rounded-full mr-1\"></span>\r\n                    {standard.notApplicableControls} N/A\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </motion.div>\r\n          \r\n          {/* Filtros e lista de controles */}\r\n          <motion.div\r\n            className=\"bg-white rounded-lg shadow-md overflow-hidden\"\r\n            initial={{ opacity: 0, y: 20 }}\r\n            animate={{ opacity: 1, y: 0 }}\r\n            transition={{ duration: 0.3, delay: 0.1 }}\r\n          >\r\n            {/* Filtros */}\r\n            <div className=\"border-b border-gray-200 bg-gray-50 p-4 flex flex-wrap gap-4\">\r\n              <div>\r\n                <label htmlFor=\"filter-standard\" className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                  Padrão de Conformidade\r\n                </label>\r\n                <select\r\n                  id=\"filter-standard\"\r\n                  value={selectedStandard || \"\"}\r\n                  onChange={(e) => setSelectedStandard(e.target.value || null)}\r\n                  className=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm\"\r\n                >\r\n                  <option value=\"\">Todos</option>\r\n                  {standards.map(standard => (\r\n                    <option key={standard.id} value={standard.id}>\r\n                      {standard.name}\r\n                    </option>\r\n                  ))}\r\n                </select>\r\n              </div>\r\n              <div>\r\n                <label htmlFor=\"filter-status\" className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                  Status\r\n                </label>\r\n                <select\r\n                  id=\"filter-status\"\r\n                  value={filterStatus || \"\"}\r\n                  onChange={(e) => setFilterStatus(e.target.value || null)}\r\n                  className=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm\"\r\n                >\r\n                  <option value=\"\">Todos</option>\r\n                  <option value=\"passed\">Aprovado</option>\r\n                  <option value=\"failed\">Falha</option>\r\n                  <option value=\"not_applicable\">Não Aplicável</option>\r\n                </select>\r\n              </div>\r\n              <div>\r\n                <label htmlFor=\"filter-severity\" className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                  Severidade\r\n                </label>\r\n                <select\r\n                  id=\"filter-severity\"\r\n                  value={filterSeverity || \"\"}\r\n                  onChange={(e) => setFilterSeverity(e.target.value || null)}\r\n                  className=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm\"\r\n                >\r\n                  <option value=\"\">Todas</option>\r\n                  <option value=\"critical\">Crítica</option>\r\n                  <option value=\"high\">Alta</option>\r\n                  <option value=\"medium\">Média</option>\r\n                  <option value=\"low\">Baixa</option>\r\n                </select>\r\n              </div>\r\n            </div>\r\n            \r\n            {/* Lista de controles */}\r\n            <div className=\"divide-y divide-gray-200\">\r\n              {filteredControls.length === 0 ? (\r\n                <div className=\"p-6 text-center\">\r\n                  <p className=\"text-gray-500\">Nenhum controle encontrado com os filtros atuais.</p>\r\n                </div>\r\n              ) : (\r\n                filteredControls.map((control) => {\r\n                  const standard = standards.find(s => s.id === control.standardId);\r\n                  return (\r\n                    <div key={control.id} className=\"p-4 hover:bg-gray-50\">\r\n                      <div className=\"flex items-start\">\r\n                        {/* Indicador de status */}\r\n                        <div className=\"mt-1 mr-4\">\r\n                          {getStatusIcon(control.status)}\r\n                        </div>\r\n                        \r\n                        {/* Conteúdo principal */}\r\n                        <div className=\"flex-1\">\r\n                          <div className=\"flex justify-between items-start mb-2\">\r\n                            <div>\r\n                              <div className=\"flex items-center gap-2\">\r\n                                <h4 className=\"text-base font-medium text-gray-900\">{control.title}</h4>\r\n                                <span className=\"text-xs text-gray-500 bg-gray-100 px-2 py-0.5 rounded-full\">\r\n                                  {standard?.name} | {control.id}\r\n                                </span>\r\n                              </div>\r\n                              <p className=\"text-sm text-gray-500 mt-1\">{control.description}</p>\r\n                            </div>\r\n                            <div className=\"flex space-x-2\">\r\n                              <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${getStatusColor(control.status)}`}>\r\n                                {control.status === 'passed' ? 'Aprovado' : \r\n                                control.status === 'failed' ? 'Falha' : 'N/A'}\r\n                              </span>\r\n                              <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${getSeverityColor(control.severity)}`}>\r\n                                {control.severity === 'critical' ? 'Crítica' : \r\n                                control.severity === 'high' ? 'Alta' : \r\n                                control.severity === 'medium' ? 'Média' : 'Baixa'}\r\n                              </span>\r\n                            </div>\r\n                          </div>\r\n                          \r\n                          {control.status === 'failed' && control.remediation && (\r\n                            <div className=\"mt-3 p-3 bg-blue-50 rounded-md\">\r\n                              <h5 className=\"text-xs font-medium text-blue-800 mb-1\">Recomendação:</h5>\r\n                              <p className=\"text-sm text-blue-700\">{control.remediation}</p>\r\n                              \r\n                              {control.resources && control.resources.length > 0 && (\r\n                                <div className=\"mt-2\">\r\n                                  <h5 className=\"text-xs font-medium text-blue-800 mb-1\">Recursos Afetados:</h5>\r\n                                  <div className=\"flex flex-wrap gap-2\">\r\n                                    {control.resources.map((resource, index) => (\r\n                                      <span key={index} className=\"px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-md\">\r\n                                        {resource}\r\n                                      </span>\r\n                                    ))}\r\n                                  </div>\r\n                                </div>\r\n                              )}\r\n                            </div>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  );\r\n                })\r\n              )}\r\n            </div>\r\n          </motion.div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n} "],"names":[],"mappings":"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","debugId":null}}]
}