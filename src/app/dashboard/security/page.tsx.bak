"use client";

import React from 'react';
import { useAlerts } from "@/hooks/useAlerts";
import { motion } from "framer-motion";
import { useState, useEffect } from "react";
import { useAwsCredentials } from "@/hooks/useAwsCredentials";
import { 
  Bell, AlertTriangle, AlertCircle, Info, 
  CheckCircle, XCircle, Archive, Shield, 
  Search, Filter, RefreshCw, Trash2, 
  User, Key, Lock, Database, Server,
  BarChart as BarChartIcon, PieChart as PieChartIcon,
  ChevronRight, ChevronDown, Eraser,
  Check, Slash, Clock, HardDrive, Cloud,
  FileText, Users, Settings, AlertOctagon,
  X, ExternalLink
} from "lucide-react";
import Link from "next/link";
import { useSearchParams } from "next/navigation";
import { 
  ResponsiveContainer, 
  PieChart, 
  Pie, 
  Cell, 
  BarChart, 
  Bar, 
  XAxis, 
  YAxis, 
  Tooltip, 
  Legend, 
  CartesianGrid,
  LineChart,
  Line,
  AreaChart,
  Area
} from "recharts";
import CredentialSelector from "@/components/aws/CredentialSelector";

export default function SecurityPage() {
  const { selectedCredential } = useAwsCredentials();
  const { 
    alerts, 
    loading, 
    error, 
    filters, 
    setFilters, 
    dismissAlert, 
    resolveAlert,
    fetchAlerts,
    fetchSecurityScore
  } = useAlerts();
  
  const searchParams = useSearchParams();
  const categoryParam = searchParams.get('category');

  const [cleanupLoading, setCleanupLoading] = useState(false);
  const [cleanupMessage, setCleanupMessage] = useState<string | null>(null);
  const [showCleanupMessage, setShowCleanupMessage] = useState(false);
  const [showFilters, setShowFilters] = useState(false);
  const [actionLoading, setActionLoading] = useState<string | null>(null);
  const [iamScanLoading, setIamScanLoading] = useState(false);
  const [iamScanMessage, setIamScanMessage] = useState<string | null>(null);
  const [showIamScanMessage, setShowIamScanMessage] = useState(false);
  const [activeCategory, setActiveCategory] = useState<string>('all'); // 'all', 'iam', 'ec2', etc.
  const [timeRange, setTimeRange] = useState<number>(7);
  const [viewMode, setViewMode] = useState<'dashboard' | 'list'>('dashboard');
  const [expandedSections, setExpandedSections] = useState<string[]>([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [severityFilters, setSeverityFilters] = useState<Record<string, boolean>>({
    'CRITICAL': true,
    'HIGH': true,
    'MEDIUM': true,
    'LOW': true,
    'INFO': true
  });
  const [statusFilters, setStatusFilters] = useState<Record<string, boolean>>({
    'OPEN': true,
    'IN_PROGRESS': true,
    'RESOLVED': true,
    'DISMISSED': false
  });
  
  // Estado para controlar o modal de detalhes do alerta
  const [selectedAlert, setSelectedAlert] = useState<any | null>(null);
  const [showModal, setShowModal] = useState(false);

  // Função para fechar o modal
  const closeModal = () => {
    setShowModal(false);
    setSelectedAlert(null);
  };

  // Função para abrir o modal com o alerta selecionado
  const openAlertDetails = (alert: any) => {
    setSelectedAlert(alert);
    setShowModal(true);
  };

  // Set initial category from URL parameter
  useEffect(() => {
    if (categoryParam) {
      setActiveCategory(categoryParam);
    }
  }, [categoryParam]);

  // Effect to show notification messages when they're set
  useEffect(() => {
    if (cleanupMessage) setShowCleanupMessage(true);
    if (iamScanMessage) setShowIamScanMessage(true);
  }, [cleanupMessage, iamScanMessage]);

  const handleDismiss = async (id: string) => {
    setActionLoading(id);
    await dismissAlert(id);
    setActionLoading(null);
  };

  const handleResolve = async (id: string) => {
    setActionLoading(id);
    await resolveAlert(id);
    setActionLoading(null);
  };

  const handleRefresh = async () => {
    await fetchAlerts();
    fetchSecurityScore();
  };

  const handleScanIAMThreats = async () => {
    if (!selectedCredential) {
      setIamScanMessage("Selecione uma credencial AWS para realizar a verificação");
      setShowIamScanMessage(true);
      return;
    }

    try {
      setIamScanLoading(true);
      setIamScanMessage(null);
      
      const response = await fetch('/api/alerts/iam', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          credentialId: selectedCredential.id
        })
      });
      
      if (!response.ok) {
        const data = await response.json();
        throw new Error(data.error || 'Erro ao verificar ameaças do IAM');
      }
      
      const result = await response.json();
      setIamScanMessage(result.message);
      setShowIamScanMessage(true);
      
      // Recarregar alertas
      await fetchAlerts();
      
      // Ativar a categoria IAM
      setActiveCategory('iam');
    } catch (error) {
      setIamScanMessage(`Erro: ${error instanceof Error ? error.message : 'Erro desconhecido'}`);
      setShowIamScanMessage(true);
    } finally {
      setIamScanLoading(false);
    }
  };

  const handleCleanupDuplicates = async () => {
    if (window.confirm("Deseja remover todos os alertas duplicados? Esta ação não pode ser desfeita.")) {
      try {
        setCleanupLoading(true);
        setCleanupMessage(null);
        
        const response = await fetch('/api/alerts/cleanup', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          }
        });
        
        if (!response.ok) {
          const data = await response.json();
          throw new Error(data.error || 'Erro ao limpar alertas duplicados');
        }
        
        const result = await response.json();
        setCleanupMessage(result.message);
        setShowCleanupMessage(true);
        
        // Recarregar alertas em vez de recarregar a página inteira
        await fetchAlerts();
      } catch (error) {
        setCleanupMessage(`Erro: ${error instanceof Error ? error.message : 'Erro desconhecido'}`);
        setShowCleanupMessage(true);
      } finally {
        setCleanupLoading(false);
      }
    }
  };
  
  // Adicionando função para limpar alertas mockados de EC2
  const handleCleanupEC2Alerts = async () => {
    if (window.confirm("Deseja excluir TODOS os alertas de EC2? Esta ação não pode ser desfeita.")) {
      try {
        setEc2CleanupLoading(true);
        setEc2CleanupMessage(null);
        
        const response = await fetch('/api/alerts/ec2/cleanup', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          }
        });
        
        if (!response.ok) {
          const data = await response.json();
          throw new Error(data.error || 'Erro ao limpar alertas de EC2');
        }
        
        const result = await response.json();
        console.log("Resultado da limpeza de EC2:", result);
        setEc2CleanupMessage(result.message);
        setShowEc2CleanupMessage(true);
        
        // Recarregar alertas após a limpeza
        await fetchAlerts();
      } catch (error) {
        console.error("Erro na limpeza de EC2:", error);
        setEc2CleanupMessage(`Erro: ${error instanceof Error ? error.message : 'Erro desconhecido'}`);
        setShowEc2CleanupMessage(true);
      } finally {
        setEc2CleanupLoading(false);
      }
    }
  };
  
  // Função para determinar a categoria de um alerta com base no tipo de recurso
  const getAlertCategory = (resourceType: string): string => {
    if (resourceType.startsWith('IAM') || resourceType === 'SecretManagerSecret') {
      return 'iam';
    } else if (resourceType.startsWith('EC2') || resourceType === 'SecurityGroup' || 
              resourceType === 'Volume' || resourceType === 'VPC' || 
              resourceType.includes('Gateway') || resourceType === 'Subnet' || 
              resourceType === 'RouteTable' || resourceType === 'NetworkInterface' || 
              resourceType === 'ElasticIP' || resourceType === 'NetworkACL' ||
              resourceType.includes('ACL')) {
      return 'ec2';
    } else if (resourceType.startsWith('S3') || resourceType.includes('Bucket')) {
      return 's3';
    } else if (resourceType.startsWith('RDS') || resourceType.startsWith('DB') || 
               resourceType.includes('Database')) {
      return 'rds';
    } else if (resourceType.startsWith('DynamoDB') || resourceType.includes('DynamoDB')) {
      return 'dynamodb';
    } else if (resourceType.startsWith('Lambda')) {
      return 'lambda';
    }
    
    // Log tipos desconhecidos para depuração
    console.log('Tipo de recurso não categorizado:', resourceType);
    return 'other';
  };

  // Função para formatar o tipo de recurso para exibição
  const formatResourceType = (resourceType: string): string => {
    // Identificar o prefixo do serviço
    let prefix = '';
    let name = resourceType;
    
    if (resourceType.startsWith('IAM')) {
      prefix = 'IAM';
      name = resourceType.substring(3);
    } else if (resourceType.startsWith('EC2')) {
      prefix = 'EC2';
      name = resourceType.substring(3);
    } else if (resourceType.startsWith('S3')) {
      prefix = 'S3';
      name = resourceType.substring(2);
    } else if (resourceType.startsWith('RDS')) {
      prefix = 'RDS';
      name = resourceType.substring(3);
    } else if (resourceType.startsWith('DB')) {
      prefix = 'DB';
      name = resourceType.substring(2);
    } else if (resourceType.startsWith('DynamoDB')) {
      prefix = 'DynamoDB';
      name = resourceType.substring(8);
    } else if (resourceType.startsWith('Lambda')) {
      prefix = 'Lambda';
      name = resourceType.substring(6);
    }
    
    // Se o nome começar com letra maiúscula e não tiver espaço, 
    // adiciona um espaço antes de cada letra maiúscula (exceto a primeira)
    if (name.length > 0 && /^[A-Z]/.test(name) && !name.includes(' ')) {
      name = name.replace(/([A-Z])/g, ' $1').trim();
    }
    
    return prefix ? `${prefix}-${name}` : resourceType;
  };

  const filteredAlerts = alerts.filter(alert => {
    // Log para depuração
    console.log("Filtrando alerta:", alert.title, alert.resourceType, alert.status, getAlertCategory(alert.resourceType));
    
    // Filtrar por status - "active" pode ser armazenado como "OPEN" em alguns lugares
    // Vamos considerar ambos para garantir
    const statusMatches = alert.status === 'active' || alert.status === 'OPEN';
    if (!statusMatches && !statusFilters[alert.status as keyof typeof statusFilters]) {
      return false;
    }
    
    // Filtrar por categoria
    if (activeCategory === 'iam') {
      return getAlertCategory(alert.resourceType) === 'iam';
    } else if (activeCategory === 'ec2') {
      return getAlertCategory(alert.resourceType) === 'ec2';
    } else if (activeCategory === 's3') {
      return getAlertCategory(alert.resourceType) === 's3';
    } else if (activeCategory === 'rds') {
      return getAlertCategory(alert.resourceType) === 'rds';
    }
    
    // 'all' retorna todos os alertas
    return true;
  });
  
  // Log para depuração
  console.log("Total de alertas:", alerts.length, "Alertas filtrados:", filteredAlerts.length);
  if (activeCategory === 'ec2') {
    console.log("Alertas EC2 filtrados:", filteredAlerts.length);
    console.log("Tipos de recursos EC2:", filteredAlerts.map(a => a.resourceType));
    console.log("Status de alertas EC2:", filteredAlerts.map(a => a.status));
  }

  // Helper functions for severity and status
  type SeverityType = 'CRITICAL' | 'HIGH' | 'MEDIUM' | 'LOW' | 'INFO';
  type StatusType = 'OPEN' | 'IN_PROGRESS' | 'RESOLVED' | 'DISMISSED';

  const getSeverityLabel = (severity: SeverityType) => {
    const labels = {
      'CRITICAL': 'Crítico',
      'HIGH': 'Alto',
      'MEDIUM': 'Médio',
      'LOW': 'Baixo',
      'INFO': 'Informativo'
    };
    return labels[severity];
  };

  const getStatusLabel = (status: StatusType) => {
    const labels = {
      'OPEN': 'Aberto',
      'IN_PROGRESS': 'Em Progresso',
      'RESOLVED': 'Resolvido',
      'DISMISSED': 'Ignorado'
    };
    return labels[status];
  };

  const getSeverityIcon = (severity: SeverityType, options = {}) => {
    switch (severity) {
      case 'CRITICAL':
        return <AlertCircle className="text-red-600" {...options} />;
      case 'HIGH':
        return <AlertTriangle className="text-orange-500" {...options} />;
      case 'MEDIUM':
        return <AlertTriangle className="text-yellow-500" {...options} />;
      case 'LOW':
        return <Info className="text-blue-500" {...options} />;
      case 'INFO':
        return <Info className="text-gray-500" {...options} />;
      default:
        return <Info className="text-gray-500" {...options} />;
    }
  };

  const getStatusIcon = (status: StatusType, options = {}) => {
    switch (status) {
      case 'OPEN':
        return <AlertCircle className="text-red-500" {...options} />;
      case 'IN_PROGRESS':
        return <Clock className="text-orange-500" {...options} />;
      case 'RESOLVED':
        return <Check className="text-green-500" {...options} />;
      case 'DISMISSED':
        return <Slash className="text-gray-500" {...options} />;
      default:
        return <Info className="text-gray-500" {...options} />;
    }
  };

  const getSeverityFilterClass = (severity: keyof typeof severityFilters) => {
    const classes = {
      'CRITICAL': 'bg-red-100 text-red-800',
      'HIGH': 'bg-orange-100 text-orange-800',
      'MEDIUM': 'bg-yellow-100 text-yellow-800',
      'LOW': 'bg-blue-100 text-blue-800',
      'INFO': 'bg-gray-100 text-gray-800'
    };
    return classes[severity as keyof typeof classes] || 'bg-gray-100 text-gray-800';
  };

  const getStatusFilterClass = (status: keyof typeof statusFilters) => {
    return statusFilters[status] 
      ? 'bg-green-100 text-green-800 border-green-300' 
      : 'bg-gray-100 text-gray-500 border-gray-300';
  };

  const toggleSeverityFilter = (severity: keyof typeof severityFilters) => {
    setSeverityFilters(prev => ({
      ...prev,
      [severity]: !prev[severity]
    }));
  };

  const toggleStatusFilter = (status: keyof typeof statusFilters) => {
    setStatusFilters(prev => ({
      ...prev,
      [status]: !prev[status]
    }));
  };

  const resetFilters = () => {
    setActiveCategory('all');
    setTimeRange(7);
    setSeverityFilters({
      'CRITICAL': true,
      'HIGH': true,
      'MEDIUM': true,
      'LOW': true,
      'INFO': true
    });
    setStatusFilters({
      'OPEN': true,
      'IN_PROGRESS': true,
      'RESOLVED': true,
      'DISMISSED': false
    });
    setSearchTerm('');
    setShowFilters(false);
  };
  
  const getResourceTypeIcon = (resourceType: string) => {
    switch (resourceType) {
      case 'IAMUser':
        return <User className="w-5 h-5" />;
      case 'IAMAccessKey':
        return <Key className="w-5 h-5" />;
      case 'IAMPolicy':
        return <FileText className="w-5 h-5" />;
      case 'SecretManagerSecret':
        return <Lock className="w-5 h-5" />;
      case 'EC2Instance':
        return <Server className="w-5 h-5" />;
      case 'SecurityGroup':
        return <Shield className="w-5 h-5" />;
      case 'Volume':
        return <HardDrive className="w-5 h-5" />;
      case 'S3Bucket':
        return <Cloud className="w-5 h-5" />;
      case 'RDSInstance':
        return <Database className="w-5 h-5" />;
      case 'IAMRole':
        return <Users className="w-5 h-5" />;
      default:
        return <Info className="w-5 h-5" />;
    }
  };
  
  const getResourceTypeText = (resourceType: string): string => {
    const formattedType = formatResourceType(resourceType);
    
    const mapping: Record<string, string> = {
      'IAM-User': 'Usuário IAM',
      'IAM-Access Key': 'Chave de Acesso IAM',
      'IAM-Policy': 'Política IAM',
      'IAM-Role': 'Função IAM',
      'SecretManagerSecret': 'Secret Manager',
      'EC2-Instance': 'Instância EC2',
      'SecurityGroup': 'Grupo de Segurança',
      'Volume': 'Volume EBS',
      'S3-Bucket': 'Bucket S3',
      'RDS-Instance': 'Instância RDS',
      'DynamoDB-Table': 'Tabela DynamoDB',
      'Lambda-Function': 'Função Lambda'
    };
    
    return mapping[formattedType] || formattedType;
  };

  // Estatísticas
  const activeCount = filteredAlerts.filter(a => a.status === 'active').length;
  const criticalCount = filteredAlerts.filter(a => a.severity === 'CRITICAL' && a.status === 'active').length;
  const highCount = filteredAlerts.filter(a => a.severity === 'HIGH' && a.status === 'active').length;
  const mediumCount = filteredAlerts.filter(a => a.severity === 'MEDIUM' && a.status === 'active').length;
  const lowCount = filteredAlerts.filter(a => a.severity === 'LOW' && a.status === 'active').length;
  
  // Estatísticas por tipo
  const iamAlertCount = alerts.filter(a => 
    getAlertCategory(a.resourceType) === 'iam' && 
    a.status === 'active'
  ).length;
  
  const ec2AlertCount = alerts.filter(a => 
    getAlertCategory(a.resourceType) === 'ec2' && 
    a.status === 'active'
  ).length;
  
  const s3AlertCount = alerts.filter(a => 
    getAlertCategory(a.resourceType) === 's3' && 
    a.status === 'active'
  ).length;
  
  const rdsAlertCount = alerts.filter(a => 
    getAlertCategory(a.resourceType) === 'rds' && 
    a.status === 'active'
  ).length;

  // Data for charts
  const severityData = [
    { name: 'Crítico', value: criticalCount, color: '#EF4444' },
    { name: 'Alto', value: highCount, color: '#F97316' },
    { name: 'Médio', value: mediumCount, color: '#EAB308' },
    { name: 'Baixo', value: lowCount, color: '#3B82F6' },
  ];

  const serviceData = [
    { name: 'IAM', value: iamAlertCount, color: '#F97316' },
    { name: 'EC2', value: ec2AlertCount, color: '#3B82F6' },
    { name: 'S3', value: s3AlertCount, color: '#EAB308' },
    { name: 'RDS', value: rdsAlertCount, color: '#10B981' },
  ];

  // Group alerts by date for trend chart
  const getAlertsByDate = () => {
    const dates = new Map();
    const now = new Date();
    const days = timeRange === 7 ? 7 : timeRange === 30 ? 30 : 90;
    
    // Initialize all dates in the range with zero counts
    for (let i = 0; i < days; i++) {
      const date = new Date(now);
      date.setDate(date.getDate() - i);
      const dateStr = date.toISOString().split('T')[0];
      dates.set(dateStr, { date: dateStr, critical: 0, high: 0, medium: 0, low: 0, total: 0 });
    }
    
    // Count alerts by date and severity
    alerts.forEach(alert => {
      const date = new Date(alert.createdAt).toISOString().split('T')[0];
      if (dates.has(date)) {
        const entry = dates.get(date);
        entry.total++;
        
        if (alert.severity === 'CRITICAL') entry.critical++;
        else if (alert.severity === 'HIGH') entry.high++;
        else if (alert.severity === 'MEDIUM') entry.medium++;
        else if (alert.severity === 'LOW') entry.low++;
      }
    });
    
    // Convert to array and sort by date
    return Array.from(dates.values())
      .sort((a, b) => a.date.localeCompare(b.date));
  };

  // Get alerts by resource type
  const getAlertsByResourceType = () => {
    const counts = new Map();
    
    alerts.filter(a => a.status === 'active').forEach(alert => {
      const type = getResourceTypeText(alert.resourceType);
      counts.set(type, (counts.get(type) || 0) + 1);
    });
    
    return Array.from(counts.entries())
      .map(([name, value]) => ({ name, value }))
      .sort((a, b) => b.value - a.value);
  };

  const trendData = getAlertsByDate();
  const resourceTypeData = getAlertsByResourceType();

  interface SectionHeaderProps {
    title: string;
    count: number;
    icon: React.ReactNode;
    isExpanded: boolean;
    onClick: () => void;
  }
  
  function SectionHeader({ title, count, icon, isExpanded, onClick }: SectionHeaderProps) {
    return (
      <button
        className="w-full px-6 py-4 flex items-center justify-between hover:bg-gray-50 transition-colors"
        onClick={onClick}
      >
        <div className="flex items-center">
          {icon}
          <h2 className="ml-2 text-base font-medium text-gray-900">{title}</h2>
          {count > 0 && (
            <span className="ml-2 px-2 py-0.5 bg-red-100 text-red-800 text-xs rounded-full">
              {count}
            </span>
          )}
        </div>
        <svg
          className={`h-5 w-5 text-gray-500 transform transition-transform ${isExpanded ? 'rotate-180' : ''}`}
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 20 20"
          fill="currentColor"
        >
          <path fillRule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clipRule="evenodd" />
        </svg>
      </button>
    );
  }

  const getSeverityColor = (severity: string) => {
    const colors: Record<string, string> = {
      'CRITICAL': 'text-red-600',
      'HIGH': 'text-orange-500',
      'MEDIUM': 'text-yellow-500',
      'LOW': 'text-blue-500',
      'INFO': 'text-gray-500'
    };
    return colors[severity] || 'text-gray-500';
  };

  const getSeverityBorderColor = (severity: string): string => {
    const colors: Record<string, string> = {
      'CRITICAL': 'border-red-600',
      'HIGH': 'border-orange-500',
      'MEDIUM': 'border-yellow-500',
      'LOW': 'border-blue-500',
      'INFO': 'border-gray-500'
    };
    return colors[severity] || 'border-gray-500';
  };

  const getSeverityText = (severity: string): string => {
    return getSeverityLabel(severity as SeverityType);
  };

  return (
    <div className="container mx-auto py-6">
      <div className="flex flex-col lg:flex-row justify-between items-start lg:items-center mb-6 gap-4">
        <motion.div
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.3 }}
        >
          <h1 className="text-3xl font-bold flex items-center gap-2 text-gray-900">
            <Shield className="h-8 w-8 text-indigo-600" /> 
            Segurança
          </h1>
          <p className="text-gray-600 mt-1">
            Gerencie e resolva problemas de segurança na sua infraestrutura AWS
          </p>
        </motion.div>
        
        <div className="flex flex-col w-full lg:w-auto">
          <CredentialSelector />
          
          <div className="flex flex-wrap gap-2 mt-4 justify-end">
            <div className="inline-flex rounded-md shadow-sm">
              <button
                onClick={() => setViewMode('dashboard')}
                className={`px-4 py-2 text-sm font-medium rounded-l-lg border ${
                  viewMode === 'dashboard' 
                    ? 'bg-indigo-50 text-indigo-700 border-indigo-300' 
                    : 'bg-white text-gray-700 border-gray-300 hover:bg-gray-50'
                }`}
              >
                <span className="flex items-center gap-2">
                  <PieChartIcon className="h-4 w-4" />
                  Dashboard
                </span>
              </button>
              <button
                onClick={() => setViewMode('list')}
                className={`px-4 py-2 text-sm font-medium rounded-r-lg border-t border-r border-b ${
                  viewMode === 'list' 
                    ? 'bg-indigo-50 text-indigo-700 border-indigo-300' 
                    : 'bg-white text-gray-700 border-gray-300 hover:bg-gray-50'
                }`}
              >
                <span className="flex items-center gap-2">
                  <Bell className="h-4 w-4" />
                  Alertas
                </span>
              </button>
            </div>
            
            <button
              onClick={handleRefresh}
              className="px-4 py-2 flex items-center gap-2 bg-white text-indigo-700 border border-indigo-300 rounded-lg shadow-sm hover:bg-indigo-50 transition-colors"
              disabled={loading}
            >
              <RefreshCw className={`h-4 w-4 ${loading ? 'animate-spin' : ''}`} />
              Atualizar
            </button>
            
            <button 
              onClick={() => setShowFilters(!showFilters)}
              className={`px-4 py-2 flex items-center gap-2 rounded-lg shadow-sm border transition-colors ${
                showFilters 
                  ? 'bg-blue-50 text-blue-700 border-blue-300' 
                  : 'bg-white text-gray-700 border-gray-300 hover:bg-gray-50'
              }`}
            >
              <Filter className="h-4 w-4" />
              Filtros
            </button>
          </div>
        </div>
      </div>

      {/* Tab Navigation */}
      <div className="border-b border-gray-200 mb-6">
        <nav className="flex -mb-px space-x-8 overflow-x-auto scrollbar-hide">
          <button
            onClick={() => setActiveCategory("all")}
            className={`whitespace-nowrap px-1 py-4 text-sm font-medium border-b-2 ${
              activeCategory === "all" 
                ? "border-indigo-500 text-indigo-600"
                : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300"
            }`}
          >
            <span className="flex items-center">
              <Shield className="mr-2 h-5 w-5" />
              Todos os Serviços
            </span>
          </button>
          <button
            onClick={() => setActiveCategory("iam")}
            className={`whitespace-nowrap px-1 py-4 text-sm font-medium border-b-2 ${
              activeCategory === "iam" 
                ? "border-orange-500 text-orange-600"
                : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300"
            }`}
          >
            <span className="flex items-center">
              <User className="mr-2 h-5 w-5" />
              IAM & Secrets
              {iamScanLoading && <RefreshCw className="ml-2 h-4 w-4 animate-spin" />}
            </span>
          </button>
          <button
            onClick={() => setActiveCategory("ec2")}
            className={`whitespace-nowrap px-1 py-4 text-sm font-medium border-b-2 ${
              activeCategory === "ec2" 
                ? "border-blue-500 text-blue-600"
                : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300"
            }`}
          >
            <span className="flex items-center">
              <Server className="mr-2 h-5 w-5" />
              EC2 & Rede
            </span>
          </button>
          <button
            onClick={() => setActiveCategory("s3")}
            className={`whitespace-nowrap px-1 py-4 text-sm font-medium border-b-2 ${
              activeCategory === "s3" 
                ? "border-yellow-500 text-yellow-600"
                : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300"
            }`}
          >
            <span className="flex items-center">
              <Database className="mr-2 h-5 w-5" />
              S3 Storage
            </span>
          </button>
          <button
            onClick={() => setActiveCategory("rds")}
            className={`whitespace-nowrap px-1 py-4 text-sm font-medium border-b-2 ${
              activeCategory === "rds" 
                ? "border-green-500 text-green-600"
                : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300"
            }`}
          >
            <span className="flex items-center">
              <Database className="mr-2 h-5 w-5" />
              RDS
            </span>
          </button>
        </nav>
      </div>

      {/* Mensagens de status */}
      {showCleanupMessage && cleanupMessage && (
        <div className="mb-4 p-3 bg-green-50 text-green-800 rounded-lg border border-green-200 shadow-sm flex items-center justify-between">
          <div className="flex items-center">
            <CheckCircle className="h-5 w-5 mr-2 text-green-500" />
            {cleanupMessage}
          </div>
          <button 
            onClick={() => setShowCleanupMessage(false)} 
            className="p-1 rounded-full hover:bg-green-100"
            aria-label="Fechar notificação"
          >
            <X className="h-4 w-4 text-green-700" />
          </button>
        </div>
      )}
      
      {showIamScanMessage && iamScanMessage && (
        <div className="mb-4 p-3 bg-blue-50 text-blue-800 rounded-lg border border-blue-200 shadow-sm flex items-center justify-between">
          <div className="flex items-center">
            <Info className="h-5 w-5 mr-2 text-blue-500" />
            {iamScanMessage}
          </div>
          <button 
            onClick={() => setShowIamScanMessage(false)} 
            className="p-1 rounded-full hover:bg-blue-100"
            aria-label="Fechar notificação"
          >
            <X className="h-4 w-4 text-blue-700" />
          </button>
        </div>
      )}
      
      {showEc2CleanupMessage && ec2CleanupMessage && (
        <div className="mb-4 p-3 bg-blue-50 text-blue-800 rounded-lg border border-blue-200 shadow-sm flex items-center justify-between">
          <div className="flex items-center">
            <Info className="h-5 w-5 mr-2 text-blue-500" />
            {ec2CleanupMessage}
          </div>
          <button 
            onClick={() => setShowEc2CleanupMessage(false)} 
            className="p-1 rounded-full hover:bg-blue-100"
            aria-label="Fechar notificação"
          >
            <X className="h-4 w-4 text-blue-700" />
          </button>
        </div>
      )}

      {/* Botões de verificação específica para cada categoria */}
      {activeCategory === "iam" && (
        <div className="mb-4">
          <button
            onClick={handleScanIAMThreats}
            className="px-4 py-2 flex items-center gap-2 w-full bg-orange-100 text-orange-700 border border-orange-300 rounded-lg shadow-sm hover:bg-orange-200 transition-colors"
            disabled={iamScanLoading}
          >
            {iamScanLoading ? (
              <>
                <RefreshCw className="h-5 w-5 animate-spin" />
                <span>Verificando Problemas no IAM...</span>
              </>
            ) : (
              <>
                <User className="h-5 w-5" />
                <span>Verificar Segurança de IAM e Segredos</span>
              </>
            )}
          </button>
        </div>
      )}
      
      {activeCategory === "ec2" && (
        <div className="mb-4">
          <button
            onClick={handleCleanupEC2Alerts}
            className="px-4 py-2 flex items-center gap-2 w-full bg-blue-100 text-blue-700 border border-blue-300 rounded-lg shadow-sm hover:bg-blue-200 transition-colors"
            disabled={ec2CleanupLoading}
          >
            {ec2CleanupLoading ? (
              <>
                <RefreshCw className="h-5 w-5 animate-spin" />
                Limpando...
              </>
            ) : (
              <>
                <Eraser className="h-4 w-4" />
                Limpar Duplicados
              </>
            )}
          </button>
        </div>
      )}

      {/* Filtros */}
      {showFilters && (
        <motion.div 
          className="bg-white shadow-md rounded-lg p-5 mb-6 border border-gray-200"
          initial={{ opacity: 0, height: 0 }}
          animate={{ opacity: 1, height: 'auto' }}
          transition={{ duration: 0.3 }}
        >
          <h2 className="text-lg font-medium mb-4 flex items-center">
            <Filter className="h-5 w-5 mr-2 text-indigo-600" />
            Filtrar Alertas
          </h2>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            <div>
              <p className="text-sm font-medium mb-3 text-gray-700">Por Categoria</p>
              <div className="flex flex-wrap gap-2">
                <button 
                  onClick={() => setActiveCategory('all')}
                  className={`px-3 py-2 text-sm rounded-md ${activeCategory === 'all' ? 'bg-indigo-100 text-indigo-800 font-medium' : 'bg-gray-100 hover:bg-gray-200'}`}
                >
                  Todos
                </button>
                <button 
                  onClick={() => setActiveCategory('iam')}
                  className={`px-3 py-2 text-sm rounded-md flex items-center gap-1 ${activeCategory === 'iam' ? 'bg-orange-100 text-orange-800 font-medium' : 'bg-gray-100 hover:bg-gray-200'}`}
                >
                  <User className="h-3 w-3" /> IAM ({iamAlertCount})
                </button>
                <button 
                  onClick={() => setActiveCategory('ec2')}
                  className={`px-3 py-2 text-sm rounded-md flex items-center gap-1 ${activeCategory === 'ec2' ? 'bg-blue-100 text-blue-800 font-medium' : 'bg-gray-100 hover:bg-gray-200'}`}
                >
                  <Server className="h-3 w-3" /> EC2 ({ec2AlertCount})
                </button>
                <button 
                  onClick={() => setActiveCategory('s3')}
                  className={`px-3 py-2 text-sm rounded-md flex items-center gap-1 ${activeCategory === 's3' ? 'bg-yellow-100 text-yellow-800 font-medium' : 'bg-gray-100 hover:bg-gray-200'}`}
                >
                  <Database className="h-3 w-3" /> S3 ({s3AlertCount})
                </button>
                <button 
                  onClick={() => setActiveCategory('rds')}
                  className={`px-3 py-2 text-sm rounded-md flex items-center gap-1 ${activeCategory === 'rds' ? 'bg-green-100 text-green-800 font-medium' : 'bg-gray-100 hover:bg-gray-200'}`}
                >
                  <Database className="h-3 w-3" /> RDS ({rdsAlertCount})
                </button>
              </div>
            </div>

            <div>
              <p className="text-sm font-medium mb-3 text-gray-700">Por Severidade</p>
              <div className="flex flex-wrap gap-2">
                {Object.entries(severityFilters).map(([key, active]) => (
                  <button
                    key={key}
                    onClick={() => toggleSeverityFilter(key as keyof typeof severityFilters)}
                    className={`px-3 py-2 text-sm rounded-md flex items-center gap-1 ${
                      active 
                        ? getSeverityFilterClass(key as keyof typeof severityFilters) 
                        : 'bg-gray-100 text-gray-500 hover:bg-gray-200'
                    }`}
                  >
                    {getSeverityIcon(key as SeverityType, { size: 14 })}
                    {getSeverityLabel(key as SeverityType)}
                  </button>
                ))}
              </div>
            </div>

            <div>
              <p className="text-sm font-medium mb-3 text-gray-700">Por Status</p>
              <div className="flex flex-wrap gap-2">
                {Object.entries(statusFilters).map(([key, active]) => (
                  <button
                    key={key}
                    onClick={() => toggleStatusFilter(key as keyof typeof statusFilters)}
                    className={`px-3 py-2 text-sm rounded-md flex items-center gap-1 ${
                      active 
                        ? getStatusFilterClass(key as keyof typeof statusFilters) 
                        : 'bg-gray-100 text-gray-500 hover:bg-gray-200'
                    }`}
                  >
                    {getStatusIcon(key as StatusType, { size: 14 })}
                    {getStatusLabel(key as StatusType)}
                  </button>
                ))}
              </div>
            </div>

            <div>
              <p className="text-sm font-medium mb-3 text-gray-700">Período</p>
              <div className="flex flex-wrap gap-2">
                <button
                  onClick={() => setTimeRange(7)}
                  className={`px-3 py-2 text-sm rounded-md ${
                    timeRange === 7 
                      ? 'bg-indigo-100 text-indigo-800 font-medium' 
                      : 'bg-gray-100 hover:bg-gray-200'
                  }`}
                >
                  7 dias
                </button>
                <button
                  onClick={() => setTimeRange(30)}
                  className={`px-3 py-2 text-sm rounded-md ${
                    timeRange === 30 
                      ? 'bg-indigo-100 text-indigo-800 font-medium' 
                      : 'bg-gray-100 hover:bg-gray-200'
                  }`}
                >
                  30 dias
                </button>
                <button
                  onClick={() => setTimeRange(90)}
                  className={`px-3 py-2 text-sm rounded-md ${
                    timeRange === 90 
                      ? 'bg-indigo-100 text-indigo-800 font-medium' 
                      : 'bg-gray-100 hover:bg-gray-200'
                  }`}
                >
                  90 dias
                </button>
              </div>
            </div>
          </div>
          
          <div className="flex justify-end mt-4">
            <button
              onClick={() => resetFilters()}
              className="px-4 py-2 text-sm text-gray-600 hover:text-gray-800 flex items-center gap-1"
            >
              <Trash2 className="h-4 w-4" /> Limpar Filtros
            </button>
          </div>
        </motion.div>
      )}

      {/* Dashboard View */}
      {viewMode === 'dashboard' ? (
        <div className="space-y-6">
          {/* Alertas por severidade */}
          <div className="mb-6">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-xl font-semibold flex items-center gap-2 text-gray-900">
                <AlertCircle className="h-5 w-5 text-red-500" />
                Resumo de Alertas
              </h2>

              <div className="flex items-center gap-4">
                <button
                  onClick={handleCleanupDuplicates}
                  className="px-4 py-2 text-sm flex items-center gap-2 bg-white text-gray-700 border border-gray-300 rounded-lg shadow-sm hover:bg-gray-50 transition-colors"
                  disabled={cleanupLoading}
                >
                  {cleanupLoading ? (
                    <>
                      <RefreshCw className="h-4 w-4 animate-spin" />
                      Limpando...
                    </>
                  ) : (
                    <>
                      <Eraser className="h-4 w-4" />
                      Limpar Duplicados
                    </>
                  )}
                </button>
                
                <div className="relative">
                  <input
                    type="text"
                    placeholder="Buscar alertas..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    className="pl-9 pr-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:ring-indigo-500 focus:border-indigo-500 text-sm"
                  />
                  <Search className="h-4 w-4 text-gray-400 absolute left-3 top-2.5" />
                </div>
              </div>
            </div>

            {/* Alert Summary */}
            <div className="mb-6 grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
              <motion.div 
                initial={{ opacity: 0, y: 10 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: 0.1 }}
                className="bg-red-50 rounded-lg p-4 border border-red-200"
              >
                <div className="flex items-center">
                  <AlertCircle className="h-8 w-8 text-red-500 mr-3" />
                  <div>
                    <p className="text-sm text-red-800">Críticos</p>
                    <p className="text-3xl font-bold text-red-900">{criticalCount}</p>
                  </div>
                </div>
              </motion.div>
              
              <motion.div 
                initial={{ opacity: 0, y: 10 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: 0.2 }}
                className="bg-orange-50 rounded-lg p-4 border border-orange-200"
              >
                <div className="flex items-center">
                  <AlertTriangle className="h-8 w-8 text-orange-500 mr-3" />
                  <div>
                    <p className="text-sm text-orange-800">Alta Severidade</p>
                    <p className="text-3xl font-bold text-orange-900">{highCount}</p>
                  </div>
                </div>
              </motion.div>
              
              <motion.div 
                initial={{ opacity: 0, y: 10 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: 0.3 }}
                className="bg-yellow-50 rounded-lg p-4 border border-yellow-200"
              >
                <div className="flex items-center">
                  <AlertTriangle className="h-8 w-8 text-yellow-500 mr-3" />
                  <div>
                    <p className="text-sm text-yellow-800">Média Severidade</p>
                    <p className="text-3xl font-bold text-yellow-900">{mediumCount}</p>
                  </div>
                </div>
              </motion.div>
              
              <motion.div 
                initial={{ opacity: 0, y: 10 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: 0.4 }}
                className="bg-blue-50 rounded-lg p-4 border border-blue-200"
              >
                <div className="flex items-center">
                  <Info className="h-8 w-8 text-blue-500 mr-3" />
                  <div>
                    <p className="text-sm text-blue-800">Baixa Severidade</p>
                    <p className="text-3xl font-bold text-blue-900">{lowCount}</p>
                  </div>
                </div>
              </motion.div>
            </div>

            {/* Dashboard Graphs Grid Layout */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {/* Severity Distribution */}
              <div className="bg-white shadow rounded p-6">
                <h2 className="text-xl font-semibold flex items-center gap-2 mb-4 text-gray-900">
                  <AlertTriangle className="h-5 w-5 text-indigo-600" />
                  Resumo de Severidade
                </h2>
                
                {/* Severity Pie Chart */}
                <div className="h-64">
                  <ResponsiveContainer width="100%" height="100%">
                    <PieChart>
                      <Pie
                        data={severityData}
                        cx="50%"
                        cy="50%"
                        labelLine={false}
                        outerRadius={80}
                        fill="#8884d8"
                        dataKey="value"
                        label={({ name, value }) => value > 0 ? `${name}: ${value}` : ''}
                      >
                        {severityData.map((entry, index) => (
                          <Cell key={`cell-${index}`} fill={entry.color} />
                        ))}
                      </Pie>
                      <Tooltip formatter={(value) => [`${value} alertas`, 'Quantidade']} />
                      <Legend />
                    </PieChart>
                  </ResponsiveContainer>
                </div>
              </div>
              
              {/* Service Distribution */}
              <div className="bg-white shadow rounded p-6">
                <h2 className="text-xl font-semibold flex items-center gap-2 mb-4 text-gray-900">
                  <Database className="h-5 w-5 text-indigo-600" />
                  Distribuição por Serviço
                </h2>
                
                {/* Service Pie Chart */}
                <div className="h-64">
                  <ResponsiveContainer width="100%" height="100%">
                    <PieChart>
                      <Pie
                        data={serviceData}
                        cx="50%"
                        cy="50%"
                        labelLine={false}
                        outerRadius={80}
                        fill="#8884d8"
                        dataKey="value"
                        label={({ name, value }) => value > 0 ? `${name}: ${value}` : ''}
                      >
                        {serviceData.map((entry, index) => (
                          <Cell key={`cell-${index}`} fill={entry.color} />
                        ))}
                      </Pie>
                      <Tooltip formatter={(value) => [`${value} alertas`, 'Quantidade']} />
                      <Legend />
                    </PieChart>
                  </ResponsiveContainer>
                </div>
              </div>
              
              {/* Trend Chart */}
              <div className="bg-white shadow rounded p-6">
                <h2 className="text-xl font-semibold flex items-center gap-2 mb-4 text-gray-900">
                  <BarChartIcon className="h-5 w-5 text-indigo-600" />
                  Tendência de Alertas (Últimos {timeRange === 7 ? '7 dias' : timeRange === 30 ? '30 dias' : '90 dias'})
                </h2>
                <div className="h-72">
                  <ResponsiveContainer width="100%" height="100%">
                    <AreaChart data={trendData}>
                      <CartesianGrid strokeDasharray="3 3" />
                      <XAxis dataKey="date" tickFormatter={(value) => new Date(value).toLocaleDateString()} />
                      <YAxis />
                      <Tooltip 
                        formatter={(value, name) => {
                          const nameMap: Record<string, string> = {
                            critical: 'Crítico',
                            high: 'Alto',
                            medium: 'Médio',
                            low: 'Baixo',
                            total: 'Total'
                          };
                          return [value, nameMap[name as string] || name];
                        }}
                        labelFormatter={(value) => new Date(value).toLocaleDateString()}
                      />
                      <Legend formatter={(value) => {
                        const nameMap: Record<string, string> = {
                          critical: 'Crítico',
                          high: 'Alto',
                          medium: 'Médio',
                          low: 'Baixo',
                          total: 'Total'
                        };
                        return nameMap[value as string] || value;
                      }} />
                      <Area type="monotone" dataKey="critical" stackId="1" stroke="#EF4444" fill="#FEE2E2" />
                      <Area type="monotone" dataKey="high" stackId="1" stroke="#F97316" fill="#FFEDD5" />
                      <Area type="monotone" dataKey="medium" stackId="1" stroke="#EAB308" fill="#FEF9C3" />
                      <Area type="monotone" dataKey="low" stackId="1" stroke="#3B82F6" fill="#DBEAFE" />
                    </AreaChart>
                  </ResponsiveContainer>
                </div>
              </div>
              
              {/* Resource Type Distribution */}
              <div className="bg-white shadow rounded p-6">
                <h2 className="text-xl font-semibold flex items-center gap-2 mb-4 text-gray-900">
                  <Shield className="h-5 w-5 text-indigo-600" />
                  Distribuição por Tipo de Recurso
                </h2>
                <div className="h-72">
                  <ResponsiveContainer width="100%" height="100%">
                    <BarChart data={resourceTypeData} layout="vertical">
                      <CartesianGrid strokeDasharray="3 3" />
                      <XAxis type="number" />
                      <YAxis dataKey="name" type="category" width={150} />
                      <Tooltip formatter={(value) => [`${value} alertas`, 'Quantidade']} />
                      <Legend />
                      <Bar dataKey="value" name="Alertas Ativos" fill="#6366F1" />
                    </BarChart>
                  </ResponsiveContainer>
                </div>
              </div>
            </div>
          </div>
        </div>
      ) : null}

      {/* Lista de alertas */}
      {viewMode === 'list' && (
        <div className="bg-white shadow rounded p-4">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-semibold flex items-center gap-2 text-gray-900">
              <Bell className="h-5 w-5 text-indigo-600" />
              Alertas de Segurança
            </h2>
            <div className="flex items-center gap-2">
              <div className="flex items-center mr-4">
                <input 
                  type="text" 
                  placeholder="Buscar alertas..." 
                  className="px-3 py-1 border rounded text-sm focus:outline-none focus:ring-1 focus:ring-indigo-500"
                />
                <button className="p-1 bg-indigo-50 text-indigo-700 rounded-r border border-l-0">
                  <Search className="h-4 w-4" />
                </button>
              </div>
              
              <button 
                onClick={handleCleanupDuplicates}
                className="px-3 py-1 text-sm flex items-center gap-1 text-gray-700 bg-gray-100 rounded hover:bg-gray-200"
                disabled={cleanupLoading}
              >
                {cleanupLoading ? (
                  <RefreshCw className="h-3 w-3 animate-spin" />
                ) : (
                  <Trash2 className="h-3 w-3" />
                )} 
                Limpar Duplicados
              </button>
            </div>
          </div>

          {/* Loading State */}
          {loading && (
            <div className="flex justify-center items-center py-12">
              <RefreshCw className="h-8 w-8 text-indigo-500 animate-spin" />
              <span className="ml-2 text-gray-700">Carregando alertas de segurança...</span>
            </div>
          )}
          
          {/* Error State */}
          {error && (
            <div className="bg-red-50 border border-red-200 text-red-800 px-4 py-3 rounded-md mb-6">
              <p className="flex items-center">
                <AlertCircle className="h-5 w-5 text-red-500 mr-2" />
                {error}
              </p>
            </div>
          )}

          {/* No Results State */}
          {!loading && !error && filteredAlerts.length === 0 && (
            <div className="bg-white rounded-lg p-8 text-center">
              <Shield className="mx-auto h-12 w-12 text-gray-400 mb-4" />
              <h3 className="text-lg font-medium text-gray-900 mb-2">Nenhum alerta encontrado</h3>
              <p className="text-gray-500 mb-4">
                {activeCategory === "all" 
                  ? "Não há alertas de segurança para exibir no momento." 
                  : `Não há alertas de segurança para ${
                      activeCategory === 'iam' 
                        ? 'IAM & Secrets' 
                        : activeCategory === 'ec2' 
                          ? 'EC2 & Rede' 
                          : activeCategory === 's3' 
                            ? 'S3 Storage' 
                            : 'RDS'
                    } no momento.`}
              </p>
              {activeCategory === "iam" && (
                <button
                  onClick={handleScanIAMThreats}
                  disabled={!selectedCredential || iamScanLoading}
                  className="mt-2 px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 transition-colors"
                >
                  {iamScanLoading ? "Verificando IAM..." : "Verificar Segurança IAM"}
                </button>
              )}
            </div>
          )}

          {/* Alerts by Service */}
          {!loading && !error && filteredAlerts.length > 0 && (
            <div className="space-y-6">
              {/* Group alerts by service type for organized display */}
              {Object.entries(
                filteredAlerts.reduce((acc, alert) => {
                  let service = getAlertCategory(alert.resourceType);
                  
                  if (!acc[service]) acc[service] = [];
                  acc[service].push(alert);
                  return acc;
                }, {} as Record<string, any[]>)
              ).map(([service, serviceAlerts]) => (
                <motion.div 
                  key={service}
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  className="bg-white rounded-lg shadow-sm overflow-hidden border border-gray-200"
                >
                  <div 
                    className="px-4 py-3 flex items-center justify-between cursor-pointer"
                    onClick={() => {
                      const newExpandedSections = expandedSections || [];
                      if (newExpandedSections.includes(service)) {
                        setExpandedSections(newExpandedSections.filter(s => s !== service));
                      } else {
                        setExpandedSections([...newExpandedSections, service]);
                      }
                    }}
                  >
                    <div className="flex items-center">
                      {service === "iam" ? <User className="h-5 w-5 text-orange-500" /> : 
                       service === "ec2" ? <Server className="h-5 w-5 text-blue-500" /> : 
                       service === "s3" ? <Database className="h-5 w-5 text-yellow-500" /> : 
                       service === "rds" ? <Database className="h-5 w-5 text-green-500" /> : 
                       service === "dynamodb" ? <Database className="h-5 w-5 text-purple-500" /> : 
                       service === "lambda" ? <Key className="h-5 w-5 text-pink-500" /> : 
                       <Shield className="h-5 w-5 text-gray-500" />}
                      <h3 className="text-lg font-medium ml-2 text-gray-900">
                        {service === "iam" ? "IAM & Secrets" : 
                         service === "ec2" ? "EC2 & Rede" : 
                         service === "s3" ? "S3 Storage" : 
                         service === "rds" ? "RDS Database" : 
                         service === "dynamodb" ? "DynamoDB" : 
                         service === "lambda" ? "Lambda" : 
                         "Outros"} 
                        <span className="ml-2 text-sm font-normal text-gray-500">
                          {serviceAlerts.length} {serviceAlerts.length === 1 ? "alerta" : "alertas"}
                        </span>
                      </h3>
                    </div>
                    {expandedSections && expandedSections.includes(service) ? (
                      <ChevronDown className="h-5 w-5 text-gray-500" />
                    ) : (
                      <ChevronRight className="h-5 w-5 text-gray-500" />
                    )}
                  </div>
                  
                  {expandedSections && expandedSections.includes(service) && (
                    <div className="border-t border-gray-200">
                      <ul className="divide-y divide-gray-200">
                        {serviceAlerts.map(alert => (
                          <li key={alert.id} className="px-4 py-3">
                            <div className="flex items-start">
                              <div className="flex-shrink-0 mt-1">
                                {getSeverityIcon(alert.severity)}
                              </div>
                              <div className="ml-3 flex-1">
                                <div className="flex flex-wrap justify-between items-start gap-2">
                                  <h4 
                                    className="text-sm font-medium text-gray-900 cursor-pointer hover:text-indigo-600"
                                    onClick={(e) => {
                                      e.stopPropagation();
                                      openAlertDetails(alert);
                                    }}
                                  >
                                    {alert.title}
                                  </h4>
                                  <div className="flex flex-wrap gap-2">
                                    <span className={`px-2 py-0.5 rounded-full text-xs font-medium ${getSeverityColor(alert.severity)}`}>
                                      {alert.severity}
                                    </span>
                                    <span className="px-2 py-0.5 bg-gray-100 text-gray-800 rounded-full text-xs">
                                      {alert.status === "active" ? "Ativo" : alert.status === "resolved" ? "Resolvido" : "Arquivado"}
                                    </span>
                                  </div>
                                </div>
                                <p className="mt-1 text-sm text-gray-600">{alert.description}</p>
                                <div className="mt-2 flex flex-wrap items-center text-xs text-gray-500">
                                  <span className="mr-2">Recurso: {formatResourceType(alert.resourceType)}</span>
                                  <span className="mr-2">ID: {alert.resourceId}</span>
                                  {alert.credential?.name && (
                                    <span className="mr-2 bg-indigo-50 text-indigo-700 px-1.5 py-0.5 rounded">
                                      Conta: {alert.credential.name}
                                    </span>
                                  )}
                                  <span>Detectado: {new Date(alert.createdAt).toLocaleString()}</span>
                                </div>
                                
                                {alert.status === "active" && (
                                  <div className="mt-3 flex gap-2">
                                    <button
                                      onClick={() => handleResolve(alert.id)}
                                      disabled={actionLoading === alert.id}
                                      className="px-2 py-1 bg-green-100 text-green-800 rounded-md text-xs flex items-center hover:bg-green-200"
                                    >
                                      <CheckCircle className="h-3 w-3 mr-1" />
                                      {actionLoading === alert.id ? "..." : "Resolver"}
                                    </button>
                                    <button
                                      onClick={() => handleDismiss(alert.id)}
                                      disabled={actionLoading === alert.id}
                                      className="px-2 py-1 bg-gray-100 text-gray-800 rounded-md text-xs flex items-center hover:bg-gray-200"
                                    >
                                      <Archive className="h-3 w-3 mr-1" />
                                      {actionLoading === alert.id ? "..." : "Arquivar"}
                                    </button>
                                    <button
                                      onClick={(e) => {
                                        e.stopPropagation();
                                        openAlertDetails(alert);
                                      }}
                                      className="px-2 py-1 bg-indigo-100 text-indigo-800 rounded-md text-xs flex items-center hover:bg-indigo-200"
                                    >
                                      <ExternalLink className="h-3 w-3 mr-1" />
                                      Detalhes
                                    </button>
                                  </div>
                                )}
                              </div>
                            </div>
                          </li>
                        ))}
                      </ul>
                    </div>
                  )}
                </motion.div>
              ))}
            </div>
          )}
        </div>
      )}

      {/* Modal para exibir detalhes do alerta */}
      {showModal && selectedAlert && (
        <motion.div 
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          className="fixed inset-0 bg-gray-900 bg-opacity-60 backdrop-blur-sm z-50 flex items-center justify-center p-4 overflow-y-auto"
          onClick={closeModal}
        >
          <motion.div 
            initial={{ scale: 0.9, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            exit={{ scale: 0.9, opacity: 0 }}
            transition={{ type: "spring", damping: 25, stiffness: 300 }}
            className="w-full max-w-4xl bg-white rounded-xl shadow-2xl overflow-hidden"
            onClick={(e) => e.stopPropagation()}
          >
            {/* Cabeçalho do modal com gradiente baseado na severidade */}
            <div className={`relative overflow-hidden ${
              selectedAlert.severity === 'CRITICAL' ? 'bg-gradient-to-r from-red-500 to-red-700' :
              selectedAlert.severity === 'HIGH' ? 'bg-gradient-to-r from-orange-500 to-orange-700' :
              selectedAlert.severity === 'MEDIUM' ? 'bg-gradient-to-r from-yellow-500 to-yellow-700' :
              selectedAlert.severity === 'LOW' ? 'bg-gradient-to-r from-blue-500 to-blue-700' :
              'bg-gradient-to-r from-gray-500 to-gray-700'
            }`}>
              {/* Formas decorativas no background */}
              <div className="absolute top-0 left-0 w-full h-full overflow-hidden opacity-10">
                <div className="absolute -top-8 -left-8 w-40 h-40 rounded-full bg-white"></div>
                <div className="absolute top-10 right-10 w-20 h-20 rounded-full bg-white"></div>
                <div className="absolute -bottom-8 left-1/2 w-40 h-40 rounded-full bg-white"></div>
              </div>
              
              <div className="relative p-6 flex items-start justify-between z-10">
                <div className="flex items-start">
                  <div className="p-2 rounded-lg bg-white bg-opacity-20 backdrop-blur-sm mr-4">
                    {selectedAlert.severity === 'CRITICAL' ? <AlertCircle className="h-8 w-8 text-red-200" /> :
                     selectedAlert.severity === 'HIGH' ? <AlertTriangle className="h-8 w-8 text-orange-200" /> :
                     selectedAlert.severity === 'MEDIUM' ? <AlertTriangle className="h-8 w-8 text-yellow-200" /> :
                     selectedAlert.severity === 'LOW' ? <Info className="h-8 w-8 text-blue-200" /> :
                     <Info className="h-8 w-8 text-gray-200" />}
                  </div>
                  <div>
                    <h3 className="text-2xl font-bold text-white">{selectedAlert.title}</h3>
                    <div className="flex items-center mt-2">
                      <span className="px-3 py-1 rounded-full text-xs font-bold bg-white text-gray-800">
                        {selectedAlert.severity}
                      </span>
                      <span className="ml-3 text-sm text-white text-opacity-90 flex items-center">
                        <Clock className="h-3.5 w-3.5 mr-1" />
                        {new Date(selectedAlert.createdAt).toLocaleString()}
                      </span>
                    </div>
                  </div>
                </div>
                <button 
                  onClick={closeModal}
                  className="p-2 rounded-full hover:bg-white hover:bg-opacity-20 transition-colors"
                >
                  <X className="h-6 w-6 text-white" />
                </button>
              </div>
            </div>
            
            {/* Corpo do modal */}
            <div className="p-6 bg-gradient-to-b from-white to-gray-50">
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                {/* Coluna de informações */}
                <div className="bg-white rounded-xl shadow-sm border border-gray-100 p-5">
                  <h4 className="text-lg font-bold text-gray-900 mb-4 flex items-center">
                    <Shield className="h-5 w-5 text-indigo-600 mr-2" />
                    Informações do Alerta
                  </h4>
                  
                  <div className="space-y-5">
                    <div className="bg-gray-50 rounded-lg p-4">
                      <h5 className="text-sm font-semibold text-gray-700 mb-2 flex items-center">
                        <FileText className="h-4 w-4 text-gray-500 mr-2" />
                        Descrição
                      </h5>
                      <p className="text-sm text-gray-700 leading-relaxed">{selectedAlert.description}</p>
                    </div>
                    
                    <div className="bg-gray-50 rounded-lg p-4">
                      <h5 className="text-sm font-semibold text-gray-700 mb-2 flex items-center">
                        <Server className="h-4 w-4 text-gray-500 mr-2" />
                        Recurso Afetado
                      </h5>
                      <div className="flex items-center mb-2 bg-white p-3 rounded-lg border border-gray-200">
                        <div className="p-2 rounded-full bg-indigo-100 mr-3">
                          {getResourceTypeIcon(selectedAlert.resourceType)}
                        </div>
                        <div>
                          <div className="text-sm font-medium text-gray-900">
                            {getResourceTypeText(selectedAlert.resourceType)}
                          </div>
                          <div className="text-xs text-gray-500">ID: {selectedAlert.resourceId}</div>
                        </div>
                      </div>
                      {selectedAlert.resourceName && (
                        <div className="text-sm text-gray-700 mt-2 bg-white p-3 rounded-lg border border-gray-200">
                          <span className="font-medium">Nome:</span> {selectedAlert.resourceName}
                        </div>
                      )}
                    </div>
                    
                    <div className="bg-gray-50 rounded-lg p-4">
                      <h5 className="text-sm font-semibold text-gray-700 mb-2 flex items-center">
                        <Database className="h-4 w-4 text-gray-500 mr-2" />
                        Dados Adicionais
                      </h5>
                      <div className="grid grid-cols-2 gap-3 text-sm">
                        <div className="bg-white p-3 rounded-lg border border-gray-200">
                          <div className="text-xs text-gray-500 mb-1">Serviço</div>
                          <div className="font-medium text-gray-900">{selectedAlert.service || 'N/A'}</div>
                        </div>
                        <div className="bg-white p-3 rounded-lg border border-gray-200">
                          <div className="text-xs text-gray-500 mb-1">Região</div>
                          <div className="font-medium text-gray-900">{selectedAlert.region || 'N/A'}</div>
                        </div>
                        <div className="bg-white p-3 rounded-lg border border-gray-200">
                          <div className="text-xs text-gray-500 mb-1">Status</div>
                          <div className="font-medium flex items-center">
                            {selectedAlert.status === "active" ? (
                              <><AlertCircle className="h-3 w-3 text-red-500 mr-1" /> <span className="text-red-600">Ativo</span></>
                            ) : selectedAlert.status === "resolved" ? (
                              <><CheckCircle className="h-3 w-3 text-green-500 mr-1" /> <span className="text-green-600">Resolvido</span></>
                            ) : (
                              <><Archive className="h-3 w-3 text-gray-500 mr-1" /> <span className="text-gray-600">Arquivado</span></>
                            )}
                          </div>
                        </div>
                        <div className="bg-white p-3 rounded-lg border border-gray-200">
                          <div className="text-xs text-gray-500 mb-1">CVSS</div>
                          <div className="font-medium text-gray-900">{selectedAlert.cvss || 'N/A'}</div>
                        </div>
                        {selectedAlert.credential?.name && (
                          <div className="bg-white p-3 rounded-lg border border-gray-200">
                            <div className="text-xs text-gray-500 mb-1">Conta AWS</div>
                            <div className="font-medium text-gray-900">{selectedAlert.credential.name}</div>
                          </div>
                        )}
                      </div>
                    </div>
                  </div>
                </div>
                
                {/* Coluna de mitigação */}
                <div className="bg-white rounded-xl shadow-sm border border-gray-100 p-5">
                  <h4 className="text-lg font-bold text-gray-900 mb-4 flex items-center">
                    <Shield className="h-5 w-5 text-green-600 mr-2" />
                    Mitigação Recomendada
                  </h4>
                  
                  <div className="space-y-5">
                    <div className={`rounded-lg p-5 ${
                      selectedAlert.severity === 'CRITICAL' ? 'bg-red-50 border border-red-100' :
                      selectedAlert.severity === 'HIGH' ? 'bg-orange-50 border border-orange-100' :
                      selectedAlert.severity === 'MEDIUM' ? 'bg-yellow-50 border border-yellow-100' :
                      selectedAlert.severity === 'LOW' ? 'bg-blue-50 border border-blue-100' :
                      'bg-gray-50 border border-gray-100'
                    }`}>
                      <h5 className="text-sm font-semibold mb-3 flex items-center">
                        <CheckCircle className={`h-4 w-4 mr-2 ${
                          selectedAlert.severity === 'CRITICAL' ? 'text-red-600' :
                          selectedAlert.severity === 'HIGH' ? 'text-orange-600' :
                          selectedAlert.severity === 'MEDIUM' ? 'text-yellow-600' :
                          selectedAlert.severity === 'LOW' ? 'text-blue-600' :
                          'text-gray-600'
                        }`} />
                        Como resolver
                      </h5>
                      <div className={`text-sm whitespace-pre-line leading-relaxed ${
                        selectedAlert.severity === 'CRITICAL' ? 'text-red-700' :
                        selectedAlert.severity === 'HIGH' ? 'text-orange-700' :
                        selectedAlert.severity === 'MEDIUM' ? 'text-yellow-700' :
                        selectedAlert.severity === 'LOW' ? 'text-blue-700' :
                        'text-gray-700'
                      }`}>
                        {selectedAlert.remediation || 'Nenhuma recomendação específica disponível para este alerta.'}
                      </div>
                    </div>
                    
                    <div className="bg-indigo-50 rounded-lg p-5 border border-indigo-100">
                      <h5 className="text-sm font-semibold text-indigo-800 mb-3 flex items-center">
                        <FileText className="h-4 w-4 text-indigo-600 mr-2" />
                        Passos para mitigação
                      </h5>
                      <ol className="list-decimal ml-5 text-sm text-indigo-700 space-y-2">
                        {selectedAlert.remediation ? (
                          selectedAlert.remediation.split('\n').filter(Boolean).map((step: string, index: number) => (
                            <li key={index} className="pl-1">{step}</li>
                          ))
                        ) : (
                          <>
                            <li className="pl-1">Analise o recurso afetado no console AWS</li>
                            <li className="pl-1">Aplique as melhores práticas de segurança da AWS</li>
                            <li className="pl-1">Verifique a documentação oficial da AWS para recomendações específicas</li>
                            <li className="pl-1">Implemente as alterações seguindo o princípio de privilégio mínimo</li>
                            <li className="pl-1">Valide as alterações para garantir que o problema foi resolvido</li>
                          </>
                        )}
                      </ol>
                    </div>
                    
                    <div className="bg-gray-50 rounded-lg p-5 border border-gray-100">
                      <h5 className="text-sm font-semibold text-gray-800 mb-3 flex items-center">
                        <AlertTriangle className={`h-4 w-4 mr-2 ${
                          selectedAlert.severity === 'CRITICAL' ? 'text-red-600' :
                          selectedAlert.severity === 'HIGH' ? 'text-orange-600' :
                          selectedAlert.severity === 'MEDIUM' ? 'text-yellow-600' :
                          selectedAlert.severity === 'LOW' ? 'text-blue-600' :
                          'text-gray-600'
                        }`} />
                        Impacto de segurança
                      </h5>
                      <div className="flex items-center justify-between mb-3">
                        <span className="text-xs font-medium text-gray-600">Severidade</span>
                        <div className="flex items-center">
                          {Array(5).fill(0).map((_, i) => (
                            <div 
                              key={i} 
                              className={`w-6 h-1.5 rounded-full ml-1 ${
                                (selectedAlert.severity === 'CRITICAL' && i < 5) ||
                                (selectedAlert.severity === 'HIGH' && i < 4) ||
                                (selectedAlert.severity === 'MEDIUM' && i < 3) ||
                                (selectedAlert.severity === 'LOW' && i < 2) ||
                                (selectedAlert.severity === 'INFO' && i < 1)
                                  ? selectedAlert.severity === 'CRITICAL' ? 'bg-red-500' :
                                    selectedAlert.severity === 'HIGH' ? 'bg-orange-500' :
                                    selectedAlert.severity === 'MEDIUM' ? 'bg-yellow-500' :
                                    selectedAlert.severity === 'LOW' ? 'bg-blue-500' :
                                    'bg-gray-500'
                                  : 'bg-gray-200'
                              }`}
                            ></div>
                          ))}
                        </div>
                      </div>
                      <p className="text-sm text-gray-700 bg-white p-3 rounded-lg border border-gray-200">
                        {selectedAlert.severity === 'CRITICAL' ? 'Este problema representa um risco crítico de segurança que requer atenção imediata. A exploração pode levar a comprometimento completo do sistema.' :
                         selectedAlert.severity === 'HIGH' ? 'Este problema representa um alto risco de segurança que deve ser tratado com prioridade. Sistemas afetados são vulneráveis a ataques significativos.' :
                         selectedAlert.severity === 'MEDIUM' ? 'Este problema representa um risco moderado de segurança que deve ser resolvido dentro de um prazo razoável.' :
                         selectedAlert.severity === 'LOW' ? 'Este problema representa um baixo risco de segurança, mas ainda deve ser tratado como parte das boas práticas de segurança.' :
                         'Este é um item informativo que não representa um risco imediato de segurança, mas pode ser considerado para melhorias futuras.'}
                      </p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            
            {/* Rodapé com ações */}
            <div className="bg-gray-50 p-5 border-t border-gray-200 flex justify-between">
              <div className="text-sm text-gray-500 flex items-center">
                <Shield className="h-4 w-4 mr-1 text-indigo-500" />
                ID: {selectedAlert.id?.substring(0, 8)}...
              </div>
              
              <div className="flex gap-3">
                {selectedAlert.status === "active" && (
                  <>
                    <button
                      onClick={() => {
                        handleResolve(selectedAlert.id).then(() => closeModal());
                      }}
                      disabled={actionLoading === selectedAlert.id}
                      className="px-4 py-2 bg-gradient-to-r from-green-500 to-green-600 text-white rounded-lg text-sm font-medium flex items-center hover:from-green-600 hover:to-green-700 transition-colors shadow-sm disabled:opacity-70"
                    >
                      <CheckCircle className="h-4 w-4 mr-2" />
                      {actionLoading === selectedAlert.id ? "Processando..." : "Marcar como Resolvido"}
                    </button>
                    <button
                      onClick={() => {
                        handleDismiss(selectedAlert.id).then(() => closeModal());
                      }}
                      disabled={actionLoading === selectedAlert.id}
                      className="px-4 py-2 bg-gradient-to-r from-gray-500 to-gray-600 text-white rounded-lg text-sm font-medium flex items-center hover:from-gray-600 hover:to-gray-700 transition-colors shadow-sm disabled:opacity-70"
                    >
                      <Archive className="h-4 w-4 mr-2" />
                      {actionLoading === selectedAlert.id ? "Processando..." : "Arquivar Alerta"}
                    </button>
                  </>
                )}
                <button
                  onClick={closeModal}
                  className="px-4 py-2 bg-white border border-gray-300 text-gray-700 rounded-lg text-sm font-medium hover:bg-gray-50 transition-colors shadow-sm"
                >
                  Fechar
                </button>
              </div>
            </div>
          </motion.div>
        </motion.div>
      )}
    </div>
  );
} 